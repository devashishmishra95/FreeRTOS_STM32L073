
001_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004890  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a74  08004a74  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a7c  08004a7c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c2c  20000084  08004b08  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  08004b08  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaad  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f1  00000000  00000000  0002eb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00030e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b07  00000000  00000000  000326f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dce1  00000000  00000000  000481ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f11  00000000  00000000  00055ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dddf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003680  00000000  00000000  000dde44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004938 	.word	0x08004938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08004938 	.word	0x08004938

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f82e 	bl	80002c0 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	0415      	lsls	r5, r2, #16
 8000274:	0c2d      	lsrs	r5, r5, #16
 8000276:	000f      	movs	r7, r1
 8000278:	0001      	movs	r1, r0
 800027a:	002e      	movs	r6, r5
 800027c:	46c6      	mov	lr, r8
 800027e:	4684      	mov	ip, r0
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	0c14      	lsrs	r4, r2, #16
 8000284:	0c00      	lsrs	r0, r0, #16
 8000286:	0c09      	lsrs	r1, r1, #16
 8000288:	4346      	muls	r6, r0
 800028a:	434d      	muls	r5, r1
 800028c:	4360      	muls	r0, r4
 800028e:	4361      	muls	r1, r4
 8000290:	1940      	adds	r0, r0, r5
 8000292:	0c34      	lsrs	r4, r6, #16
 8000294:	1824      	adds	r4, r4, r0
 8000296:	b500      	push	{lr}
 8000298:	42a5      	cmp	r5, r4
 800029a:	d903      	bls.n	80002a4 <__aeabi_lmul+0x34>
 800029c:	2080      	movs	r0, #128	; 0x80
 800029e:	0240      	lsls	r0, r0, #9
 80002a0:	4680      	mov	r8, r0
 80002a2:	4441      	add	r1, r8
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	186d      	adds	r5, r5, r1
 80002a8:	4661      	mov	r1, ip
 80002aa:	4359      	muls	r1, r3
 80002ac:	437a      	muls	r2, r7
 80002ae:	0430      	lsls	r0, r6, #16
 80002b0:	1949      	adds	r1, r1, r5
 80002b2:	0424      	lsls	r4, r4, #16
 80002b4:	0c00      	lsrs	r0, r0, #16
 80002b6:	1820      	adds	r0, r4, r0
 80002b8:	1889      	adds	r1, r1, r2
 80002ba:	bc80      	pop	{r7}
 80002bc:	46b8      	mov	r8, r7
 80002be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c0 <__udivmoddi4>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	4657      	mov	r7, sl
 80002c4:	464e      	mov	r6, r9
 80002c6:	4645      	mov	r5, r8
 80002c8:	46de      	mov	lr, fp
 80002ca:	b5e0      	push	{r5, r6, r7, lr}
 80002cc:	0004      	movs	r4, r0
 80002ce:	000d      	movs	r5, r1
 80002d0:	4692      	mov	sl, r2
 80002d2:	4699      	mov	r9, r3
 80002d4:	b083      	sub	sp, #12
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d830      	bhi.n	800033c <__udivmoddi4+0x7c>
 80002da:	d02d      	beq.n	8000338 <__udivmoddi4+0x78>
 80002dc:	4649      	mov	r1, r9
 80002de:	4650      	mov	r0, sl
 80002e0:	f000 f8ba 	bl	8000458 <__clzdi2>
 80002e4:	0029      	movs	r1, r5
 80002e6:	0006      	movs	r6, r0
 80002e8:	0020      	movs	r0, r4
 80002ea:	f000 f8b5 	bl	8000458 <__clzdi2>
 80002ee:	1a33      	subs	r3, r6, r0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3b20      	subs	r3, #32
 80002f4:	469b      	mov	fp, r3
 80002f6:	d433      	bmi.n	8000360 <__udivmoddi4+0xa0>
 80002f8:	465a      	mov	r2, fp
 80002fa:	4653      	mov	r3, sl
 80002fc:	4093      	lsls	r3, r2
 80002fe:	4642      	mov	r2, r8
 8000300:	001f      	movs	r7, r3
 8000302:	4653      	mov	r3, sl
 8000304:	4093      	lsls	r3, r2
 8000306:	001e      	movs	r6, r3
 8000308:	42af      	cmp	r7, r5
 800030a:	d83a      	bhi.n	8000382 <__udivmoddi4+0xc2>
 800030c:	42af      	cmp	r7, r5
 800030e:	d100      	bne.n	8000312 <__udivmoddi4+0x52>
 8000310:	e078      	b.n	8000404 <__udivmoddi4+0x144>
 8000312:	465b      	mov	r3, fp
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	41bd      	sbcs	r5, r7
 8000318:	2b00      	cmp	r3, #0
 800031a:	da00      	bge.n	800031e <__udivmoddi4+0x5e>
 800031c:	e075      	b.n	800040a <__udivmoddi4+0x14a>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	465a      	mov	r2, fp
 800032a:	4093      	lsls	r3, r2
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2301      	movs	r3, #1
 8000330:	4642      	mov	r2, r8
 8000332:	4093      	lsls	r3, r2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	e028      	b.n	800038a <__udivmoddi4+0xca>
 8000338:	4282      	cmp	r2, r0
 800033a:	d9cf      	bls.n	80002dc <__udivmoddi4+0x1c>
 800033c:	2200      	movs	r2, #0
 800033e:	2300      	movs	r3, #0
 8000340:	9200      	str	r2, [sp, #0]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <__udivmoddi4+0x8e>
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	605d      	str	r5, [r3, #4]
 800034e:	9800      	ldr	r0, [sp, #0]
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	b003      	add	sp, #12
 8000354:	bcf0      	pop	{r4, r5, r6, r7}
 8000356:	46bb      	mov	fp, r7
 8000358:	46b2      	mov	sl, r6
 800035a:	46a9      	mov	r9, r5
 800035c:	46a0      	mov	r8, r4
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	4642      	mov	r2, r8
 8000362:	2320      	movs	r3, #32
 8000364:	1a9b      	subs	r3, r3, r2
 8000366:	4652      	mov	r2, sl
 8000368:	40da      	lsrs	r2, r3
 800036a:	4641      	mov	r1, r8
 800036c:	0013      	movs	r3, r2
 800036e:	464a      	mov	r2, r9
 8000370:	408a      	lsls	r2, r1
 8000372:	0017      	movs	r7, r2
 8000374:	4642      	mov	r2, r8
 8000376:	431f      	orrs	r7, r3
 8000378:	4653      	mov	r3, sl
 800037a:	4093      	lsls	r3, r2
 800037c:	001e      	movs	r6, r3
 800037e:	42af      	cmp	r7, r5
 8000380:	d9c4      	bls.n	800030c <__udivmoddi4+0x4c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	4643      	mov	r3, r8
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0d9      	beq.n	8000344 <__udivmoddi4+0x84>
 8000390:	07fb      	lsls	r3, r7, #31
 8000392:	0872      	lsrs	r2, r6, #1
 8000394:	431a      	orrs	r2, r3
 8000396:	4646      	mov	r6, r8
 8000398:	087b      	lsrs	r3, r7, #1
 800039a:	e00e      	b.n	80003ba <__udivmoddi4+0xfa>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d101      	bne.n	80003a4 <__udivmoddi4+0xe4>
 80003a0:	42a2      	cmp	r2, r4
 80003a2:	d80c      	bhi.n	80003be <__udivmoddi4+0xfe>
 80003a4:	1aa4      	subs	r4, r4, r2
 80003a6:	419d      	sbcs	r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	1924      	adds	r4, r4, r4
 80003ac:	416d      	adcs	r5, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	3e01      	subs	r6, #1
 80003b2:	1824      	adds	r4, r4, r0
 80003b4:	414d      	adcs	r5, r1
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d006      	beq.n	80003c8 <__udivmoddi4+0x108>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	d9ee      	bls.n	800039c <__udivmoddi4+0xdc>
 80003be:	3e01      	subs	r6, #1
 80003c0:	1924      	adds	r4, r4, r4
 80003c2:	416d      	adcs	r5, r5
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d1f8      	bne.n	80003ba <__udivmoddi4+0xfa>
 80003c8:	9800      	ldr	r0, [sp, #0]
 80003ca:	9901      	ldr	r1, [sp, #4]
 80003cc:	465b      	mov	r3, fp
 80003ce:	1900      	adds	r0, r0, r4
 80003d0:	4169      	adcs	r1, r5
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db24      	blt.n	8000420 <__udivmoddi4+0x160>
 80003d6:	002b      	movs	r3, r5
 80003d8:	465a      	mov	r2, fp
 80003da:	4644      	mov	r4, r8
 80003dc:	40d3      	lsrs	r3, r2
 80003de:	002a      	movs	r2, r5
 80003e0:	40e2      	lsrs	r2, r4
 80003e2:	001c      	movs	r4, r3
 80003e4:	465b      	mov	r3, fp
 80003e6:	0015      	movs	r5, r2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db2a      	blt.n	8000442 <__udivmoddi4+0x182>
 80003ec:	0026      	movs	r6, r4
 80003ee:	409e      	lsls	r6, r3
 80003f0:	0033      	movs	r3, r6
 80003f2:	0026      	movs	r6, r4
 80003f4:	4647      	mov	r7, r8
 80003f6:	40be      	lsls	r6, r7
 80003f8:	0032      	movs	r2, r6
 80003fa:	1a80      	subs	r0, r0, r2
 80003fc:	4199      	sbcs	r1, r3
 80003fe:	9000      	str	r0, [sp, #0]
 8000400:	9101      	str	r1, [sp, #4]
 8000402:	e79f      	b.n	8000344 <__udivmoddi4+0x84>
 8000404:	42a3      	cmp	r3, r4
 8000406:	d8bc      	bhi.n	8000382 <__udivmoddi4+0xc2>
 8000408:	e783      	b.n	8000312 <__udivmoddi4+0x52>
 800040a:	4642      	mov	r2, r8
 800040c:	2320      	movs	r3, #32
 800040e:	2100      	movs	r1, #0
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	2200      	movs	r2, #0
 8000414:	9100      	str	r1, [sp, #0]
 8000416:	9201      	str	r2, [sp, #4]
 8000418:	2201      	movs	r2, #1
 800041a:	40da      	lsrs	r2, r3
 800041c:	9201      	str	r2, [sp, #4]
 800041e:	e786      	b.n	800032e <__udivmoddi4+0x6e>
 8000420:	4642      	mov	r2, r8
 8000422:	2320      	movs	r3, #32
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	002a      	movs	r2, r5
 8000428:	4646      	mov	r6, r8
 800042a:	409a      	lsls	r2, r3
 800042c:	0023      	movs	r3, r4
 800042e:	40f3      	lsrs	r3, r6
 8000430:	4644      	mov	r4, r8
 8000432:	4313      	orrs	r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	40e2      	lsrs	r2, r4
 8000438:	001c      	movs	r4, r3
 800043a:	465b      	mov	r3, fp
 800043c:	0015      	movs	r5, r2
 800043e:	2b00      	cmp	r3, #0
 8000440:	dad4      	bge.n	80003ec <__udivmoddi4+0x12c>
 8000442:	4642      	mov	r2, r8
 8000444:	002f      	movs	r7, r5
 8000446:	2320      	movs	r3, #32
 8000448:	0026      	movs	r6, r4
 800044a:	4097      	lsls	r7, r2
 800044c:	1a9b      	subs	r3, r3, r2
 800044e:	40de      	lsrs	r6, r3
 8000450:	003b      	movs	r3, r7
 8000452:	4333      	orrs	r3, r6
 8000454:	e7cd      	b.n	80003f2 <__udivmoddi4+0x132>
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__clzdi2>:
 8000458:	b510      	push	{r4, lr}
 800045a:	2900      	cmp	r1, #0
 800045c:	d103      	bne.n	8000466 <__clzdi2+0xe>
 800045e:	f000 f807 	bl	8000470 <__clzsi2>
 8000462:	3020      	adds	r0, #32
 8000464:	e002      	b.n	800046c <__clzdi2+0x14>
 8000466:	1c08      	adds	r0, r1, #0
 8000468:	f000 f802 	bl	8000470 <__clzsi2>
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__clzsi2>:
 8000470:	211c      	movs	r1, #28
 8000472:	2301      	movs	r3, #1
 8000474:	041b      	lsls	r3, r3, #16
 8000476:	4298      	cmp	r0, r3
 8000478:	d301      	bcc.n	800047e <__clzsi2+0xe>
 800047a:	0c00      	lsrs	r0, r0, #16
 800047c:	3910      	subs	r1, #16
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	4298      	cmp	r0, r3
 8000482:	d301      	bcc.n	8000488 <__clzsi2+0x18>
 8000484:	0a00      	lsrs	r0, r0, #8
 8000486:	3908      	subs	r1, #8
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0x22>
 800048e:	0900      	lsrs	r0, r0, #4
 8000490:	3904      	subs	r1, #4
 8000492:	a202      	add	r2, pc, #8	; (adr r2, 800049c <__clzsi2+0x2c>)
 8000494:	5c10      	ldrb	r0, [r2, r0]
 8000496:	1840      	adds	r0, r0, r1
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	02020304 	.word	0x02020304
 80004a0:	01010101 	.word	0x01010101
	...

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80004b2:	f003 feab 	bl	800420c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 f9b7 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f83b 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 f895 	bl	80005ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status=xTaskCreate(task1_handler, "Task-1", 200, "Hello World from task 1", 2, &task1_handle);
 80004c2:	4a16      	ldr	r2, [pc, #88]	; (800051c <main+0x70>)
 80004c4:	4916      	ldr	r1, [pc, #88]	; (8000520 <main+0x74>)
 80004c6:	4817      	ldr	r0, [pc, #92]	; (8000524 <main+0x78>)
 80004c8:	2308      	movs	r3, #8
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2302      	movs	r3, #2
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	0013      	movs	r3, r2
 80004d4:	22c8      	movs	r2, #200	; 0xc8
 80004d6:	f001 ffda 	bl	800248e <xTaskCreate>
 80004da:	0003      	movs	r3, r0
 80004dc:	60fb      	str	r3, [r7, #12]
  configASSERT(status==pdPASS);
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d001      	beq.n	80004e8 <main+0x3c>
 80004e4:	b672      	cpsid	i
 80004e6:	e7fe      	b.n	80004e6 <main+0x3a>
  status=xTaskCreate(task2_handler, "Task-2", 200, "Hello World from task 2", 2, &task2_handle);
 80004e8:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <main+0x7c>)
 80004ea:	4910      	ldr	r1, [pc, #64]	; (800052c <main+0x80>)
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <main+0x84>)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2302      	movs	r3, #2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	0013      	movs	r3, r2
 80004f8:	22c8      	movs	r2, #200	; 0xc8
 80004fa:	f001 ffc8 	bl	800248e <xTaskCreate>
 80004fe:	0003      	movs	r3, r0
 8000500:	60fb      	str	r3, [r7, #12]
  configASSERT(status==pdPASS);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d001      	beq.n	800050c <main+0x60>
 8000508:	b672      	cpsid	i
 800050a:	e7fe      	b.n	800050a <main+0x5e>


  vTaskStartScheduler();
 800050c:	f002 f92c 	bl	8002768 <vTaskStartScheduler>
 8000510:	2300      	movs	r3, #0
  /*while (1)
  {

  }*/
  /* USER CODE END 3 */
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b004      	add	sp, #16
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	08004950 	.word	0x08004950
 8000520:	08004968 	.word	0x08004968
 8000524:	08000675 	.word	0x08000675
 8000528:	08004970 	.word	0x08004970
 800052c:	08004988 	.word	0x08004988
 8000530:	08000695 	.word	0x08000695

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b095      	sub	sp, #84	; 0x54
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	2418      	movs	r4, #24
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2338      	movs	r3, #56	; 0x38
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 fc16 	bl	8003d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	2314      	movs	r3, #20
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f003 fc0f 	bl	8003d76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xb0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <SystemClock_Config+0xb4>)
 800055e:	401a      	ands	r2, r3
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <SystemClock_Config+0xb0>)
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	0109      	lsls	r1, r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2202      	movs	r2, #2
 8000570:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2210      	movs	r2, #16
 800057c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2202      	movs	r2, #2
 8000582:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	02d2      	lsls	r2, r2, #11
 8000590:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	03d2      	lsls	r2, r2, #15
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fc07 	bl	8000db0 <HAL_RCC_OscConfig>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005a6:	f000 f88d 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	220f      	movs	r2, #15
 80005ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2203      	movs	r2, #3
 80005b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2101      	movs	r1, #1
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 ffc3 	bl	8001558 <HAL_RCC_ClockConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005d6:	f000 f875 	bl	80006c4 <Error_Handler>
  }
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b015      	add	sp, #84	; 0x54
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40007000 	.word	0x40007000
 80005e8:	ffffe7ff 	.word	0xffffe7ff

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b089      	sub	sp, #36	; 0x24
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	240c      	movs	r4, #12
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f003 fbba 	bl	8003d76 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_GPIO_Init+0x84>)
 8000604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_GPIO_Init+0x84>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	430a      	orrs	r2, r1
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_GPIO_Init+0x84>)
 8000610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_GPIO_Init+0x84>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_GPIO_Init+0x84>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_GPIO_Init+0x84>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fb80 	bl	8000d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000640:	0021      	movs	r1, r4
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2220      	movs	r2, #32
 8000646:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	187a      	adds	r2, r7, r1
 800065c:	23a0      	movs	r3, #160	; 0xa0
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f000 f9ee 	bl	8000a44 <HAL_GPIO_Init>

}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b009      	add	sp, #36	; 0x24
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fb79 	bl	8000d7a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000688:	23fa      	movs	r3, #250	; 0xfa
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 f907 	bl	80008a0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000692:	e7f3      	b.n	800067c <task1_handler+0x8>

08000694 <task2_handler>:
		//printf("%s\n",(char*)parameters);
	}

}
static void task2_handler(void* parameters){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	while(1){
 800069c:	e7fe      	b.n	800069c <task2_handler+0x8>
	...

080006a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b2:	f000 f8d9 	bl	8000868 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40001000 	.word	0x40001000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <HAL_MspInit+0x24>)
 80006d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x24>)
 80006da:	2101      	movs	r1, #1
 80006dc:	430a      	orrs	r2, r1
 80006de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_MspInit+0x24>)
 80006e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_MspInit+0x24>)
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	0549      	lsls	r1, r1, #21
 80006ea:	430a      	orrs	r2, r1
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	0019      	movs	r1, r3
 800070e:	2011      	movs	r0, #17
 8000710:	f000 f972 	bl	80009f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000714:	2011      	movs	r0, #17
 8000716:	f000 f984 	bl	8000a22 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <HAL_InitTick+0x98>)
 800071c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <HAL_InitTick+0x98>)
 8000720:	2110      	movs	r1, #16
 8000722:	430a      	orrs	r2, r1
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000726:	2308      	movs	r3, #8
 8000728:	18fa      	adds	r2, r7, r3
 800072a:	230c      	movs	r3, #12
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f91f 	bl	8001974 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000736:	f001 f907 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 800073a:	0003      	movs	r3, r0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	4914      	ldr	r1, [pc, #80]	; (8000794 <HAL_InitTick+0x9c>)
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff fce8 	bl	8000118 <__udivsi3>
 8000748:	0003      	movs	r3, r0
 800074a:	3b01      	subs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0xa0>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <HAL_InitTick+0xa4>)
 8000752:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_InitTick+0xa0>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <HAL_InitTick+0xa8>)
 8000758:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_InitTick+0xa0>)
 800075c:	6a3a      	ldr	r2, [r7, #32]
 800075e:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_InitTick+0xa0>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_InitTick+0xa0>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_InitTick+0xa0>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 f932 	bl	80019d8 <HAL_TIM_Base_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d105      	bne.n	8000784 <HAL_InitTick+0x8c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_InitTick+0xa0>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f974 	bl	8001a68 <HAL_TIM_Base_Start_IT>
 8000780:	0003      	movs	r3, r0
 8000782:	e000      	b.n	8000786 <HAL_InitTick+0x8e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000784:	2301      	movs	r3, #1
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b00a      	add	sp, #40	; 0x28
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000
 8000794:	000f4240 	.word	0x000f4240
 8000798:	20001c1c 	.word	0x20001c1c
 800079c:	40001000 	.word	0x40001000
 80007a0:	000003e7 	.word	0x000003e7

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <TIM6_DAC_IRQHandler+0x14>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f9a8 	bl	8001b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20001c1c 	.word	0x20001c1c

080007c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490e      	ldr	r1, [pc, #56]	; (8000814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0b      	ldr	r4, [pc, #44]	; (8000820 <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007fe:	f7ff ffe3 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000802:	f003 fa8b 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000806:	f7ff fe51 	bl	80004ac <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
   ldr   r0, =_estack
 800080c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000818:	08004a84 	.word	0x08004a84
  ldr r2, =_sbss
 800081c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000820:	20001cb0 	.word	0x20001cb0

08000824 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_COMP_IRQHandler>
	...

08000828 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_Init+0x3c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_Init+0x3c>)
 800083a:	2140      	movs	r1, #64	; 0x40
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000840:	2003      	movs	r0, #3
 8000842:	f7ff ff59 	bl	80006f8 <HAL_InitTick>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d003      	beq.n	8000852 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e001      	b.n	8000856 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000852:	f7ff ff3d 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	40022000 	.word	0x40022000

08000868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x1c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	001a      	movs	r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x20>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	18d2      	adds	r2, r2, r3
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_IncTick+0x20>)
 800087a:	601a      	str	r2, [r3, #0]
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000008 	.word	0x20000008
 8000888:	20001c5c 	.word	0x20001c5c

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b02      	ldr	r3, [pc, #8]	; (800089c <HAL_GetTick+0x10>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	20001c5c 	.word	0x20001c5c

080008a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff fff0 	bl	800088c <HAL_GetTick>
 80008ac:	0003      	movs	r3, r0
 80008ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_Delay+0x44>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	001a      	movs	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	189b      	adds	r3, r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	f7ff ffe0 	bl	800088c <HAL_GetTick>
 80008cc:	0002      	movs	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b004      	add	sp, #16
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	20000008 	.word	0x20000008

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b7f      	cmp	r3, #127	; 0x7f
 80008fa:	d809      	bhi.n	8000910 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	231f      	movs	r3, #31
 8000904:	401a      	ands	r2, r3
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_EnableIRQ+0x30>)
 8000908:	2101      	movs	r1, #1
 800090a:	4091      	lsls	r1, r2
 800090c:	000a      	movs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
  }
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b7f      	cmp	r3, #127	; 0x7f
 8000930:	d828      	bhi.n	8000984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000932:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <__NVIC_SetPriority+0xd4>)
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	33c0      	adds	r3, #192	; 0xc0
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	589b      	ldr	r3, [r3, r2]
 8000942:	1dfa      	adds	r2, r7, #7
 8000944:	7812      	ldrb	r2, [r2, #0]
 8000946:	0011      	movs	r1, r2
 8000948:	2203      	movs	r2, #3
 800094a:	400a      	ands	r2, r1
 800094c:	00d2      	lsls	r2, r2, #3
 800094e:	21ff      	movs	r1, #255	; 0xff
 8000950:	4091      	lsls	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	43d2      	mvns	r2, r2
 8000956:	401a      	ands	r2, r3
 8000958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	019b      	lsls	r3, r3, #6
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	401a      	ands	r2, r3
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0018      	movs	r0, r3
 8000968:	2303      	movs	r3, #3
 800096a:	4003      	ands	r3, r0
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <__NVIC_SetPriority+0xd4>)
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b25b      	sxtb	r3, r3
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	430a      	orrs	r2, r1
 800097c:	33c0      	adds	r3, #192	; 0xc0
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000982:	e031      	b.n	80009e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <__NVIC_SetPriority+0xd8>)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0019      	movs	r1, r3
 800098c:	230f      	movs	r3, #15
 800098e:	400b      	ands	r3, r1
 8000990:	3b08      	subs	r3, #8
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3306      	adds	r3, #6
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	3304      	adds	r3, #4
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	0011      	movs	r1, r2
 80009a4:	2203      	movs	r2, #3
 80009a6:	400a      	ands	r2, r1
 80009a8:	00d2      	lsls	r2, r2, #3
 80009aa:	21ff      	movs	r1, #255	; 0xff
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	401a      	ands	r2, r3
 80009b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	401a      	ands	r2, r3
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0018      	movs	r0, r3
 80009c4:	2303      	movs	r3, #3
 80009c6:	4003      	ands	r3, r0
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <__NVIC_SetPriority+0xd8>)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	001c      	movs	r4, r3
 80009d4:	230f      	movs	r3, #15
 80009d6:	4023      	ands	r3, r4
 80009d8:	3b08      	subs	r3, #8
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	430a      	orrs	r2, r1
 80009de:	3306      	adds	r3, #6
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	18c3      	adds	r3, r0, r3
 80009e4:	3304      	adds	r3, #4
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b003      	add	sp, #12
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	210f      	movs	r1, #15
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	1c02      	adds	r2, r0, #0
 8000a08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ff81 	bl	800091c <__NVIC_SetPriority>
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	0002      	movs	r2, r0
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ff57 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a5a:	e155      	b.n	8000d08 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	4091      	lsls	r1, r2
 8000a66:	000a      	movs	r2, r1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d100      	bne.n	8000a74 <HAL_GPIO_Init+0x30>
 8000a72:	e146      	b.n	8000d02 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2203      	movs	r2, #3
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2203      	movs	r2, #3
 8000a86:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	43da      	mvns	r2, r3
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	409a      	lsls	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	0013      	movs	r3, r2
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	2201      	movs	r2, #1
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2203      	movs	r2, #3
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d017      	beq.n	8000b2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2203      	movs	r2, #3
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	58d3      	ldr	r3, [r2, r3]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2207      	movs	r2, #7
 8000b48:	4013      	ands	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	43da      	mvns	r2, r3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2107      	movs	r1, #7
 8000b62:	400b      	ands	r3, r1
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	6939      	ldr	r1, [r7, #16]
 8000b7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	23c0      	movs	r3, #192	; 0xc0
 8000bb8:	029b      	lsls	r3, r3, #10
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0x17c>
 8000bbe:	e0a0      	b.n	8000d02 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <HAL_GPIO_Init+0x2dc>)
 8000bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc4:	4b56      	ldr	r3, [pc, #344]	; (8000d20 <HAL_GPIO_Init+0x2dc>)
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bcc:	4a55      	ldr	r2, [pc, #340]	; (8000d24 <HAL_GPIO_Init+0x2e0>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4013      	ands	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d01f      	beq.n	8000c3a <HAL_GPIO_Init+0x1f6>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a4a      	ldr	r2, [pc, #296]	; (8000d28 <HAL_GPIO_Init+0x2e4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d019      	beq.n	8000c36 <HAL_GPIO_Init+0x1f2>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_GPIO_Init+0x2ec>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d00d      	beq.n	8000c2e <HAL_GPIO_Init+0x1ea>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d007      	beq.n	8000c2a <HAL_GPIO_Init+0x1e6>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <HAL_GPIO_Init+0x2f4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_GPIO_Init+0x1e2>
 8000c22:	2305      	movs	r3, #5
 8000c24:	e00a      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c26:	2306      	movs	r3, #6
 8000c28:	e008      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e004      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e002      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	2103      	movs	r1, #3
 8000c40:	400a      	ands	r2, r1
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	4093      	lsls	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c4c:	4935      	ldr	r1, [pc, #212]	; (8000d24 <HAL_GPIO_Init+0x2e0>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	43da      	mvns	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	025b      	lsls	r3, r3, #9
 8000c72:	4013      	ands	r3, r2
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	035b      	lsls	r3, r3, #13
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43da      	mvns	r2, r3
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	039b      	lsls	r3, r3, #14
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	40da      	lsrs	r2, r3
 8000d10:	1e13      	subs	r3, r2, #0
 8000d12:	d000      	beq.n	8000d16 <HAL_GPIO_Init+0x2d2>
 8000d14:	e6a2      	b.n	8000a5c <HAL_GPIO_Init+0x18>
  }
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b006      	add	sp, #24
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	50000400 	.word	0x50000400
 8000d2c:	50000800 	.word	0x50000800
 8000d30:	50000c00 	.word	0x50000c00
 8000d34:	50001000 	.word	0x50001000
 8000d38:	50001c00 	.word	0x50001c00
 8000d3c:	40010400 	.word	0x40010400

08000d40 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	0008      	movs	r0, r1
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	1cbb      	adds	r3, r7, #2
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	1c7b      	adds	r3, r7, #1
 8000d54:	1c0a      	adds	r2, r1, #0
 8000d56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d58:	1c7b      	adds	r3, r7, #1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d004      	beq.n	8000d6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d60:	1cbb      	adds	r3, r7, #2
 8000d62:	881a      	ldrh	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d68:	e003      	b.n	8000d72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000d6a:	1cbb      	adds	r3, r7, #2
 8000d6c:	881a      	ldrh	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	000a      	movs	r2, r1
 8000d84:	1cbb      	adds	r3, r7, #2
 8000d86:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d8e:	1cbb      	adds	r3, r7, #2
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4013      	ands	r3, r2
 8000d96:	041a      	lsls	r2, r3, #16
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	1cb9      	adds	r1, r7, #2
 8000d9e:	8809      	ldrh	r1, [r1, #0]
 8000da0:	400b      	ands	r3, r1
 8000da2:	431a      	orrs	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	619a      	str	r2, [r3, #24]
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b004      	add	sp, #16
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f000 fbbf 	bl	8001542 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dc4:	4bc9      	ldr	r3, [pc, #804]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	220c      	movs	r2, #12
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dce:	4bc7      	ldr	r3, [pc, #796]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	025b      	lsls	r3, r3, #9
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x36>
 8000de4:	e07e      	b.n	8000ee4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d007      	beq.n	8000dfc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	2b0c      	cmp	r3, #12
 8000df0:	d112      	bne.n	8000e18 <HAL_RCC_OscConfig+0x68>
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d10d      	bne.n	8000e18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	4bbb      	ldr	r3, [pc, #748]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	029b      	lsls	r3, r3, #10
 8000e04:	4013      	ands	r3, r2
 8000e06:	d100      	bne.n	8000e0a <HAL_RCC_OscConfig+0x5a>
 8000e08:	e06b      	b.n	8000ee2 <HAL_RCC_OscConfig+0x132>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d167      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f000 fb95 	bl	8001542 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	025b      	lsls	r3, r3, #9
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d107      	bne.n	8000e34 <HAL_RCC_OscConfig+0x84>
 8000e24:	4bb1      	ldr	r3, [pc, #708]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4bb0      	ldr	r3, [pc, #704]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e027      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	23a0      	movs	r3, #160	; 0xa0
 8000e3a:	02db      	lsls	r3, r3, #11
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10e      	bne.n	8000e5e <HAL_RCC_OscConfig+0xae>
 8000e40:	4baa      	ldr	r3, [pc, #680]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4ba9      	ldr	r3, [pc, #676]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	02c9      	lsls	r1, r1, #11
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	4ba7      	ldr	r3, [pc, #668]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4ba6      	ldr	r3, [pc, #664]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	0249      	lsls	r1, r1, #9
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	e012      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e5e:	4ba3      	ldr	r3, [pc, #652]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4ba2      	ldr	r3, [pc, #648]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e64:	49a2      	ldr	r1, [pc, #648]	; (80010f0 <HAL_RCC_OscConfig+0x340>)
 8000e66:	400a      	ands	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	4ba0      	ldr	r3, [pc, #640]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	025b      	lsls	r3, r3, #9
 8000e72:	4013      	ands	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4b9c      	ldr	r3, [pc, #624]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b9b      	ldr	r3, [pc, #620]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000e7e:	499d      	ldr	r1, [pc, #628]	; (80010f4 <HAL_RCC_OscConfig+0x344>)
 8000e80:	400a      	ands	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d015      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fcfe 	bl	800088c <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e94:	e009      	b.n	8000eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e96:	f7ff fcf9 	bl	800088c <HAL_GetTick>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	; 0x64
 8000ea2:	d902      	bls.n	8000eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f000 fb4c 	bl	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eaa:	4b90      	ldr	r3, [pc, #576]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d0ef      	beq.n	8000e96 <HAL_RCC_OscConfig+0xe6>
 8000eb6:	e015      	b.n	8000ee4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fce8 	bl	800088c <HAL_GetTick>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fce3 	bl	800088c <HAL_GetTick>
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b64      	cmp	r3, #100	; 0x64
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e336      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ed4:	4b85      	ldr	r3, [pc, #532]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	d1f0      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x112>
 8000ee0:	e000      	b.n	8000ee4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4013      	ands	r3, r2
 8000eec:	d100      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x140>
 8000eee:	e099      	b.n	8001024 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	2220      	movs	r2, #32
 8000efa:	4013      	ands	r3, r2
 8000efc:	d009      	beq.n	8000f12 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000efe:	4b7b      	ldr	r3, [pc, #492]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b7a      	ldr	r3, [pc, #488]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f04:	2120      	movs	r1, #32
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	4393      	bics	r3, r2
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d005      	beq.n	8000f24 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0c      	cmp	r3, #12
 8000f1c:	d13e      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1ec>
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d13b      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f24:	4b71      	ldr	r3, [pc, #452]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2204      	movs	r2, #4
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d004      	beq.n	8000f38 <HAL_RCC_OscConfig+0x188>
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e304      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f38:	4b6c      	ldr	r3, [pc, #432]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <HAL_RCC_OscConfig+0x348>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	0019      	movs	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	021a      	lsls	r2, r3, #8
 8000f48:	4b68      	ldr	r3, [pc, #416]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f4e:	4b67      	ldr	r3, [pc, #412]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2209      	movs	r2, #9
 8000f54:	4393      	bics	r3, r2
 8000f56:	0019      	movs	r1, r3
 8000f58:	4b64      	ldr	r3, [pc, #400]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f60:	f000 fc42 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 8000f64:	0001      	movs	r1, r0
 8000f66:	4b61      	ldr	r3, [pc, #388]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	4013      	ands	r3, r2
 8000f70:	4a62      	ldr	r2, [pc, #392]	; (80010fc <HAL_RCC_OscConfig+0x34c>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	000a      	movs	r2, r1
 8000f76:	40da      	lsrs	r2, r3
 8000f78:	4b61      	ldr	r3, [pc, #388]	; (8001100 <HAL_RCC_OscConfig+0x350>)
 8000f7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f7c:	4b61      	ldr	r3, [pc, #388]	; (8001104 <HAL_RCC_OscConfig+0x354>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2513      	movs	r5, #19
 8000f82:	197c      	adds	r4, r7, r5
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff fbb7 	bl	80006f8 <HAL_InitTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000f8e:	197b      	adds	r3, r7, r5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d046      	beq.n	8001024 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8000f96:	197b      	adds	r3, r7, r5
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	e2d2      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d027      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fa2:	4b52      	ldr	r3, [pc, #328]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2209      	movs	r2, #9
 8000fa8:	4393      	bics	r3, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fc6a 	bl	800088c <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fc65 	bl	800088c <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e2b8      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d0f1      	beq.n	8000fbe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x348>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	021a      	lsls	r2, r3, #8
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000fec:	430a      	orrs	r2, r1
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	e018      	b.n	8001024 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fc45 	bl	800088c <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fc40 	bl	800088c <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e293      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2204      	movs	r2, #4
 8001020:	4013      	ands	r3, r2
 8001022:	d1f1      	bne.n	8001008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2210      	movs	r2, #16
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_RCC_OscConfig+0x280>
 800102e:	e0a2      	b.n	8001176 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d140      	bne.n	80010b8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4013      	ands	r3, r2
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x29e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e279      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <HAL_RCC_OscConfig+0x358>)
 8001054:	4013      	ands	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 800105e:	430a      	orrs	r2, r1
 8001060:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	0a19      	lsrs	r1, r3, #8
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	061a      	lsls	r2, r3, #24
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001072:	430a      	orrs	r2, r1
 8001074:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	0b5b      	lsrs	r3, r3, #13
 800107c:	3301      	adds	r3, #1
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	0212      	lsls	r2, r2, #8
 8001082:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	210f      	movs	r1, #15
 800108c:	400b      	ands	r3, r1
 800108e:	491b      	ldr	r1, [pc, #108]	; (80010fc <HAL_RCC_OscConfig+0x34c>)
 8001090:	5ccb      	ldrb	r3, [r1, r3]
 8001092:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_RCC_OscConfig+0x350>)
 8001096:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_RCC_OscConfig+0x354>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2513      	movs	r5, #19
 800109e:	197c      	adds	r4, r7, r5
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fb29 	bl	80006f8 <HAL_InitTick>
 80010a6:	0003      	movs	r3, r0
 80010a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010aa:	197b      	adds	r3, r7, r5
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d061      	beq.n	8001176 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80010b2:	197b      	adds	r3, r7, r5
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	e244      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d040      	beq.n	8001142 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	0049      	lsls	r1, r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fbdd 	bl	800088c <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010d6:	e019      	b.n	800110c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010d8:	f7ff fbd8 	bl	800088c <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d912      	bls.n	800110c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e22b      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	40021000 	.word	0x40021000
 80010f0:	fffeffff 	.word	0xfffeffff
 80010f4:	fffbffff 	.word	0xfffbffff
 80010f8:	ffffe0ff 	.word	0xffffe0ff
 80010fc:	080049a8 	.word	0x080049a8
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004
 8001108:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800110c:	4bca      	ldr	r3, [pc, #808]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d0df      	beq.n	80010d8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001118:	4bc7      	ldr	r3, [pc, #796]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4ac7      	ldr	r2, [pc, #796]	; (800143c <HAL_RCC_OscConfig+0x68c>)
 800111e:	4013      	ands	r3, r2
 8001120:	0019      	movs	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001126:	4bc4      	ldr	r3, [pc, #784]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001128:	430a      	orrs	r2, r1
 800112a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112c:	4bc2      	ldr	r3, [pc, #776]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	0a19      	lsrs	r1, r3, #8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	061a      	lsls	r2, r3, #24
 800113a:	4bbf      	ldr	r3, [pc, #764]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	e019      	b.n	8001176 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001142:	4bbd      	ldr	r3, [pc, #756]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4bbc      	ldr	r3, [pc, #752]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001148:	49bd      	ldr	r1, [pc, #756]	; (8001440 <HAL_RCC_OscConfig+0x690>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb9d 	bl	800088c <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001158:	f7ff fb98 	bl	800088c <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1eb      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800116a:	4bb3      	ldr	r3, [pc, #716]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2208      	movs	r2, #8
 800117c:	4013      	ands	r3, r2
 800117e:	d036      	beq.n	80011ee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d019      	beq.n	80011bc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001188:	4bab      	ldr	r3, [pc, #684]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800118a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800118c:	4baa      	ldr	r3, [pc, #680]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800118e:	2101      	movs	r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fb7a 	bl	800088c <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fb75 	bl	800088c <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1c8      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011b0:	4ba1      	ldr	r3, [pc, #644]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80011b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b4:	2202      	movs	r2, #2
 80011b6:	4013      	ands	r3, r2
 80011b8:	d0f1      	beq.n	800119e <HAL_RCC_OscConfig+0x3ee>
 80011ba:	e018      	b.n	80011ee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011bc:	4b9e      	ldr	r3, [pc, #632]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80011be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011c0:	4b9d      	ldr	r3, [pc, #628]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fb60 	bl	800088c <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fb5b 	bl	800088c <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1ae      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011e4:	4b94      	ldr	r3, [pc, #592]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80011e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f1      	bne.n	80011d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2204      	movs	r2, #4
 80011f4:	4013      	ands	r3, r2
 80011f6:	d100      	bne.n	80011fa <HAL_RCC_OscConfig+0x44a>
 80011f8:	e0ae      	b.n	8001358 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	2023      	movs	r0, #35	; 0x23
 80011fc:	183b      	adds	r3, r7, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b8d      	ldr	r3, [pc, #564]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	055b      	lsls	r3, r3, #21
 800120a:	4013      	ands	r3, r2
 800120c:	d109      	bne.n	8001222 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b8a      	ldr	r3, [pc, #552]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0549      	lsls	r1, r1, #21
 8001218:	430a      	orrs	r2, r1
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800121c:	183b      	adds	r3, r7, r0
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x694>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4013      	ands	r3, r2
 800122c:	d11a      	bne.n	8001264 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4b85      	ldr	r3, [pc, #532]	; (8001444 <HAL_RCC_OscConfig+0x694>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b84      	ldr	r3, [pc, #528]	; (8001444 <HAL_RCC_OscConfig+0x694>)
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	0049      	lsls	r1, r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123c:	f7ff fb26 	bl	800088c <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001246:	f7ff fb21 	bl	800088c <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b64      	cmp	r3, #100	; 0x64
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e174      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <HAL_RCC_OscConfig+0x694>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4013      	ands	r3, r2
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	429a      	cmp	r2, r3
 800126e:	d107      	bne.n	8001280 <HAL_RCC_OscConfig+0x4d0>
 8001270:	4b71      	ldr	r3, [pc, #452]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001274:	4b70      	ldr	r3, [pc, #448]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0049      	lsls	r1, r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	651a      	str	r2, [r3, #80]	; 0x50
 800127e:	e031      	b.n	80012e4 <HAL_RCC_OscConfig+0x534>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x4f2>
 8001288:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800128a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800128c:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800128e:	496c      	ldr	r1, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x690>)
 8001290:	400a      	ands	r2, r1
 8001292:	651a      	str	r2, [r3, #80]	; 0x50
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001298:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800129a:	496b      	ldr	r1, [pc, #428]	; (8001448 <HAL_RCC_OscConfig+0x698>)
 800129c:	400a      	ands	r2, r1
 800129e:	651a      	str	r2, [r3, #80]	; 0x50
 80012a0:	e020      	b.n	80012e4 <HAL_RCC_OscConfig+0x534>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d10e      	bne.n	80012cc <HAL_RCC_OscConfig+0x51c>
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012b2:	4b61      	ldr	r3, [pc, #388]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	00c9      	lsls	r1, r1, #3
 80012b8:	430a      	orrs	r2, r1
 80012ba:	651a      	str	r2, [r3, #80]	; 0x50
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012c0:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0049      	lsls	r1, r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	651a      	str	r2, [r3, #80]	; 0x50
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0x534>
 80012cc:	4b5a      	ldr	r3, [pc, #360]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d0:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012d2:	495b      	ldr	r1, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x690>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	651a      	str	r2, [r3, #80]	; 0x50
 80012d8:	4b57      	ldr	r3, [pc, #348]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012dc:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80012de:	495a      	ldr	r1, [pc, #360]	; (8001448 <HAL_RCC_OscConfig+0x698>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d015      	beq.n	8001318 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff face 	bl	800088c <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012f4:	e009      	b.n	800130a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fac9 	bl	800088c <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_RCC_OscConfig+0x69c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e11b      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800130a:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800130c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4013      	ands	r3, r2
 8001314:	d0ef      	beq.n	80012f6 <HAL_RCC_OscConfig+0x546>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fab8 	bl	800088c <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001320:	e009      	b.n	8001336 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fab3 	bl	800088c <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	4a47      	ldr	r2, [pc, #284]	; (800144c <HAL_RCC_OscConfig+0x69c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e105      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001336:	4b40      	ldr	r3, [pc, #256]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d1ef      	bne.n	8001322 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001342:	2323      	movs	r3, #35	; 0x23
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134c:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800134e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001352:	493f      	ldr	r1, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x6a0>)
 8001354:	400a      	ands	r2, r1
 8001356:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2220      	movs	r2, #32
 800135e:	4013      	ands	r3, r2
 8001360:	d049      	beq.n	80013f6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d026      	beq.n	80013b8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001370:	2101      	movs	r1, #1
 8001372:	430a      	orrs	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 800137c:	2101      	movs	r1, #1
 800137e:	430a      	orrs	r2, r1
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_RCC_OscConfig+0x6a4>)
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_RCC_OscConfig+0x6a4>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0189      	lsls	r1, r1, #6
 800138c:	430a      	orrs	r2, r1
 800138e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fa7c 	bl	800088c <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800139a:	f7ff fa77 	bl	800088c <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0ca      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f1      	beq.n	800139a <HAL_RCC_OscConfig+0x5ea>
 80013b6:	e01e      	b.n	80013f6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_RCC_OscConfig+0x6a4>)
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_RCC_OscConfig+0x6a4>)
 80013ca:	4923      	ldr	r1, [pc, #140]	; (8001458 <HAL_RCC_OscConfig+0x6a8>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fa5c 	bl	800088c <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013da:	f7ff fa57 	bl	800088c <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0aa      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2202      	movs	r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f1      	bne.n	80013da <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d100      	bne.n	8001400 <HAL_RCC_OscConfig+0x650>
 80013fe:	e09f      	b.n	8001540 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d100      	bne.n	8001408 <HAL_RCC_OscConfig+0x658>
 8001406:	e078      	b.n	80014fa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2b02      	cmp	r3, #2
 800140e:	d159      	bne.n	80014c4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_RCC_OscConfig+0x688>)
 8001416:	4911      	ldr	r1, [pc, #68]	; (800145c <HAL_RCC_OscConfig+0x6ac>)
 8001418:	400a      	ands	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fa36 	bl	800088c <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001424:	e01c      	b.n	8001460 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff fa31 	bl	800088c <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d915      	bls.n	8001460 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e084      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
 8001438:	40021000 	.word	0x40021000
 800143c:	ffff1fff 	.word	0xffff1fff
 8001440:	fffffeff 	.word	0xfffffeff
 8001444:	40007000 	.word	0x40007000
 8001448:	fffffbff 	.word	0xfffffbff
 800144c:	00001388 	.word	0x00001388
 8001450:	efffffff 	.word	0xefffffff
 8001454:	40010000 	.word	0x40010000
 8001458:	ffffdfff 	.word	0xffffdfff
 800145c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001460:	4b3a      	ldr	r3, [pc, #232]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	049b      	lsls	r3, r3, #18
 8001468:	4013      	ands	r3, r2
 800146a:	d1dc      	bne.n	8001426 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4a37      	ldr	r2, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x7a0>)
 8001472:	4013      	ands	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001484:	431a      	orrs	r2, r3
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0449      	lsls	r1, r1, #17
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff f9f7 	bl	800088c <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff f9f2 	bl	800088c <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e045      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	049b      	lsls	r3, r3, #18
 80014be:	4013      	ands	r3, r2
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x6f4>
 80014c2:	e03d      	b.n	8001540 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 80014ca:	4922      	ldr	r1, [pc, #136]	; (8001554 <HAL_RCC_OscConfig+0x7a4>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff f9dc 	bl	800088c <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff f9d7 	bl	800088c <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e02a      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	049b      	lsls	r3, r3, #18
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x72a>
 80014f8:	e022      	b.n	8001540 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e01d      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_RCC_OscConfig+0x79c>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	429a      	cmp	r2, r3
 800151a:	d10f      	bne.n	800153c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	23f0      	movs	r3, #240	; 0xf0
 8001520:	039b      	lsls	r3, r3, #14
 8001522:	401a      	ands	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	401a      	ands	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b00a      	add	sp, #40	; 0x28
 8001548:	bdb0      	pop	{r4, r5, r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40021000 	.word	0x40021000
 8001550:	ff02ffff 	.word	0xff02ffff
 8001554:	feffffff 	.word	0xfeffffff

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e128      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d91e      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b93      	ldr	r3, [pc, #588]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	4393      	bics	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800158c:	f7ff f97e 	bl	800088c <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001594:	e009      	b.n	80015aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001596:	f7ff f979 	bl	800088c <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	4a8a      	ldr	r2, [pc, #552]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e109      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b87      	ldr	r3, [pc, #540]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4013      	ands	r3, r2
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c2:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	22f0      	movs	r2, #240	; 0xf0
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	4013      	ands	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
 80015e0:	e089      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ea:	4b79      	ldr	r3, [pc, #484]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	029b      	lsls	r3, r3, #10
 80015f2:	4013      	ands	r3, r2
 80015f4:	d120      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e1      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001602:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	049b      	lsls	r3, r3, #18
 800160a:	4013      	ands	r3, r2
 800160c:	d114      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0d5      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d106      	bne.n	8001628 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800161a:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d109      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0ca      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001628:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0c2      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001638:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2203      	movs	r2, #3
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff f91e 	bl	800088c <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d111      	bne.n	8001680 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800165c:	e009      	b.n	8001672 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165e:	f7ff f915 	bl	800088c <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0a5      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	220c      	movs	r2, #12
 8001678:	4013      	ands	r3, r2
 800167a:	2b08      	cmp	r3, #8
 800167c:	d1ef      	bne.n	800165e <HAL_RCC_ClockConfig+0x106>
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d111      	bne.n	80016ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	e009      	b.n	800169e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168a:	f7ff f8ff 	bl	800088c <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e08f      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169e:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	220c      	movs	r2, #12
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d1ef      	bne.n	800168a <HAL_RCC_ClockConfig+0x132>
 80016aa:	e024      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11b      	bne.n	80016ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b4:	e009      	b.n	80016ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b6:	f7ff f8e9 	bl	800088c <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	4a42      	ldr	r2, [pc, #264]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e079      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	220c      	movs	r2, #12
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d1ef      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x15e>
 80016d6:	e00e      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f8d8 	bl	800088c <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e068      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	220c      	movs	r2, #12
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d21e      	bcs.n	8001742 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4393      	bics	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001716:	f7ff f8b9 	bl	800088c <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	e009      	b.n	8001734 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f8b4 	bl	800088c <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a28      	ldr	r2, [pc, #160]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e044      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d009      	beq.n	8001760 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <HAL_RCC_ClockConfig+0x27c>)
 8001752:	4013      	ands	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2208      	movs	r2, #8
 8001766:	4013      	ands	r3, r2
 8001768:	d00a      	beq.n	8001780 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	4a1a      	ldr	r2, [pc, #104]	; (80017d8 <HAL_RCC_ClockConfig+0x280>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	00da      	lsls	r2, r3, #3
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800177c:	430a      	orrs	r2, r1
 800177e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001780:	f000 f832 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 8001784:	0001      	movs	r1, r0
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	220f      	movs	r2, #15
 800178e:	4013      	ands	r3, r2
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	000a      	movs	r2, r1
 8001796:	40da      	lsrs	r2, r3
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800179a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_ClockConfig+0x28c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	250b      	movs	r5, #11
 80017a2:	197c      	adds	r4, r7, r5
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7fe ffa7 	bl	80006f8 <HAL_InitTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017b6:	197b      	adds	r3, r7, r5
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	e000      	b.n	80017be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b004      	add	sp, #16
 80017c4:	bdb0      	pop	{r4, r5, r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40022000 	.word	0x40022000
 80017cc:	00001388 	.word	0x00001388
 80017d0:	40021000 	.word	0x40021000
 80017d4:	fffff8ff 	.word	0xfffff8ff
 80017d8:	ffffc7ff 	.word	0xffffc7ff
 80017dc:	080049a8 	.word	0x080049a8
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80017ee:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_RCC_GetSysClockFreq+0x138>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	230c      	movs	r3, #12
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d014      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x40>
 80017fe:	d900      	bls.n	8001802 <HAL_RCC_GetSysClockFreq+0x1a>
 8001800:	e07b      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x112>
 8001802:	2b04      	cmp	r3, #4
 8001804:	d002      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x24>
 8001806:	2b08      	cmp	r3, #8
 8001808:	d00b      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x3a>
 800180a:	e076      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_RCC_GetSysClockFreq+0x138>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2210      	movs	r2, #16
 8001812:	4013      	ands	r3, r2
 8001814:	d002      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800181a:	e07c      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800181c:	4b42      	ldr	r3, [pc, #264]	; (8001928 <HAL_RCC_GetSysClockFreq+0x140>)
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001820:	e079      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001822:	4b42      	ldr	r3, [pc, #264]	; (800192c <HAL_RCC_GetSysClockFreq+0x144>)
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001826:	e076      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	0c9a      	lsrs	r2, r3, #18
 800182c:	230f      	movs	r3, #15
 800182e:	401a      	ands	r2, r3
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_GetSysClockFreq+0x148>)
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	0d9a      	lsrs	r2, r3, #22
 800183a:	2303      	movs	r3, #3
 800183c:	4013      	ands	r3, r2
 800183e:	3301      	adds	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_GetSysClockFreq+0x138>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	025b      	lsls	r3, r3, #9
 800184a:	4013      	ands	r3, r2
 800184c:	d01a      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4a35      	ldr	r2, [pc, #212]	; (800192c <HAL_RCC_GetSysClockFreq+0x144>)
 8001858:	2300      	movs	r3, #0
 800185a:	69b8      	ldr	r0, [r7, #24]
 800185c:	69f9      	ldr	r1, [r7, #28]
 800185e:	f7fe fd07 	bl	8000270 <__aeabi_lmul>
 8001862:	0002      	movs	r2, r0
 8001864:	000b      	movs	r3, r1
 8001866:	0010      	movs	r0, r2
 8001868:	0019      	movs	r1, r3
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f7fe fcdb 	bl	8000230 <__aeabi_uldivmod>
 800187a:	0002      	movs	r2, r0
 800187c:	000b      	movs	r3, r1
 800187e:	0013      	movs	r3, r2
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
 8001882:	e037      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_GetSysClockFreq+0x138>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2210      	movs	r2, #16
 800188a:	4013      	ands	r3, r2
 800188c:	d01a      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4a23      	ldr	r2, [pc, #140]	; (8001924 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001898:	2300      	movs	r3, #0
 800189a:	68b8      	ldr	r0, [r7, #8]
 800189c:	68f9      	ldr	r1, [r7, #12]
 800189e:	f7fe fce7 	bl	8000270 <__aeabi_lmul>
 80018a2:	0002      	movs	r2, r0
 80018a4:	000b      	movs	r3, r1
 80018a6:	0010      	movs	r0, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f7fe fcbb 	bl	8000230 <__aeabi_uldivmod>
 80018ba:	0002      	movs	r2, r0
 80018bc:	000b      	movs	r3, r1
 80018be:	0013      	movs	r3, r2
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
 80018c2:	e017      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c6:	0018      	movs	r0, r3
 80018c8:	2300      	movs	r3, #0
 80018ca:	0019      	movs	r1, r3
 80018cc:	4a16      	ldr	r2, [pc, #88]	; (8001928 <HAL_RCC_GetSysClockFreq+0x140>)
 80018ce:	2300      	movs	r3, #0
 80018d0:	f7fe fcce 	bl	8000270 <__aeabi_lmul>
 80018d4:	0002      	movs	r2, r0
 80018d6:	000b      	movs	r3, r1
 80018d8:	0010      	movs	r0, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	001c      	movs	r4, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	001d      	movs	r5, r3
 80018e4:	0022      	movs	r2, r4
 80018e6:	002b      	movs	r3, r5
 80018e8:	f7fe fca2 	bl	8000230 <__aeabi_uldivmod>
 80018ec:	0002      	movs	r2, r0
 80018ee:	000b      	movs	r3, r1
 80018f0:	0013      	movs	r3, r2
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018f8:	e00d      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_GetSysClockFreq+0x138>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	0b5b      	lsrs	r3, r3, #13
 8001900:	2207      	movs	r2, #7
 8001902:	4013      	ands	r3, r2
 8001904:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	3301      	adds	r3, #1
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	0212      	lsls	r2, r2, #8
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001914:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b00e      	add	sp, #56	; 0x38
 800191e:	bdb0      	pop	{r4, r5, r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	003d0900 	.word	0x003d0900
 8001928:	00f42400 	.word	0x00f42400
 800192c:	007a1200 	.word	0x007a1200
 8001930:	080049c0 	.word	0x080049c0

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_RCC_GetHCLKFreq+0x10>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800194c:	f7ff fff2 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001950:	0001      	movs	r1, r0
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	2207      	movs	r2, #7
 800195a:	4013      	ands	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	40d9      	lsrs	r1, r3
 8001962:	000b      	movs	r3, r1
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40021000 	.word	0x40021000
 8001970:	080049b8 	.word	0x080049b8

08001974 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	220f      	movs	r2, #15
 8001982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2203      	movs	r2, #3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	22f0      	movs	r2, #240	; 0xf0
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	23e0      	movs	r3, #224	; 0xe0
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	23e0      	movs	r3, #224	; 0xe0
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_RCC_GetClockConfig+0x60>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2201      	movs	r2, #1
 80019c0:	401a      	ands	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e032      	b.n	8001a50 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2239      	movs	r2, #57	; 0x39
 80019ee:	5c9b      	ldrb	r3, [r3, r2]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d107      	bne.n	8001a06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2238      	movs	r2, #56	; 0x38
 80019fa:	2100      	movs	r1, #0
 80019fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 f829 	bl	8001a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2239      	movs	r2, #57	; 0x39
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	0019      	movs	r1, r3
 8001a18:	0010      	movs	r0, r2
 8001a1a:	f000 f97f 	bl	8001d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	223e      	movs	r2, #62	; 0x3e
 8001a22:	2101      	movs	r1, #1
 8001a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	223a      	movs	r2, #58	; 0x3a
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	5499      	strb	r1, [r3, r2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	223b      	movs	r2, #59	; 0x3b
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	223c      	movs	r2, #60	; 0x3c
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	223d      	movs	r2, #61	; 0x3d
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2239      	movs	r2, #57	; 0x39
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2239      	movs	r2, #57	; 0x39
 8001a74:	5c9b      	ldrb	r3, [r3, r2]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d001      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e03b      	b.n	8001af8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2239      	movs	r2, #57	; 0x39
 8001a84:	2102      	movs	r1, #2
 8001a86:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2101      	movs	r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x5a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <HAL_TIM_Base_Start_IT+0x98>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x5a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d004      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x5a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_TIM_Base_Start_IT+0xa0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d111      	bne.n	8001ae6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2207      	movs	r2, #7
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b06      	cmp	r3, #6
 8001ad2:	d010      	beq.n	8001af6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2101      	movs	r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	e007      	b.n	8001af6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40000400 	.word	0x40000400
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40011400 	.word	0x40011400

08001b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d124      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d11d      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2203      	movs	r2, #3
 8001b36:	4252      	negs	r2, r2
 8001b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2203      	movs	r2, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 f8cc 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 8001b54:	e007      	b.n	8001b66 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f8bf 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 f8cb 	bl	8001cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2204      	movs	r2, #4
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d125      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2204      	movs	r2, #4
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d11e      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	4252      	negs	r2, r2
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d004      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 f89f 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 8001bae:	e007      	b.n	8001bc0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 f892 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f89e 	bl	8001cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2208      	movs	r2, #8
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d124      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2208      	movs	r2, #8
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11d      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2209      	movs	r2, #9
 8001be8:	4252      	negs	r2, r2
 8001bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 f873 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 8001c06:	e007      	b.n	8001c18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 f866 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 f872 	bl	8001cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2210      	movs	r2, #16
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d125      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2210      	movs	r2, #16
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d11e      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2211      	movs	r2, #17
 8001c40:	4252      	negs	r2, r2
 8001c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2208      	movs	r2, #8
 8001c48:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	23c0      	movs	r3, #192	; 0xc0
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 f846 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 8001c60:	e007      	b.n	8001c72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 f839 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 f845 	bl	8001cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10f      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d108      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	4252      	negs	r2, r2
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe fcfd 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b40      	cmp	r3, #64	; 0x40
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b40      	cmp	r3, #64	; 0x40
 8001cc0:	d108      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2241      	movs	r2, #65	; 0x41
 8001cc8:	4252      	negs	r2, r2
 8001cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 f81c 	bl	8001d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	05db      	lsls	r3, r3, #23
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d00b      	beq.n	8001d4e <TIM_Base_SetConfig+0x32>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <TIM_Base_SetConfig+0xac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <TIM_Base_SetConfig+0x32>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <TIM_Base_SetConfig+0xb0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d003      	beq.n	8001d4e <TIM_Base_SetConfig+0x32>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <TIM_Base_SetConfig+0xb4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d108      	bne.n	8001d60 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2270      	movs	r2, #112	; 0x70
 8001d52:	4393      	bics	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	05db      	lsls	r3, r3, #23
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d00b      	beq.n	8001d82 <TIM_Base_SetConfig+0x66>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <TIM_Base_SetConfig+0xac>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <TIM_Base_SetConfig+0x66>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <TIM_Base_SetConfig+0xb0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d003      	beq.n	8001d82 <TIM_Base_SetConfig+0x66>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <TIM_Base_SetConfig+0xb4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d108      	bne.n	8001d94 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <TIM_Base_SetConfig+0xb8>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	4393      	bics	r3, r2
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	615a      	str	r2, [r3, #20]
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	40011400 	.word	0x40011400
 8001dd4:	fffffcff 	.word	0xfffffcff

08001dd8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3308      	adds	r3, #8
 8001de4:	001a      	movs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4252      	negs	r2, r2
 8001df0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3308      	adds	r3, #8
 8001df6:	001a      	movs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	001a      	movs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	d103      	bne.n	8001e48 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e00c      	b.n	8001e62 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e002      	b.n	8001e56 <vListInsert+0x2c>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d2f6      	bcs.n	8001e50 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6892      	ldr	r2, [r2, #8]
 8001eac:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6852      	ldr	r2, [r2, #4]
 8001eb6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d103      	bne.n	8001eca <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001ee6:	b5b0      	push	{r4, r5, r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <xQueueGenericReset+0x1c>
 8001efe:	b672      	cpsid	i
 8001f00:	e7fe      	b.n	8001f00 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d100      	bne.n	8001f0a <xQueueGenericReset+0x24>
 8001f08:	e06a      	b.n	8001fe0 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d066      	beq.n	8001fe0 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	0c15      	lsrs	r5, r2, #16
 8001f1e:	0c19      	lsrs	r1, r3, #16
 8001f20:	b2a8      	uxth	r0, r5
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d104      	bne.n	8001f30 <xQueueGenericReset+0x4a>
 8001f26:	b288      	uxth	r0, r1
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d013      	beq.n	8001f54 <xQueueGenericReset+0x6e>
 8001f2c:	1c10      	adds	r0, r2, #0
 8001f2e:	e004      	b.n	8001f3a <xQueueGenericReset+0x54>
 8001f30:	b289      	uxth	r1, r1
 8001f32:	2900      	cmp	r1, #0
 8001f34:	d10d      	bne.n	8001f52 <xQueueGenericReset+0x6c>
 8001f36:	1c29      	adds	r1, r5, #0
 8001f38:	1c18      	adds	r0, r3, #0
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	435a      	muls	r2, r3
 8001f40:	b283      	uxth	r3, r0
 8001f42:	b289      	uxth	r1, r1
 8001f44:	434b      	muls	r3, r1
 8001f46:	0c12      	lsrs	r2, r2, #16
 8001f48:	189b      	adds	r3, r3, r2
 8001f4a:	141b      	asrs	r3, r3, #16
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d000      	beq.n	8001f54 <xQueueGenericReset+0x6e>
 8001f52:	2401      	movs	r4, #1
 8001f54:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8001f56:	d143      	bne.n	8001fe0 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8001f58:	f001 fc82 	bl	8003860 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	434b      	muls	r3, r1
 8001f6a:	18d2      	adds	r2, r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2200      	movs	r2, #0
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	1e59      	subs	r1, r3, #1
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	434b      	muls	r3, r1
 8001f8e:	18d2      	adds	r2, r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2244      	movs	r2, #68	; 0x44
 8001f98:	21ff      	movs	r1, #255	; 0xff
 8001f9a:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2245      	movs	r2, #69	; 0x45
 8001fa0:	21ff      	movs	r1, #255	; 0xff
 8001fa2:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d013      	beq.n	8001fda <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 fed2 	bl	8002d60 <xTaskRemoveFromEventList>
 8001fbc:	1e03      	subs	r3, r0, #0
 8001fbe:	d00c      	beq.n	8001fda <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001fc0:	f001 fc3e 	bl	8003840 <vPortYield>
 8001fc4:	e009      	b.n	8001fda <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3310      	adds	r3, #16
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff ff04 	bl	8001dd8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3324      	adds	r3, #36	; 0x24
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff feff 	bl	8001dd8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001fda:	f001 fc53 	bl	8003884 <vPortExitCritical>
 8001fde:	e001      	b.n	8001fe4 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <xQueueGenericReset+0x108>
 8001fea:	b672      	cpsid	i
 8001fec:	e7fe      	b.n	8001fec <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}

08001ff8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d047      	beq.n	80020a0 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002010:	2000      	movs	r0, #0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	0c19      	lsrs	r1, r3, #16
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1c1e      	adds	r6, r3, #0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	1c15      	adds	r5, r2, #0
 8002022:	b28a      	uxth	r2, r1
 8002024:	2a00      	cmp	r2, #0
 8002026:	d105      	bne.n	8002034 <xQueueGenericCreate+0x3c>
 8002028:	b29a      	uxth	r2, r3
 800202a:	2a00      	cmp	r2, #0
 800202c:	d013      	beq.n	8002056 <xQueueGenericCreate+0x5e>
 800202e:	1c19      	adds	r1, r3, #0
 8002030:	1c34      	adds	r4, r6, #0
 8002032:	e003      	b.n	800203c <xQueueGenericCreate+0x44>
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <xQueueGenericCreate+0x5c>
 800203a:	1c2c      	adds	r4, r5, #0
 800203c:	b2b3      	uxth	r3, r6
 800203e:	b2aa      	uxth	r2, r5
 8002040:	435a      	muls	r2, r3
 8002042:	b2a3      	uxth	r3, r4
 8002044:	b289      	uxth	r1, r1
 8002046:	434b      	muls	r3, r1
 8002048:	0c12      	lsrs	r2, r2, #16
 800204a:	189b      	adds	r3, r3, r2
 800204c:	141b      	asrs	r3, r3, #16
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d000      	beq.n	8002056 <xQueueGenericCreate+0x5e>
 8002054:	2001      	movs	r0, #1
 8002056:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002058:	d122      	bne.n	80020a0 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002060:	3351      	adds	r3, #81	; 0x51
 8002062:	d81d      	bhi.n	80020a0 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	4353      	muls	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	3350      	adds	r3, #80	; 0x50
 8002070:	0018      	movs	r0, r3
 8002072:	f001 fc8d 	bl	8003990 <pvPortMalloc>
 8002076:	0003      	movs	r3, r0
 8002078:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d014      	beq.n	80020aa <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3350      	adds	r3, #80	; 0x50
 8002088:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781c      	ldrb	r4, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	0023      	movs	r3, r4
 800209a:	f000 f80b 	bl	80020b4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800209e:	e004      	b.n	80020aa <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <xQueueGenericCreate+0xb2>
 80020a6:	b672      	cpsid	i
 80020a8:	e7fe      	b.n	80020a8 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80020aa:	69fb      	ldr	r3, [r7, #28]
    }
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b009      	add	sp, #36	; 0x24
 80020b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	001a      	movs	r2, r3
 80020c2:	1cfb      	adds	r3, r7, #3
 80020c4:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e002      	b.n	80020da <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2101      	movs	r1, #1
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff fefb 	bl	8001ee6 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1cfa      	adds	r2, r7, #3
 80020f4:	214c      	movs	r1, #76	; 0x4c
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	545a      	strb	r2, [r3, r1]
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b004      	add	sp, #16
 8002100:	bd80      	pop	{r7, pc}

08002102 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b08a      	sub	sp, #40	; 0x28
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <xQueueReceive+0x1e>
 800211c:	b672      	cpsid	i
 800211e:	e7fe      	b.n	800211e <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <xQueueReceive+0x2c>
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <xQueueReceive+0x30>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <xQueueReceive+0x32>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <xQueueReceive+0x3a>
 8002138:	b672      	cpsid	i
 800213a:	e7fe      	b.n	800213a <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800213c:	f000 fffa 	bl	8003134 <xTaskGetSchedulerState>
 8002140:	1e03      	subs	r3, r0, #0
 8002142:	d102      	bne.n	800214a <xQueueReceive+0x48>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <xQueueReceive+0x4c>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <xQueueReceive+0x4e>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <xQueueReceive+0x56>
 8002154:	b672      	cpsid	i
 8002156:	e7fe      	b.n	8002156 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002158:	f001 fb82 	bl	8003860 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01a      	beq.n	800219e <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	0011      	movs	r1, r2
 800216e:	0018      	movs	r0, r3
 8002170:	f000 f87c 	bl	800226c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	1e5a      	subs	r2, r3, #1
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	3310      	adds	r3, #16
 8002188:	0018      	movs	r0, r3
 800218a:	f000 fde9 	bl	8002d60 <xTaskRemoveFromEventList>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d001      	beq.n	8002196 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002192:	f001 fb55 	bl	8003840 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002196:	f001 fb75 	bl	8003884 <vPortExitCritical>
                return pdPASS;
 800219a:	2301      	movs	r3, #1
 800219c:	e062      	b.n	8002264 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d103      	bne.n	80021ac <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80021a4:	f001 fb6e 	bl	8003884 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e05b      	b.n	8002264 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80021b2:	2314      	movs	r3, #20
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 fe9c 	bl	8002ef4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80021bc:	2301      	movs	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80021c0:	f001 fb60 	bl	8003884 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80021c4:	f000 fb10 	bl	80027e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80021c8:	f001 fb4a 	bl	8003860 <vPortEnterCritical>
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	2244      	movs	r2, #68	; 0x44
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	d103      	bne.n	80021e0 <xQueueReceive+0xde>
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2244      	movs	r2, #68	; 0x44
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	2245      	movs	r2, #69	; 0x45
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	d103      	bne.n	80021f4 <xQueueReceive+0xf2>
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	2245      	movs	r2, #69	; 0x45
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]
 80021f4:	f001 fb46 	bl	8003884 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021f8:	1d3a      	adds	r2, r7, #4
 80021fa:	2314      	movs	r3, #20
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	0011      	movs	r1, r2
 8002200:	0018      	movs	r0, r3
 8002202:	f000 fe8b 	bl	8002f1c <xTaskCheckForTimeOut>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d11e      	bne.n	8002248 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	0018      	movs	r0, r3
 800220e:	f000 f8b1 	bl	8002374 <prvIsQueueEmpty>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d011      	beq.n	800223a <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	3324      	adds	r3, #36	; 0x24
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	0011      	movs	r1, r2
 800221e:	0018      	movs	r0, r3
 8002220:	f000 fd42 	bl	8002ca8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	0018      	movs	r0, r3
 8002228:	f000 f846 	bl	80022b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800222c:	f000 fae8 	bl	8002800 <xTaskResumeAll>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d191      	bne.n	8002158 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8002234:	f001 fb04 	bl	8003840 <vPortYield>
 8002238:	e78e      	b.n	8002158 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f83b 	bl	80022b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002242:	f000 fadd 	bl	8002800 <xTaskResumeAll>
 8002246:	e787      	b.n	8002158 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f834 	bl	80022b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002250:	f000 fad6 	bl	8002800 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	0018      	movs	r0, r3
 8002258:	f000 f88c 	bl	8002374 <prvIsQueueEmpty>
 800225c:	1e03      	subs	r3, r0, #0
 800225e:	d100      	bne.n	8002262 <xQueueReceive+0x160>
 8002260:	e77a      	b.n	8002158 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002262:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b00a      	add	sp, #40	; 0x28
 800226a:	bd80      	pop	{r7, pc}

0800226c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d018      	beq.n	80022b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	18d2      	adds	r2, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d303      	bcc.n	80022a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68d9      	ldr	r1, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 fd5a 	bl	8003d64 <memcpy>
    }
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80022c0:	f001 face 	bl	8003860 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	2145      	movs	r1, #69	; 0x45
 80022cc:	5c52      	ldrb	r2, [r2, r1]
 80022ce:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80022d0:	e013      	b.n	80022fa <prvUnlockQueue+0x42>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <prvUnlockQueue+0x50>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3324      	adds	r3, #36	; 0x24
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fd3e 	bl	8002d60 <xTaskRemoveFromEventList>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d001      	beq.n	80022ec <prvUnlockQueue+0x34>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80022e8:	f000 fe6c 	bl	8002fc4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80022ec:	210f      	movs	r1, #15
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80022fa:	230f      	movs	r3, #15
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b25b      	sxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	dce5      	bgt.n	80022d2 <prvUnlockQueue+0x1a>
 8002306:	e000      	b.n	800230a <prvUnlockQueue+0x52>
                        break;
 8002308:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2245      	movs	r2, #69	; 0x45
 800230e:	21ff      	movs	r1, #255	; 0xff
 8002310:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002312:	f001 fab7 	bl	8003884 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002316:	f001 faa3 	bl	8003860 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800231a:	230e      	movs	r3, #14
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	2144      	movs	r1, #68	; 0x44
 8002322:	5c52      	ldrb	r2, [r2, r1]
 8002324:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002326:	e013      	b.n	8002350 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d016      	beq.n	800235e <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3310      	adds	r3, #16
 8002334:	0018      	movs	r0, r3
 8002336:	f000 fd13 	bl	8002d60 <xTaskRemoveFromEventList>
 800233a:	1e03      	subs	r3, r0, #0
 800233c:	d001      	beq.n	8002342 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800233e:	f000 fe41 	bl	8002fc4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002342:	210e      	movs	r1, #14
 8002344:	187b      	adds	r3, r7, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	187b      	adds	r3, r7, r1
 800234e:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002350:	230e      	movs	r3, #14
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b25b      	sxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	dce5      	bgt.n	8002328 <prvUnlockQueue+0x70>
 800235c:	e000      	b.n	8002360 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800235e:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2244      	movs	r2, #68	; 0x44
 8002364:	21ff      	movs	r1, #255	; 0xff
 8002366:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002368:	f001 fa8c 	bl	8003884 <vPortExitCritical>
}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}

08002374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800237c:	f001 fa70 	bl	8003860 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002388:	2301      	movs	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e001      	b.n	8002392 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002392:	f001 fa77 	bl	8003884 <vPortExitCritical>

    return xReturn;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b004      	add	sp, #16
 800239e:	bd80      	pop	{r7, pc}

080023a0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <vQueueAddToRegistry+0x14>
 80023b0:	b672      	cpsid	i
 80023b2:	e7fe      	b.n	80023b2 <vQueueAddToRegistry+0x12>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d025      	beq.n	800240a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e01f      	b.n	8002404 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80023c4:	4a17      	ldr	r2, [pc, #92]	; (8002424 <vQueueAddToRegistry+0x84>)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	3304      	adds	r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d105      	bne.n	80023e2 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	00da      	lsls	r2, r3, #3
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <vQueueAddToRegistry+0x84>)
 80023dc:	18d3      	adds	r3, r2, r3
 80023de:	60bb      	str	r3, [r7, #8]
                    break;
 80023e0:	e013      	b.n	800240a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <vQueueAddToRegistry+0x5e>
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <vQueueAddToRegistry+0x84>)
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	00d2      	lsls	r2, r2, #3
 80023ee:	58d3      	ldr	r3, [r2, r3]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	00da      	lsls	r2, r3, #3
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <vQueueAddToRegistry+0x84>)
 80023fa:	18d3      	adds	r3, r2, r3
 80023fc:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3301      	adds	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b07      	cmp	r3, #7
 8002408:	d9dc      	bls.n	80023c4 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20001c60 	.word	0x20001c60

08002428 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002438:	f001 fa12 	bl	8003860 <vPortEnterCritical>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2244      	movs	r2, #68	; 0x44
 8002440:	5c9b      	ldrb	r3, [r3, r2]
 8002442:	b25b      	sxtb	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	d103      	bne.n	8002450 <vQueueWaitForMessageRestricted+0x28>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2244      	movs	r2, #68	; 0x44
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2245      	movs	r2, #69	; 0x45
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	d103      	bne.n	8002464 <vQueueWaitForMessageRestricted+0x3c>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2245      	movs	r2, #69	; 0x45
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]
 8002464:	f001 fa0e 	bl	8003884 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3324      	adds	r3, #36	; 0x24
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	0018      	movs	r0, r3
 800247a:	f000 fc33 	bl	8002ce4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff ff19 	bl	80022b8 <prvUnlockQueue>
    }
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b006      	add	sp, #24
 800248c:	bd80      	pop	{r7, pc}

0800248e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800248e:	b590      	push	{r4, r7, lr}
 8002490:	b08d      	sub	sp, #52	; 0x34
 8002492:	af04      	add	r7, sp, #16
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	1dbb      	adds	r3, r7, #6
 800249c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800249e:	1dbb      	adds	r3, r7, #6
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f001 fa73 	bl	8003990 <pvPortMalloc>
 80024aa:	0003      	movs	r3, r0
 80024ac:	617b      	str	r3, [r7, #20]

                if( pxStack != NULL )
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <xTaskCreate+0x48>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024b4:	2054      	movs	r0, #84	; 0x54
 80024b6:	f001 fa6b 	bl	8003990 <pvPortMalloc>
 80024ba:	0003      	movs	r3, r0
 80024bc:	61fb      	str	r3, [r7, #28]

                    if( pxNewTCB != NULL )
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <xTaskCreate+0x3e>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ca:	e006      	b.n	80024da <xTaskCreate+0x4c>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f001 fb1e 	bl	8003b10 <vPortFree>
 80024d4:	e001      	b.n	80024da <xTaskCreate+0x4c>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d016      	beq.n	800250e <xTaskCreate+0x80>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	683c      	ldr	r4, [r7, #0]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9303      	str	r3, [sp, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	0023      	movs	r3, r4
 80024fc:	f000 f810 	bl	8002520 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	0018      	movs	r0, r3
 8002504:	f000 f8a2 	bl	800264c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002508:	2301      	movs	r3, #1
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	e002      	b.n	8002514 <xTaskCreate+0x86>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800250e:	2301      	movs	r3, #1
 8002510:	425b      	negs	r3, r3
 8002512:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002514:	69bb      	ldr	r3, [r7, #24]
    }
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b009      	add	sp, #36	; 0x24
 800251c:	bd90      	pop	{r4, r7, pc}
	...

08002520 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	001a      	movs	r2, r3
 8002538:	21a5      	movs	r1, #165	; 0xa5
 800253a:	f001 fc1c 	bl	8003d76 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4940      	ldr	r1, [pc, #256]	; (8002648 <prvInitialiseNewTask+0x128>)
 8002546:	468c      	mov	ip, r1
 8002548:	4463      	add	r3, ip
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	18d3      	adds	r3, r2, r3
 800254e:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2207      	movs	r2, #7
 8002554:	4393      	bics	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2207      	movs	r2, #7
 800255c:	4013      	ands	r3, r2
 800255e:	d001      	beq.n	8002564 <prvInitialiseNewTask+0x44>
 8002560:	b672      	cpsid	i
 8002562:	e7fe      	b.n	8002562 <prvInitialiseNewTask+0x42>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e013      	b.n	8002598 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	7818      	ldrb	r0, [r3, #0]
 8002578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800257a:	2134      	movs	r1, #52	; 0x34
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	18d3      	adds	r3, r2, r3
 8002580:	185b      	adds	r3, r3, r1
 8002582:	1c02      	adds	r2, r0, #0
 8002584:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	18d3      	adds	r3, r2, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d9e8      	bls.n	8002570 <prvInitialiseNewTask+0x50>
 800259e:	e000      	b.n	80025a2 <prvInitialiseNewTask+0x82>
            {
                break;
 80025a0:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	2238      	movs	r2, #56	; 0x38
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]
 80025aa:	e003      	b.n	80025b4 <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	2234      	movs	r2, #52	; 0x34
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d901      	bls.n	80025be <prvInitialiseNewTask+0x9e>
 80025ba:	b672      	cpsid	i
 80025bc:	e7fe      	b.n	80025bc <prvInitialiseNewTask+0x9c>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d901      	bls.n	80025c8 <prvInitialiseNewTask+0xa8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025c4:	2304      	movs	r3, #4
 80025c6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	6a3a      	ldr	r2, [r7, #32]
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	2200      	movs	r2, #0
 80025d8:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	3304      	adds	r3, #4
 80025de:	0018      	movs	r0, r3
 80025e0:	f7ff fc18 	bl	8001e14 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	3318      	adds	r3, #24
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7ff fc13 	bl	8001e14 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2205      	movs	r2, #5
 80025f8:	1ad2      	subs	r2, r2, r3
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	334c      	adds	r3, #76	; 0x4c
 8002608:	2204      	movs	r2, #4
 800260a:	2100      	movs	r1, #0
 800260c:	0018      	movs	r0, r3
 800260e:	f001 fbb2 	bl	8003d76 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	3350      	adds	r3, #80	; 0x50
 8002616:	2201      	movs	r2, #1
 8002618:	2100      	movs	r1, #0
 800261a:	0018      	movs	r0, r3
 800261c:	f001 fbab 	bl	8003d76 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	0018      	movs	r0, r3
 8002628:	f001 f87c 	bl	8003724 <pxPortInitialiseStack>
 800262c:	0002      	movs	r2, r0
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <prvInitialiseNewTask+0x11e>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800263c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	b006      	add	sp, #24
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	3fffffff 	.word	0x3fffffff

0800264c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002654:	f001 f904 	bl	8003860 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002658:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <prvAddNewTaskToReadyList+0x104>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <prvAddNewTaskToReadyList+0x104>)
 8002660:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <prvAddNewTaskToReadyList+0x108>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <prvAddNewTaskToReadyList+0x108>)
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002670:	4b37      	ldr	r3, [pc, #220]	; (8002750 <prvAddNewTaskToReadyList+0x104>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d110      	bne.n	800269a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002678:	f000 fcbe 	bl	8002ff8 <prvInitialiseTaskLists>
 800267c:	e00d      	b.n	800269a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <prvAddNewTaskToReadyList+0x10c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <prvAddNewTaskToReadyList+0x108>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	429a      	cmp	r2, r3
 8002692:	d802      	bhi.n	800269a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <prvAddNewTaskToReadyList+0x108>)
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <prvAddNewTaskToReadyList+0x110>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	4b2e      	ldr	r3, [pc, #184]	; (800275c <prvAddNewTaskToReadyList+0x110>)
 80026a2:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80026a4:	4b2d      	ldr	r3, [pc, #180]	; (800275c <prvAddNewTaskToReadyList+0x110>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <prvAddNewTaskToReadyList+0x114>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d903      	bls.n	80026c0 <prvAddNewTaskToReadyList+0x74>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <prvAddNewTaskToReadyList+0x114>)
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	4927      	ldr	r1, [pc, #156]	; (8002764 <prvAddNewTaskToReadyList+0x118>)
 80026c6:	0013      	movs	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	18cb      	adds	r3, r1, r3
 80026d0:	3304      	adds	r3, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	3204      	adds	r2, #4
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	1d1a      	adds	r2, r3, #4
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	0013      	movs	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <prvAddNewTaskToReadyList+0x118>)
 8002704:	189a      	adds	r2, r3, r2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	615a      	str	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270e:	4915      	ldr	r1, [pc, #84]	; (8002764 <prvAddNewTaskToReadyList+0x118>)
 8002710:	0013      	movs	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	189b      	adds	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	585b      	ldr	r3, [r3, r1]
 800271a:	1c58      	adds	r0, r3, #1
 800271c:	4911      	ldr	r1, [pc, #68]	; (8002764 <prvAddNewTaskToReadyList+0x118>)
 800271e:	0013      	movs	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	189b      	adds	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002728:	f001 f8ac 	bl	8003884 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <prvAddNewTaskToReadyList+0x10c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <prvAddNewTaskToReadyList+0x108>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	429a      	cmp	r2, r3
 8002740:	d201      	bcs.n	8002746 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002742:	f001 f87d 	bl	8003840 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b004      	add	sp, #16
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	20000178 	.word	0x20000178
 8002754:	200000a0 	.word	0x200000a0
 8002758:	20000184 	.word	0x20000184
 800275c:	20000194 	.word	0x20000194
 8002760:	20000180 	.word	0x20000180
 8002764:	200000a4 	.word	0x200000a4

08002768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800276e:	4917      	ldr	r1, [pc, #92]	; (80027cc <vTaskStartScheduler+0x64>)
 8002770:	4817      	ldr	r0, [pc, #92]	; (80027d0 <vTaskStartScheduler+0x68>)
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <vTaskStartScheduler+0x6c>)
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	223c      	movs	r2, #60	; 0x3c
 800277e:	f7ff fe86 	bl	800248e <xTaskCreate>
 8002782:	0003      	movs	r3, r0
 8002784:	607b      	str	r3, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d103      	bne.n	8002794 <vTaskStartScheduler+0x2c>
            {
                xReturn = xTimerCreateTimerTask();
 800278c:	f000 fd5c 	bl	8003248 <xTimerCreateTimerTask>
 8002790:	0003      	movs	r3, r0
 8002792:	607b      	str	r3, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10d      	bne.n	80027b6 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800279a:	b672      	cpsid	i
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <vTaskStartScheduler+0x70>)
 800279e:	2201      	movs	r2, #1
 80027a0:	4252      	negs	r2, r2
 80027a2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <vTaskStartScheduler+0x74>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <vTaskStartScheduler+0x78>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80027b0:	f001 f822 	bl	80037f8 <xPortStartScheduler>
 80027b4:	e004      	b.n	80027c0 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3301      	adds	r3, #1
 80027ba:	d101      	bne.n	80027c0 <vTaskStartScheduler+0x58>
 80027bc:	b672      	cpsid	i
 80027be:	e7fe      	b.n	80027be <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <vTaskStartScheduler+0x7c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	08004990 	.word	0x08004990
 80027d0:	08002fd9 	.word	0x08002fd9
 80027d4:	2000019c 	.word	0x2000019c
 80027d8:	20000198 	.word	0x20000198
 80027dc:	20000184 	.word	0x20000184
 80027e0:	2000017c 	.word	0x2000017c
 80027e4:	2000000c 	.word	0x2000000c

080027e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <vTaskSuspendAll+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	4b02      	ldr	r3, [pc, #8]	; (80027fc <vTaskSuspendAll+0x14>)
 80027f4:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200001a0 	.word	0x200001a0

08002800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800280e:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <xTaskResumeAll+0x1b0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <xTaskResumeAll+0x1a>
 8002816:	b672      	cpsid	i
 8002818:	e7fe      	b.n	8002818 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800281a:	f001 f821 	bl	8003860 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800281e:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <xTaskResumeAll+0x1b0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <xTaskResumeAll+0x1b0>)
 8002826:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002828:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <xTaskResumeAll+0x1b0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d000      	beq.n	8002832 <xTaskResumeAll+0x32>
 8002830:	e0b7      	b.n	80029a2 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <xTaskResumeAll+0x1b4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d100      	bne.n	800283c <xTaskResumeAll+0x3c>
 800283a:	e0b2      	b.n	80029a2 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800283c:	e089      	b.n	8002952 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800283e:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <xTaskResumeAll+0x1b8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	6a12      	ldr	r2, [r2, #32]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	69d2      	ldr	r2, [r2, #28]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3318      	adds	r3, #24
 8002868:	429a      	cmp	r2, r3
 800286a:	d103      	bne.n	8002874 <xTaskResumeAll+0x74>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6892      	ldr	r2, [r2, #8]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3304      	adds	r3, #4
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d103      	bne.n	80028b2 <xTaskResumeAll+0xb2>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	615a      	str	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <xTaskResumeAll+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d903      	bls.n	80028d6 <xTaskResumeAll+0xd6>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <xTaskResumeAll+0x1bc>)
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028da:	4939      	ldr	r1, [pc, #228]	; (80029c0 <xTaskResumeAll+0x1c0>)
 80028dc:	0013      	movs	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	18cb      	adds	r3, r1, r3
 80028e6:	3304      	adds	r3, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	3204      	adds	r2, #4
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1d1a      	adds	r2, r3, #4
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002910:	0013      	movs	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	189b      	adds	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <xTaskResumeAll+0x1c0>)
 800291a:	189a      	adds	r2, r3, r2
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002924:	4926      	ldr	r1, [pc, #152]	; (80029c0 <xTaskResumeAll+0x1c0>)
 8002926:	0013      	movs	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	189b      	adds	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	585b      	ldr	r3, [r3, r1]
 8002930:	1c58      	adds	r0, r3, #1
 8002932:	4923      	ldr	r1, [pc, #140]	; (80029c0 <xTaskResumeAll+0x1c0>)
 8002934:	0013      	movs	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	189b      	adds	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <xTaskResumeAll+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	429a      	cmp	r2, r3
 800294a:	d302      	bcc.n	8002952 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 800294c:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <xTaskResumeAll+0x1c8>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <xTaskResumeAll+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d000      	beq.n	800295c <xTaskResumeAll+0x15c>
 800295a:	e770      	b.n	800283e <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002962:	f000 fbcd 	bl	8003100 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <xTaskResumeAll+0x1cc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00f      	beq.n	8002992 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002972:	f000 f83b 	bl	80029ec <xTaskIncrementTick>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d002      	beq.n	8002980 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <xTaskResumeAll+0x1c8>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f2      	bne.n	8002972 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <xTaskResumeAll+0x1cc>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <xTaskResumeAll+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800299a:	2301      	movs	r3, #1
 800299c:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800299e:	f000 ff4f 	bl	8003840 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80029a2:	f000 ff6f 	bl	8003884 <vPortExitCritical>

    return xAlreadyYielded;
 80029a6:	693b      	ldr	r3, [r7, #16]
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b006      	add	sp, #24
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200001a0 	.word	0x200001a0
 80029b4:	20000178 	.word	0x20000178
 80029b8:	20000138 	.word	0x20000138
 80029bc:	20000180 	.word	0x20000180
 80029c0:	200000a4 	.word	0x200000a4
 80029c4:	200000a0 	.word	0x200000a0
 80029c8:	2000018c 	.word	0x2000018c
 80029cc:	20000188 	.word	0x20000188

080029d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <xTaskGetTickCount+0x18>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80029dc:	687b      	ldr	r3, [r7, #4]
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b002      	add	sp, #8
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	2000017c 	.word	0x2000017c

080029ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029f6:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <xTaskIncrementTick+0x1ec>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d000      	beq.n	8002a00 <xTaskIncrementTick+0x14>
 80029fe:	e0e0      	b.n	8002bc2 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a00:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <xTaskIncrementTick+0x1f0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a08:	4b74      	ldr	r3, [pc, #464]	; (8002bdc <xTaskIncrementTick+0x1f0>)
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d117      	bne.n	8002a44 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a14:	4b72      	ldr	r3, [pc, #456]	; (8002be0 <xTaskIncrementTick+0x1f4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <xTaskIncrementTick+0x36>
 8002a1e:	b672      	cpsid	i
 8002a20:	e7fe      	b.n	8002a20 <xTaskIncrementTick+0x34>
 8002a22:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <xTaskIncrementTick+0x1f4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	4b6e      	ldr	r3, [pc, #440]	; (8002be4 <xTaskIncrementTick+0x1f8>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b6c      	ldr	r3, [pc, #432]	; (8002be0 <xTaskIncrementTick+0x1f4>)
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b6c      	ldr	r3, [pc, #432]	; (8002be4 <xTaskIncrementTick+0x1f8>)
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4b6c      	ldr	r3, [pc, #432]	; (8002be8 <xTaskIncrementTick+0x1fc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <xTaskIncrementTick+0x1fc>)
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f000 fb5e 	bl	8003100 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a44:	4b69      	ldr	r3, [pc, #420]	; (8002bec <xTaskIncrementTick+0x200>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d200      	bcs.n	8002a50 <xTaskIncrementTick+0x64>
 8002a4e:	e0a4      	b.n	8002b9a <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a50:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <xTaskIncrementTick+0x1f4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a5a:	4b64      	ldr	r3, [pc, #400]	; (8002bec <xTaskIncrementTick+0x200>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4252      	negs	r2, r2
 8002a60:	601a      	str	r2, [r3, #0]
                    break;
 8002a62:	e09a      	b.n	8002b9a <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a64:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <xTaskIncrementTick+0x1f4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d203      	bcs.n	8002a84 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <xTaskIncrementTick+0x200>)
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a82:	e08a      	b.n	8002b9a <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d103      	bne.n	8002ab2 <xTaskIncrementTick+0xc6>
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01e      	beq.n	8002b08 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	6a12      	ldr	r2, [r2, #32]
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	69d2      	ldr	r2, [r2, #28]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	3318      	adds	r3, #24
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d103      	bne.n	8002af8 <xTaskIncrementTick+0x10c>
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	6a1a      	ldr	r2, [r3, #32]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <xTaskIncrementTick+0x204>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d903      	bls.n	8002b1c <xTaskIncrementTick+0x130>
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <xTaskIncrementTick+0x204>)
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	4934      	ldr	r1, [pc, #208]	; (8002bf4 <xTaskIncrementTick+0x208>)
 8002b22:	0013      	movs	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	189b      	adds	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	18cb      	adds	r3, r1, r3
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	3204      	adds	r2, #4
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1d1a      	adds	r2, r3, #4
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b56:	0013      	movs	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <xTaskIncrementTick+0x208>)
 8002b60:	189a      	adds	r2, r3, r2
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	4922      	ldr	r1, [pc, #136]	; (8002bf4 <xTaskIncrementTick+0x208>)
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	585b      	ldr	r3, [r3, r1]
 8002b76:	1c58      	adds	r0, r3, #1
 8002b78:	491e      	ldr	r1, [pc, #120]	; (8002bf4 <xTaskIncrementTick+0x208>)
 8002b7a:	0013      	movs	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	5058      	str	r0, [r3, r1]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <xTaskIncrementTick+0x20c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d200      	bcs.n	8002b94 <xTaskIncrementTick+0x1a8>
 8002b92:	e75d      	b.n	8002a50 <xTaskIncrementTick+0x64>
                            {
                                xSwitchRequired = pdTRUE;
 8002b94:	2301      	movs	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b98:	e75a      	b.n	8002a50 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <xTaskIncrementTick+0x20c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	4914      	ldr	r1, [pc, #80]	; (8002bf4 <xTaskIncrementTick+0x208>)
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	585b      	ldr	r3, [r3, r1]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d901      	bls.n	8002bb4 <xTaskIncrementTick+0x1c8>
                {
                    xSwitchRequired = pdTRUE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <xTaskIncrementTick+0x210>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <xTaskIncrementTick+0x1e0>
                {
                    xSwitchRequired = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e004      	b.n	8002bcc <xTaskIncrementTick+0x1e0>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <xTaskIncrementTick+0x214>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <xTaskIncrementTick+0x214>)
 8002bca:	601a      	str	r2, [r3, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b008      	add	sp, #32
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	200001a0 	.word	0x200001a0
 8002bdc:	2000017c 	.word	0x2000017c
 8002be0:	20000130 	.word	0x20000130
 8002be4:	20000134 	.word	0x20000134
 8002be8:	20000190 	.word	0x20000190
 8002bec:	20000198 	.word	0x20000198
 8002bf0:	20000180 	.word	0x20000180
 8002bf4:	200000a4 	.word	0x200000a4
 8002bf8:	200000a0 	.word	0x200000a0
 8002bfc:	2000018c 	.word	0x2000018c
 8002c00:	20000188 	.word	0x20000188

08002c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <vTaskSwitchContext+0x90>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <vTaskSwitchContext+0x94>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c18:	e037      	b.n	8002c8a <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <vTaskSwitchContext+0x94>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c20:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <vTaskSwitchContext+0x98>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	e007      	b.n	8002c38 <vTaskSwitchContext+0x34>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <vTaskSwitchContext+0x2e>
 8002c2e:	b672      	cpsid	i
 8002c30:	e7fe      	b.n	8002c30 <vTaskSwitchContext+0x2c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	4919      	ldr	r1, [pc, #100]	; (8002ca0 <vTaskSwitchContext+0x9c>)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	585b      	ldr	r3, [r3, r1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ee      	beq.n	8002c28 <vTaskSwitchContext+0x24>
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	189b      	adds	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <vTaskSwitchContext+0x9c>)
 8002c56:	189b      	adds	r3, r3, r2
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d104      	bne.n	8002c7a <vTaskSwitchContext+0x76>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <vTaskSwitchContext+0xa0>)
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <vTaskSwitchContext+0x98>)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	200001a0 	.word	0x200001a0
 8002c98:	2000018c 	.word	0x2000018c
 8002c9c:	20000180 	.word	0x20000180
 8002ca0:	200000a4 	.word	0x200000a4
 8002ca4:	200000a0 	.word	0x200000a0

08002ca8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <vTaskPlaceOnEventList+0x14>
 8002cb8:	b672      	cpsid	i
 8002cba:	e7fe      	b.n	8002cba <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <vTaskPlaceOnEventList+0x38>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff f8ae 	bl	8001e2a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fa4a 	bl	800316c <prvAddCurrentTaskToDelayedList>
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200000a0 	.word	0x200000a0

08002ce4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <vTaskPlaceOnEventListRestricted+0x16>
 8002cf6:	b672      	cpsid	i
 8002cf8:	e7fe      	b.n	8002cf8 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <vTaskPlaceOnEventListRestricted+0x78>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	61da      	str	r2, [r3, #28]
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <vTaskPlaceOnEventListRestricted+0x78>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	621a      	str	r2, [r3, #32]
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <vTaskPlaceOnEventListRestricted+0x78>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	3218      	adds	r2, #24
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <vTaskPlaceOnEventListRestricted+0x78>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3318      	adds	r3, #24
 8002d24:	001a      	movs	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <vTaskPlaceOnEventListRestricted+0x78>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8002d42:	2301      	movs	r3, #1
 8002d44:	425b      	negs	r3, r3
 8002d46:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fa0c 	bl	800316c <prvAddCurrentTaskToDelayedList>
    }
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b006      	add	sp, #24
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200000a0 	.word	0x200000a0

08002d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <xTaskRemoveFromEventList+0x1a>
 8002d76:	b672      	cpsid	i
 8002d78:	e7fe      	b.n	8002d78 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	6a12      	ldr	r2, [r2, #32]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	69d2      	ldr	r2, [r2, #28]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d103      	bne.n	8002da8 <xTaskRemoveFromEventList+0x48>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1e5a      	subs	r2, r3, #1
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db8:	4b48      	ldr	r3, [pc, #288]	; (8002edc <xTaskRemoveFromEventList+0x17c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d15d      	bne.n	8002e7c <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	68d2      	ldr	r2, [r2, #12]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	6892      	ldr	r2, [r2, #8]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	3304      	adds	r3, #4
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d103      	bne.n	8002dee <xTaskRemoveFromEventList+0x8e>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e02:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <xTaskRemoveFromEventList+0x180>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d903      	bls.n	8002e12 <xTaskRemoveFromEventList+0xb2>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0e:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <xTaskRemoveFromEventList+0x180>)
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	4933      	ldr	r1, [pc, #204]	; (8002ee4 <xTaskRemoveFromEventList+0x184>)
 8002e18:	0013      	movs	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	189b      	adds	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	18cb      	adds	r3, r1, r3
 8002e22:	3304      	adds	r3, #4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	3204      	adds	r2, #4
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1d1a      	adds	r2, r3, #4
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	189b      	adds	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4a23      	ldr	r2, [pc, #140]	; (8002ee4 <xTaskRemoveFromEventList+0x184>)
 8002e56:	189a      	adds	r2, r3, r2
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	615a      	str	r2, [r3, #20]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	4920      	ldr	r1, [pc, #128]	; (8002ee4 <xTaskRemoveFromEventList+0x184>)
 8002e62:	0013      	movs	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	585b      	ldr	r3, [r3, r1]
 8002e6c:	1c58      	adds	r0, r3, #1
 8002e6e:	491d      	ldr	r1, [pc, #116]	; (8002ee4 <xTaskRemoveFromEventList+0x184>)
 8002e70:	0013      	movs	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	189b      	adds	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	5058      	str	r0, [r3, r1]
 8002e7a:	e01b      	b.n	8002eb4 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <xTaskRemoveFromEventList+0x188>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	61da      	str	r2, [r3, #28]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	621a      	str	r2, [r3, #32]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	3218      	adds	r2, #24
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <xTaskRemoveFromEventList+0x188>)
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <xTaskRemoveFromEventList+0x188>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <xTaskRemoveFromEventList+0x188>)
 8002eb2:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <xTaskRemoveFromEventList+0x18c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d905      	bls.n	8002ece <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <xTaskRemoveFromEventList+0x190>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e001      	b.n	8002ed2 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b008      	add	sp, #32
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200001a0 	.word	0x200001a0
 8002ee0:	20000180 	.word	0x20000180
 8002ee4:	200000a4 	.word	0x200000a4
 8002ee8:	20000138 	.word	0x20000138
 8002eec:	200000a0 	.word	0x200000a0
 8002ef0:	2000018c 	.word	0x2000018c

08002ef4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <vTaskInternalSetTimeOutState+0x20>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <vTaskInternalSetTimeOutState+0x24>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	605a      	str	r2, [r3, #4]
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000190 	.word	0x20000190
 8002f18:	2000017c 	.word	0x2000017c

08002f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <xTaskCheckForTimeOut+0x14>
 8002f2c:	b672      	cpsid	i
 8002f2e:	e7fe      	b.n	8002f2e <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <xTaskCheckForTimeOut+0x1e>
 8002f36:	b672      	cpsid	i
 8002f38:	e7fe      	b.n	8002f38 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8002f3a:	f000 fc91 	bl	8003860 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <xTaskCheckForTimeOut+0xa0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3301      	adds	r3, #1
 8002f54:	d102      	bne.n	8002f5c <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e027      	b.n	8002fac <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <xTaskCheckForTimeOut+0xa4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d00a      	beq.n	8002f7e <xTaskCheckForTimeOut+0x62>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d305      	bcc.n	8002f7e <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e016      	b.n	8002fac <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d20c      	bcs.n	8002fa2 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ffac 	bl	8002ef4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e004      	b.n	8002fac <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002fac:	f000 fc6a 	bl	8003884 <vPortExitCritical>

    return xReturn;
 8002fb0:	697b      	ldr	r3, [r7, #20]
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b006      	add	sp, #24
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	2000017c 	.word	0x2000017c
 8002fc0:	20000190 	.word	0x20000190

08002fc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <vTaskMissedYield+0x10>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	2000018c 	.word	0x2000018c

08002fd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fe0:	f000 f84e 	bl	8003080 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <prvIdleTask+0x1c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d9f9      	bls.n	8002fe0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002fec:	f000 fc28 	bl	8003840 <vPortYield>
        prvCheckTasksWaitingTermination();
 8002ff0:	e7f6      	b.n	8002fe0 <prvIdleTask+0x8>
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	200000a4 	.word	0x200000a4

08002ff8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	e00c      	b.n	800301e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	0013      	movs	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	189b      	adds	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4a14      	ldr	r2, [pc, #80]	; (8003060 <prvInitialiseTaskLists+0x68>)
 8003010:	189b      	adds	r3, r3, r2
 8003012:	0018      	movs	r0, r3
 8003014:	f7fe fee0 	bl	8001dd8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3301      	adds	r3, #1
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d9ef      	bls.n	8003004 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <prvInitialiseTaskLists+0x6c>)
 8003026:	0018      	movs	r0, r3
 8003028:	f7fe fed6 	bl	8001dd8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <prvInitialiseTaskLists+0x70>)
 800302e:	0018      	movs	r0, r3
 8003030:	f7fe fed2 	bl	8001dd8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <prvInitialiseTaskLists+0x74>)
 8003036:	0018      	movs	r0, r3
 8003038:	f7fe fece 	bl	8001dd8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <prvInitialiseTaskLists+0x78>)
 800303e:	0018      	movs	r0, r3
 8003040:	f7fe feca 	bl	8001dd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <prvInitialiseTaskLists+0x7c>)
 8003046:	0018      	movs	r0, r3
 8003048:	f7fe fec6 	bl	8001dd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <prvInitialiseTaskLists+0x80>)
 800304e:	4a05      	ldr	r2, [pc, #20]	; (8003064 <prvInitialiseTaskLists+0x6c>)
 8003050:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <prvInitialiseTaskLists+0x84>)
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <prvInitialiseTaskLists+0x70>)
 8003056:	601a      	str	r2, [r3, #0]
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}
 8003060:	200000a4 	.word	0x200000a4
 8003064:	20000108 	.word	0x20000108
 8003068:	2000011c 	.word	0x2000011c
 800306c:	20000138 	.word	0x20000138
 8003070:	2000014c 	.word	0x2000014c
 8003074:	20000164 	.word	0x20000164
 8003078:	20000130 	.word	0x20000130
 800307c:	20000134 	.word	0x20000134

08003080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003086:	e01a      	b.n	80030be <prvCheckTasksWaitingTermination+0x3e>
            {
                taskENTER_CRITICAL();
 8003088:	f000 fbea 	bl	8003860 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <prvCheckTasksWaitingTermination+0x50>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	0018      	movs	r0, r3
 800309a:	f7fe fefc 	bl	8001e96 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <prvCheckTasksWaitingTermination+0x54>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <prvCheckTasksWaitingTermination+0x54>)
 80030a6:	601a      	str	r2, [r3, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <prvCheckTasksWaitingTermination+0x58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <prvCheckTasksWaitingTermination+0x58>)
 80030b0:	601a      	str	r2, [r3, #0]
                }
                taskEXIT_CRITICAL();
 80030b2:	f000 fbe7 	bl	8003884 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f80f 	bl	80030dc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <prvCheckTasksWaitingTermination+0x58>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e0      	bne.n	8003088 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000014c 	.word	0x2000014c
 80030d4:	20000178 	.word	0x20000178
 80030d8:	20000160 	.word	0x20000160

080030dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 fd11 	bl	8003b10 <vPortFree>
                vPortFree( pxTCB );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 fd0d 	bl	8003b10 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <prvResetNextTaskUnblockTime+0x2c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <prvResetNextTaskUnblockTime+0x30>)
 8003110:	2201      	movs	r2, #1
 8003112:	4252      	negs	r2, r2
 8003114:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003116:	e005      	b.n	8003124 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <prvResetNextTaskUnblockTime+0x2c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <prvResetNextTaskUnblockTime+0x30>)
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20000130 	.word	0x20000130
 8003130:	20000198 	.word	0x20000198

08003134 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <xTaskGetSchedulerState+0x30>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003142:	2301      	movs	r3, #1
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	e008      	b.n	800315a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <xTaskGetSchedulerState+0x34>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003150:	2302      	movs	r3, #2
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	e001      	b.n	800315a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800315a:	687b      	ldr	r3, [r7, #4]
    }
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000184 	.word	0x20000184
 8003168:	200001a0 	.word	0x200001a0

0800316c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3304      	adds	r3, #4
 8003182:	0018      	movs	r0, r3
 8003184:	f7fe fe87 	bl	8001e96 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3301      	adds	r3, #1
 800318c:	d124      	bne.n	80031d8 <prvAddCurrentTaskToDelayedList+0x6c>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d021      	beq.n	80031d8 <prvAddCurrentTaskToDelayedList+0x6c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	3204      	adds	r2, #4
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	1d1a      	adds	r2, r3, #4
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031c8:	615a      	str	r2, [r3, #20]
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <prvAddCurrentTaskToDelayedList+0xcc>)
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	46c0      	nop			; (mov r8, r8)

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80031d6:	e026      	b.n	8003226 <prvAddCurrentTaskToDelayedList+0xba>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031e0:	4b14      	ldr	r3, [pc, #80]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d209      	bcs.n	8003204 <prvAddCurrentTaskToDelayedList+0x98>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <prvAddCurrentTaskToDelayedList+0xd0>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3304      	adds	r3, #4
 80031fa:	0019      	movs	r1, r3
 80031fc:	0010      	movs	r0, r2
 80031fe:	f7fe fe14 	bl	8001e2a <vListInsert>
}
 8003202:	e010      	b.n	8003226 <prvAddCurrentTaskToDelayedList+0xba>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3304      	adds	r3, #4
 800320e:	0019      	movs	r1, r3
 8003210:	0010      	movs	r0, r2
 8003212:	f7fe fe0a 	bl	8001e2a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d202      	bcs.n	8003226 <prvAddCurrentTaskToDelayedList+0xba>
                        xNextTaskUnblockTime = xTimeToWake;
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	601a      	str	r2, [r3, #0]
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b006      	add	sp, #24
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	2000017c 	.word	0x2000017c
 8003234:	200000a0 	.word	0x200000a0
 8003238:	20000164 	.word	0x20000164
 800323c:	20000134 	.word	0x20000134
 8003240:	20000130 	.word	0x20000130
 8003244:	20000198 	.word	0x20000198

08003248 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003252:	f000 fa2d 	bl	80036b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <xTimerCreateTimerTask+0x44>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800325e:	490c      	ldr	r1, [pc, #48]	; (8003290 <xTimerCreateTimerTask+0x48>)
 8003260:	480c      	ldr	r0, [pc, #48]	; (8003294 <xTimerCreateTimerTask+0x4c>)
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <xTimerCreateTimerTask+0x50>)
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	2302      	movs	r3, #2
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2300      	movs	r3, #0
 800326c:	2250      	movs	r2, #80	; 0x50
 800326e:	f7ff f90e 	bl	800248e <xTaskCreate>
 8003272:	0003      	movs	r3, r0
 8003274:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <xTimerCreateTimerTask+0x38>
 800327c:	b672      	cpsid	i
 800327e:	e7fe      	b.n	800327e <xTimerCreateTimerTask+0x36>
        return xReturn;
 8003280:	687b      	ldr	r3, [r7, #4]
    }
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b002      	add	sp, #8
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	200001d4 	.word	0x200001d4
 8003290:	08004998 	.word	0x08004998
 8003294:	08003345 	.word	0x08003345
 8003298:	200001d8 	.word	0x200001d8

0800329c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80032a8:	e009      	b.n	80032be <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	18d3      	adds	r3, r2, r3
 80032b2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	0010      	movs	r0, r2
 80032bc:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	18d1      	adds	r1, r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f8d8 	bl	8003480 <prvInsertTimerInActiveList>
 80032d0:	1e03      	subs	r3, r0, #0
 80032d2:	d1ea      	bne.n	80032aa <prvReloadTimer+0xe>
        }
    }
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <prvProcessExpiredTimer+0x60>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3304      	adds	r3, #4
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7fe fdcc 	bl	8001e96 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2228      	movs	r2, #40	; 0x28
 8003302:	5c9b      	ldrb	r3, [r3, r2]
 8003304:	001a      	movs	r2, r3
 8003306:	2304      	movs	r3, #4
 8003308:	4013      	ands	r3, r2
 800330a:	d006      	beq.n	800331a <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff ffc2 	bl	800329c <prvReloadTimer>
 8003318:	e008      	b.n	800332c <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2228      	movs	r2, #40	; 0x28
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	2201      	movs	r2, #1
 8003322:	4393      	bics	r3, r2
 8003324:	b2d9      	uxtb	r1, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2228      	movs	r2, #40	; 0x28
 800332a:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	0010      	movs	r0, r2
 8003334:	4798      	blx	r3
    }
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b004      	add	sp, #16
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	200001cc 	.word	0x200001cc

08003344 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800334c:	2308      	movs	r3, #8
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	0018      	movs	r0, r3
 8003352:	f000 f853 	bl	80033fc <prvGetNextExpireTime>
 8003356:	0003      	movs	r3, r0
 8003358:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	0011      	movs	r1, r2
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f803 	bl	800336c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003366:	f000 f8cd 	bl	8003504 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800336a:	e7ef      	b.n	800334c <prvTimerTask+0x8>

0800336c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003376:	f7ff fa37 	bl	80027e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800337a:	2308      	movs	r3, #8
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f85e 	bl	8003440 <prvSampleTimeNow>
 8003384:	0003      	movs	r3, r0
 8003386:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d12b      	bne.n	80033e6 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10c      	bne.n	80033ae <prvProcessTimerOrBlockTask+0x42>
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	429a      	cmp	r2, r3
 800339a:	d808      	bhi.n	80033ae <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 800339c:	f7ff fa30 	bl	8002800 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0011      	movs	r1, r2
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff ff9a 	bl	80032e0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80033ac:	e01d      	b.n	80033ea <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <prvProcessTimerOrBlockTask+0x88>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <prvProcessTimerOrBlockTask+0x56>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <prvProcessTimerOrBlockTask+0x58>
 80033c2:	2300      	movs	r3, #0
 80033c4:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <prvProcessTimerOrBlockTask+0x8c>)
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	0019      	movs	r1, r3
 80033d4:	f7ff f828 	bl	8002428 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80033d8:	f7ff fa12 	bl	8002800 <xTaskResumeAll>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d104      	bne.n	80033ea <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 80033e0:	f000 fa2e 	bl	8003840 <vPortYield>
    }
 80033e4:	e001      	b.n	80033ea <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80033e6:	f7ff fa0b 	bl	8002800 <xTaskResumeAll>
    }
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	200001d0 	.word	0x200001d0
 80033f8:	200001d4 	.word	0x200001d4

080033fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <prvGetNextExpireTime+0x40>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <prvGetNextExpireTime+0x16>
 800340e:	2201      	movs	r2, #1
 8003410:	e000      	b.n	8003414 <prvGetNextExpireTime+0x18>
 8003412:	2200      	movs	r2, #0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <prvGetNextExpireTime+0x40>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e001      	b.n	8003430 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003430:	68fb      	ldr	r3, [r7, #12]
    }
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	200001cc 	.word	0x200001cc

08003440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003448:	f7ff fac2 	bl	80029d0 <xTaskGetTickCount>
 800344c:	0003      	movs	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <prvSampleTimeNow+0x3c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	429a      	cmp	r2, r3
 8003458:	d205      	bcs.n	8003466 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 800345a:	f000 f901 	bl	8003660 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e002      	b.n	800346c <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <prvSampleTimeNow+0x3c>)
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8003472:	68fb      	ldr	r3, [r7, #12]
    }
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200001dc 	.word	0x200001dc

08003480 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d812      	bhi.n	80034cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e01b      	b.n	80034f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <prvInsertTimerInActiveList+0x7c>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3304      	adds	r3, #4
 80034c2:	0019      	movs	r1, r3
 80034c4:	0010      	movs	r0, r2
 80034c6:	f7fe fcb0 	bl	8001e2a <vListInsert>
 80034ca:	e012      	b.n	80034f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d206      	bcs.n	80034e2 <prvInsertTimerInActiveList+0x62>
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d302      	bcc.n	80034e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80034dc:	2301      	movs	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e007      	b.n	80034f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <prvInsertTimerInActiveList+0x80>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3304      	adds	r3, #4
 80034ea:	0019      	movs	r1, r3
 80034ec:	0010      	movs	r0, r2
 80034ee:	f7fe fc9c 	bl	8001e2a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80034f2:	697b      	ldr	r3, [r7, #20]
    }
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b006      	add	sp, #24
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200001d0 	.word	0x200001d0
 8003500:	200001cc 	.word	0x200001cc

08003504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800350a:	e095      	b.n	8003638 <prvProcessReceivedCommands+0x134>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da00      	bge.n	8003516 <prvProcessReceivedCommands+0x12>
 8003514:	e08f      	b.n	8003636 <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3304      	adds	r3, #4
 8003528:	0018      	movs	r0, r3
 800352a:	f7fe fcb4 	bl	8001e96 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800352e:	003b      	movs	r3, r7
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff ff85 	bl	8003440 <prvSampleTimeNow>
 8003536:	0003      	movs	r3, r0
 8003538:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b09      	cmp	r3, #9
 8003540:	d900      	bls.n	8003544 <prvProcessReceivedCommands+0x40>
 8003542:	e079      	b.n	8003638 <prvProcessReceivedCommands+0x134>
 8003544:	009a      	lsls	r2, r3, #2
 8003546:	4b44      	ldr	r3, [pc, #272]	; (8003658 <prvProcessReceivedCommands+0x154>)
 8003548:	18d3      	adds	r3, r2, r3
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2228      	movs	r2, #40	; 0x28
 8003552:	5c9b      	ldrb	r3, [r3, r2]
 8003554:	2201      	movs	r2, #1
 8003556:	4313      	orrs	r3, r2
 8003558:	b2d9      	uxtb	r1, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2228      	movs	r2, #40	; 0x28
 800355e:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	18d1      	adds	r1, r2, r3
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	6978      	ldr	r0, [r7, #20]
 8003572:	f7ff ff85 	bl	8003480 <prvInsertTimerInActiveList>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d05e      	beq.n	8003638 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2228      	movs	r2, #40	; 0x28
 800357e:	5c9b      	ldrb	r3, [r3, r2]
 8003580:	001a      	movs	r2, r3
 8003582:	2304      	movs	r3, #4
 8003584:	4013      	ands	r3, r2
 8003586:	d00a      	beq.n	800359e <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	18d1      	adds	r1, r2, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff fe80 	bl	800329c <prvReloadTimer>
 800359c:	e008      	b.n	80035b0 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2228      	movs	r2, #40	; 0x28
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4393      	bics	r3, r2
 80035a8:	b2d9      	uxtb	r1, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2228      	movs	r2, #40	; 0x28
 80035ae:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	0010      	movs	r0, r2
 80035b8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80035ba:	e03d      	b.n	8003638 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2228      	movs	r2, #40	; 0x28
 80035c0:	5c9b      	ldrb	r3, [r3, r2]
 80035c2:	2201      	movs	r2, #1
 80035c4:	4393      	bics	r3, r2
 80035c6:	b2d9      	uxtb	r1, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2228      	movs	r2, #40	; 0x28
 80035cc:	5499      	strb	r1, [r3, r2]
                        break;
 80035ce:	e033      	b.n	8003638 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2228      	movs	r2, #40	; 0x28
 80035d4:	5c9b      	ldrb	r3, [r3, r2]
 80035d6:	2201      	movs	r2, #1
 80035d8:	4313      	orrs	r3, r2
 80035da:	b2d9      	uxtb	r1, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2228      	movs	r2, #40	; 0x28
 80035e0:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <prvProcessReceivedCommands+0xf2>
 80035f2:	b672      	cpsid	i
 80035f4:	e7fe      	b.n	80035f4 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	18d1      	adds	r1, r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff3c 	bl	8003480 <prvInsertTimerInActiveList>
                        break;
 8003608:	e016      	b.n	8003638 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2228      	movs	r2, #40	; 0x28
 800360e:	5c9b      	ldrb	r3, [r3, r2]
 8003610:	001a      	movs	r2, r3
 8003612:	2302      	movs	r3, #2
 8003614:	4013      	ands	r3, r2
 8003616:	d104      	bne.n	8003622 <prvProcessReceivedCommands+0x11e>
                                {
                                    vPortFree( pxTimer );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	0018      	movs	r0, r3
 800361c:	f000 fa78 	bl	8003b10 <vPortFree>
 8003620:	e00a      	b.n	8003638 <prvProcessReceivedCommands+0x134>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2228      	movs	r2, #40	; 0x28
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	2201      	movs	r2, #1
 800362a:	4393      	bics	r3, r2
 800362c:	b2d9      	uxtb	r1, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2228      	movs	r2, #40	; 0x28
 8003632:	5499      	strb	r1, [r3, r2]
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003634:	e000      	b.n	8003638 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003636:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <prvProcessReceivedCommands+0x158>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	1d39      	adds	r1, r7, #4
 800363e:	2200      	movs	r2, #0
 8003640:	0018      	movs	r0, r3
 8003642:	f7fe fd5e 	bl	8002102 <xQueueReceive>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d000      	beq.n	800364c <prvProcessReceivedCommands+0x148>
 800364a:	e75f      	b.n	800350c <prvProcessReceivedCommands+0x8>
        }
    }
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b006      	add	sp, #24
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	080049cc 	.word	0x080049cc
 800365c:	200001d4 	.word	0x200001d4

08003660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003666:	e00b      	b.n	8003680 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <prvSwitchTimerLists+0x48>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003672:	2301      	movs	r3, #1
 8003674:	425a      	negs	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	0011      	movs	r1, r2
 800367a:	0018      	movs	r0, r3
 800367c:	f7ff fe30 	bl	80032e0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <prvSwitchTimerLists+0x48>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <prvSwitchTimerLists+0x48>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <prvSwitchTimerLists+0x4c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <prvSwitchTimerLists+0x48>)
 8003696:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <prvSwitchTimerLists+0x4c>)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
    }
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	200001cc 	.word	0x200001cc
 80036ac:	200001d0 	.word	0x200001d0

080036b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80036b4:	f000 f8d4 	bl	8003860 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <prvCheckForValidListAndQueue+0x5c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d120      	bne.n	8003702 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <prvCheckForValidListAndQueue+0x60>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fe fb88 	bl	8001dd8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <prvCheckForValidListAndQueue+0x64>)
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7fe fb84 	bl	8001dd8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <prvCheckForValidListAndQueue+0x68>)
 80036d2:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <prvCheckForValidListAndQueue+0x60>)
 80036d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <prvCheckForValidListAndQueue+0x6c>)
 80036d8:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <prvCheckForValidListAndQueue+0x64>)
 80036da:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80036dc:	2200      	movs	r2, #0
 80036de:	210c      	movs	r1, #12
 80036e0:	2005      	movs	r0, #5
 80036e2:	f7fe fc89 	bl	8001ff8 <xQueueGenericCreate>
 80036e6:	0002      	movs	r2, r0
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <prvCheckForValidListAndQueue+0x5c>)
 80036ea:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80036ec:	4b07      	ldr	r3, [pc, #28]	; (800370c <prvCheckForValidListAndQueue+0x5c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <prvCheckForValidListAndQueue+0x52>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <prvCheckForValidListAndQueue+0x5c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a09      	ldr	r2, [pc, #36]	; (8003720 <prvCheckForValidListAndQueue+0x70>)
 80036fa:	0011      	movs	r1, r2
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fe fe4f 	bl	80023a0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003702:	f000 f8bf 	bl	8003884 <vPortExitCritical>
    }
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200001d4 	.word	0x200001d4
 8003710:	200001a4 	.word	0x200001a4
 8003714:	200001b8 	.word	0x200001b8
 8003718:	200001cc 	.word	0x200001cc
 800371c:	200001d0 	.word	0x200001d0
 8003720:	080049a0 	.word	0x080049a0

08003724 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3b04      	subs	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	0452      	lsls	r2, r2, #17
 800373c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b04      	subs	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3b04      	subs	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8003750:	4a08      	ldr	r2, [pc, #32]	; (8003774 <pxPortInitialiseStack+0x50>)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b14      	subs	r3, #20
 800375a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3b20      	subs	r3, #32
 8003766:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003768:	68fb      	ldr	r3, [r7, #12]
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	08003779 	.word	0x08003779

08003778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <prvTaskExitError+0x2c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	d001      	beq.n	800378e <prvTaskExitError+0x16>
 800378a:	b672      	cpsid	i
 800378c:	e7fe      	b.n	800378c <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800378e:	b672      	cpsid	i

    while( ulDummy == 0 )
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0fc      	beq.n	8003792 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b002      	add	sp, #8
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20000010 	.word	0x20000010

080037a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80037c0:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <pxCurrentTCBConst2>)
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	3020      	adds	r0, #32
 80037c8:	f380 8809 	msr	PSP, r0
 80037cc:	2002      	movs	r0, #2
 80037ce:	f380 8814 	msr	CONTROL, r0
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80037d8:	46ae      	mov	lr, r5
 80037da:	bc08      	pop	{r3}
 80037dc:	bc04      	pop	{r2}
 80037de:	b662      	cpsie	i
 80037e0:	4718      	bx	r3
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46c0      	nop			; (mov r8, r8)

080037f0 <pxCurrentTCBConst2>:
 80037f0:	200000a0 	.word	0x200000a0
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46c0      	nop			; (mov r8, r8)

080037f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <xPortStartScheduler+0x40>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <xPortStartScheduler+0x40>)
 8003802:	21ff      	movs	r1, #255	; 0xff
 8003804:	0409      	lsls	r1, r1, #16
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <xPortStartScheduler+0x40>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <xPortStartScheduler+0x40>)
 8003810:	21ff      	movs	r1, #255	; 0xff
 8003812:	0609      	lsls	r1, r1, #24
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003818:	f000 f898 	bl	800394c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <xPortStartScheduler+0x44>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8003822:	f7ff ffcd 	bl	80037c0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003826:	f7ff f9ed 	bl	8002c04 <vTaskSwitchContext>
    prvTaskExitError();
 800382a:	f7ff ffa5 	bl	8003778 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	e000ed20 	.word	0xe000ed20
 800383c:	20000010 	.word	0x20000010

08003840 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <vPortYield+0x1c>)
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	0552      	lsls	r2, r2, #21
 800384a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800384c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003850:	f3bf 8f6f 	isb	sy
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003864:	b672      	cpsid	i
    uxCriticalNesting++;
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <vPortEnterCritical+0x20>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <vPortEnterCritical+0x20>)
 800386e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003870:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003874:	f3bf 8f6f 	isb	sy
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000010 	.word	0x20000010

08003884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <vPortExitCritical+0x2c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <vPortExitCritical+0x10>
 8003890:	b672      	cpsid	i
 8003892:	e7fe      	b.n	8003892 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <vPortExitCritical+0x2c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1e5a      	subs	r2, r3, #1
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <vPortExitCritical+0x2c>)
 800389c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800389e:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <vPortExitCritical+0x2c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d100      	bne.n	80038a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80038a6:	b662      	cpsie	i
    }
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	20000010 	.word	0x20000010

080038b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80038b4:	f3ef 8010 	mrs	r0, PRIMASK
 80038b8:	b672      	cpsid	i
 80038ba:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	0018      	movs	r0, r3

080038c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80038c0:	f380 8810 	msr	PRIMASK, r0
 80038c4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80038c6:	46c0      	nop			; (mov r8, r8)
	...

080038d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80038d0:	f3ef 8009 	mrs	r0, PSP
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <pxCurrentTCBConst>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	3820      	subs	r0, #32
 80038da:	6010      	str	r0, [r2, #0]
 80038dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80038de:	4644      	mov	r4, r8
 80038e0:	464d      	mov	r5, r9
 80038e2:	4656      	mov	r6, sl
 80038e4:	465f      	mov	r7, fp
 80038e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80038e8:	b508      	push	{r3, lr}
 80038ea:	b672      	cpsid	i
 80038ec:	f7ff f98a 	bl	8002c04 <vTaskSwitchContext>
 80038f0:	b662      	cpsie	i
 80038f2:	bc0c      	pop	{r2, r3}
 80038f4:	6811      	ldr	r1, [r2, #0]
 80038f6:	6808      	ldr	r0, [r1, #0]
 80038f8:	3010      	adds	r0, #16
 80038fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80038fc:	46a0      	mov	r8, r4
 80038fe:	46a9      	mov	r9, r5
 8003900:	46b2      	mov	sl, r6
 8003902:	46bb      	mov	fp, r7
 8003904:	f380 8809 	msr	PSP, r0
 8003908:	3820      	subs	r0, #32
 800390a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800390c:	4718      	bx	r3
 800390e:	46c0      	nop			; (mov r8, r8)

08003910 <pxCurrentTCBConst>:
 8003910:	200000a0 	.word	0x200000a0
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46c0      	nop			; (mov r8, r8)

08003918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800391e:	f7ff ffc9 	bl	80038b4 <ulSetInterruptMaskFromISR>
 8003922:	0003      	movs	r3, r0
 8003924:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003926:	f7ff f861 	bl	80029ec <xTaskIncrementTick>
 800392a:	1e03      	subs	r3, r0, #0
 800392c:	d003      	beq.n	8003936 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <SysTick_Handler+0x30>)
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	0552      	lsls	r2, r2, #21
 8003934:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7ff ffc1 	bl	80038c0 <vClearInterruptMaskFromISR>
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <vPortSetupTimerInterrupt+0x38>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <vPortSetupTimerInterrupt+0x3c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	22fa      	movs	r2, #250	; 0xfa
 8003962:	0091      	lsls	r1, r2, #2
 8003964:	0018      	movs	r0, r3
 8003966:	f7fc fbd7 	bl	8000118 <__udivsi3>
 800396a:	0003      	movs	r3, r0
 800396c:	001a      	movs	r2, r3
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <vPortSetupTimerInterrupt+0x40>)
 8003970:	3a01      	subs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8003974:	4b02      	ldr	r3, [pc, #8]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003976:	2207      	movs	r2, #7
 8003978:	601a      	str	r2, [r3, #0]
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	e000e010 	.word	0xe000e010
 8003984:	e000e018 	.word	0xe000e018
 8003988:	20000000 	.word	0x20000000
 800398c:	e000e014 	.word	0xe000e014

08003990 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 800399c:	f7fe ff24 	bl	80027e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80039a0:	4b55      	ldr	r3, [pc, #340]	; (8003af8 <pvPortMalloc+0x168>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80039a8:	f000 f900 	bl	8003bac <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <pvPortMalloc+0x16c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4013      	ands	r3, r2
 80039b4:	d000      	beq.n	80039b8 <pvPortMalloc+0x28>
 80039b6:	e092      	b.n	8003ade <pvPortMalloc+0x14e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d022      	beq.n	8003a04 <pvPortMalloc+0x74>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80039be:	2208      	movs	r2, #8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	18d3      	adds	r3, r2, r3
            if( ( xWantedSize > 0 ) &&
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d21c      	bcs.n	8003a04 <pvPortMalloc+0x74>
            {
                xWantedSize += xHeapStructSize;
 80039ca:	2208      	movs	r2, #8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2207      	movs	r2, #7
 80039d6:	4013      	ands	r3, r2
 80039d8:	d017      	beq.n	8003a0a <pvPortMalloc+0x7a>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2207      	movs	r2, #7
 80039de:	4393      	bics	r3, r2
 80039e0:	3308      	adds	r3, #8
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d20a      	bcs.n	80039fe <pvPortMalloc+0x6e>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2207      	movs	r2, #7
 80039ec:	4393      	bics	r3, r2
 80039ee:	3308      	adds	r3, #8
 80039f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2207      	movs	r2, #7
 80039f6:	4013      	ands	r3, r2
 80039f8:	d007      	beq.n	8003a0a <pvPortMalloc+0x7a>
 80039fa:	b672      	cpsid	i
 80039fc:	e7fe      	b.n	80039fc <pvPortMalloc+0x6c>
                    }
                    else
                    {
                        xWantedSize = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a02:	e002      	b.n	8003a0a <pvPortMalloc+0x7a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	e000      	b.n	8003a0c <pvPortMalloc+0x7c>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a0a:	46c0      	nop			; (mov r8, r8)
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d065      	beq.n	8003ade <pvPortMalloc+0x14e>
 8003a12:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <pvPortMalloc+0x170>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d860      	bhi.n	8003ade <pvPortMalloc+0x14e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003a1c:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <pvPortMalloc+0x174>)
 8003a1e:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003a20:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <pvPortMalloc+0x174>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a26:	e004      	b.n	8003a32 <pvPortMalloc+0xa2>
                {
                    pxPreviousBlock = pxBlock;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d903      	bls.n	8003a44 <pvPortMalloc+0xb4>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f1      	bne.n	8003a28 <pvPortMalloc+0x98>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003a44:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <pvPortMalloc+0x168>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d047      	beq.n	8003ade <pvPortMalloc+0x14e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2208      	movs	r2, #8
 8003a54:	189b      	adds	r3, r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	1ad2      	subs	r2, r2, r3
 8003a68:	2308      	movs	r3, #8
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d916      	bls.n	8003a9e <pvPortMalloc+0x10e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	18d3      	adds	r3, r2, r3
 8003a76:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d001      	beq.n	8003a84 <pvPortMalloc+0xf4>
 8003a80:	b672      	cpsid	i
 8003a82:	e7fe      	b.n	8003a82 <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 f8e7 	bl	8003c6c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a9e:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <pvPortMalloc+0x170>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <pvPortMalloc+0x170>)
 8003aaa:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003aac:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <pvPortMalloc+0x170>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <pvPortMalloc+0x178>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d203      	bcs.n	8003ac0 <pvPortMalloc+0x130>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <pvPortMalloc+0x170>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <pvPortMalloc+0x178>)
 8003abe:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <pvPortMalloc+0x16c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <pvPortMalloc+0x17c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <pvPortMalloc+0x17c>)
 8003adc:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003ade:	f7fe fe8f 	bl	8002800 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d001      	beq.n	8003aee <pvPortMalloc+0x15e>
 8003aea:	b672      	cpsid	i
 8003aec:	e7fe      	b.n	8003aec <pvPortMalloc+0x15c>
    return pvReturn;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b006      	add	sp, #24
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20001b4c 	.word	0x20001b4c
 8003afc:	20001b60 	.word	0x20001b60
 8003b00:	20001b50 	.word	0x20001b50
 8003b04:	20001b44 	.word	0x20001b44
 8003b08:	20001b54 	.word	0x20001b54
 8003b0c:	20001b58 	.word	0x20001b58

08003b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03a      	beq.n	8003b98 <vPortFree+0x88>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003b22:	2308      	movs	r3, #8
 8003b24:	425b      	negs	r3, r3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	18d3      	adds	r3, r2, r3
 8003b2a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <vPortFree+0x90>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <vPortFree+0x30>
 8003b3c:	b672      	cpsid	i
 8003b3e:	e7fe      	b.n	8003b3e <vPortFree+0x2e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <vPortFree+0x3c>
 8003b48:	b672      	cpsid	i
 8003b4a:	e7fe      	b.n	8003b4a <vPortFree+0x3a>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <vPortFree+0x90>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4013      	ands	r3, r2
 8003b56:	d01f      	beq.n	8003b98 <vPortFree+0x88>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11b      	bne.n	8003b98 <vPortFree+0x88>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <vPortFree+0x90>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003b70:	f7fe fe3a 	bl	80027e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <vPortFree+0x94>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	18d2      	adds	r2, r2, r3
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <vPortFree+0x94>)
 8003b80:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 f871 	bl	8003c6c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <vPortFree+0x98>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <vPortFree+0x98>)
 8003b92:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8003b94:	f7fe fe34 	bl	8002800 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b004      	add	sp, #16
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20001b60 	.word	0x20001b60
 8003ba4:	20001b50 	.word	0x20001b50
 8003ba8:	20001b5c 	.word	0x20001b5c

08003bac <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bb2:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <prvHeapInit+0xa4>)
 8003bb4:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003bb6:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <prvHeapInit+0xa8>)
 8003bb8:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00c      	beq.n	8003bdc <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3307      	adds	r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2207      	movs	r2, #7
 8003bcc:	4393      	bics	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <prvHeapInit+0xa8>)
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <prvHeapInit+0xac>)
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003be6:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <prvHeapInit+0xac>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	18d3      	adds	r3, r2, r3
 8003bf2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2207      	movs	r2, #7
 8003c00:	4393      	bics	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <prvHeapInit+0xb0>)
 8003c08:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <prvHeapInit+0xb0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <prvHeapInit+0xb0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <prvHeapInit+0xb0>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <prvHeapInit+0xb4>)
 8003c36:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <prvHeapInit+0xb8>)
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <prvHeapInit+0xbc>)
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	0612      	lsls	r2, r2, #24
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b004      	add	sp, #16
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	00001964 	.word	0x00001964
 8003c54:	200001e0 	.word	0x200001e0
 8003c58:	20001b44 	.word	0x20001b44
 8003c5c:	20001b4c 	.word	0x20001b4c
 8003c60:	20001b54 	.word	0x20001b54
 8003c64:	20001b50 	.word	0x20001b50
 8003c68:	20001b60 	.word	0x20001b60

08003c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <prvInsertBlockIntoFreeList+0xa8>)
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e002      	b.n	8003c80 <prvInsertBlockIntoFreeList+0x14>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d8f7      	bhi.n	8003c7a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d108      	bne.n	8003cae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	18d2      	adds	r2, r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	18d2      	adds	r2, r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d118      	bne.n	8003cf4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <prvInsertBlockIntoFreeList+0xac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d00d      	beq.n	8003cea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	18d2      	adds	r2, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e008      	b.n	8003cfc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <prvInsertBlockIntoFreeList+0xac>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e003      	b.n	8003cfc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d002      	beq.n	8003d0a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	20001b44 	.word	0x20001b44
 8003d18:	20001b4c 	.word	0x20001b4c

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	2600      	movs	r6, #0
 8003d20:	4d0c      	ldr	r5, [pc, #48]	; (8003d54 <__libc_init_array+0x38>)
 8003d22:	4c0d      	ldr	r4, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	f000 fe03 	bl	8004938 <_init>
 8003d32:	4d0a      	ldr	r5, [pc, #40]	; (8003d5c <__libc_init_array+0x40>)
 8003d34:	4c0a      	ldr	r4, [pc, #40]	; (8003d60 <__libc_init_array+0x44>)
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	00b3      	lsls	r3, r6, #2
 8003d42:	58eb      	ldr	r3, [r5, r3]
 8003d44:	4798      	blx	r3
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	00b3      	lsls	r3, r6, #2
 8003d4c:	58eb      	ldr	r3, [r5, r3]
 8003d4e:	4798      	blx	r3
 8003d50:	3601      	adds	r6, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	08004a7c 	.word	0x08004a7c
 8003d58:	08004a7c 	.word	0x08004a7c
 8003d5c:	08004a7c 	.word	0x08004a7c
 8003d60:	08004a80 	.word	0x08004a80

08003d64 <memcpy>:
 8003d64:	2300      	movs	r3, #0
 8003d66:	b510      	push	{r4, lr}
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d100      	bne.n	8003d6e <memcpy+0xa>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	5ccc      	ldrb	r4, [r1, r3]
 8003d70:	54c4      	strb	r4, [r0, r3]
 8003d72:	3301      	adds	r3, #1
 8003d74:	e7f8      	b.n	8003d68 <memcpy+0x4>

08003d76 <memset>:
 8003d76:	0003      	movs	r3, r0
 8003d78:	1882      	adds	r2, r0, r2
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d100      	bne.n	8003d80 <memset+0xa>
 8003d7e:	4770      	bx	lr
 8003d80:	7019      	strb	r1, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	e7f9      	b.n	8003d7a <memset+0x4>
	...

08003d88 <findslot>:
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <findslot+0x2c>)
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	0004      	movs	r4, r0
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d004      	beq.n	8003d9e <findslot+0x16>
 8003d94:	6983      	ldr	r3, [r0, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <findslot+0x16>
 8003d9a:	f000 faf9 	bl	8004390 <__sinit>
 8003d9e:	2000      	movs	r0, #0
 8003da0:	2c13      	cmp	r4, #19
 8003da2:	d805      	bhi.n	8003db0 <findslot+0x28>
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <findslot+0x30>)
 8003da6:	00e4      	lsls	r4, r4, #3
 8003da8:	58e2      	ldr	r2, [r4, r3]
 8003daa:	3201      	adds	r2, #1
 8003dac:	d000      	beq.n	8003db0 <findslot+0x28>
 8003dae:	18e0      	adds	r0, r4, r3
 8003db0:	bd10      	pop	{r4, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	20000014 	.word	0x20000014
 8003db8:	20001b74 	.word	0x20001b74

08003dbc <checkerror>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	0004      	movs	r4, r0
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d109      	bne.n	8003dd8 <checkerror+0x1c>
 8003dc4:	f000 fa7c 	bl	80042c0 <__errno>
 8003dc8:	2613      	movs	r6, #19
 8003dca:	0005      	movs	r5, r0
 8003dcc:	2700      	movs	r7, #0
 8003dce:	1c30      	adds	r0, r6, #0
 8003dd0:	1c39      	adds	r1, r7, #0
 8003dd2:	beab      	bkpt	0x00ab
 8003dd4:	1c06      	adds	r6, r0, #0
 8003dd6:	602e      	str	r6, [r5, #0]
 8003dd8:	0020      	movs	r0, r4
 8003dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ddc <error>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	0004      	movs	r4, r0
 8003de0:	f000 fa6e 	bl	80042c0 <__errno>
 8003de4:	2613      	movs	r6, #19
 8003de6:	0005      	movs	r5, r0
 8003de8:	2700      	movs	r7, #0
 8003dea:	1c30      	adds	r0, r6, #0
 8003dec:	1c39      	adds	r1, r7, #0
 8003dee:	beab      	bkpt	0x00ab
 8003df0:	1c06      	adds	r6, r0, #0
 8003df2:	602e      	str	r6, [r5, #0]
 8003df4:	0020      	movs	r0, r4
 8003df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003df8 <_swiread>:
 8003df8:	b530      	push	{r4, r5, lr}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	ad01      	add	r5, sp, #4
 8003dfe:	9001      	str	r0, [sp, #4]
 8003e00:	9102      	str	r1, [sp, #8]
 8003e02:	9203      	str	r2, [sp, #12]
 8003e04:	2406      	movs	r4, #6
 8003e06:	1c20      	adds	r0, r4, #0
 8003e08:	1c29      	adds	r1, r5, #0
 8003e0a:	beab      	bkpt	0x00ab
 8003e0c:	1c04      	adds	r4, r0, #0
 8003e0e:	0020      	movs	r0, r4
 8003e10:	f7ff ffd4 	bl	8003dbc <checkerror>
 8003e14:	b005      	add	sp, #20
 8003e16:	bd30      	pop	{r4, r5, pc}

08003e18 <_read>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	000e      	movs	r6, r1
 8003e1c:	0015      	movs	r5, r2
 8003e1e:	f7ff ffb3 	bl	8003d88 <findslot>
 8003e22:	1e04      	subs	r4, r0, #0
 8003e24:	d106      	bne.n	8003e34 <_read+0x1c>
 8003e26:	f000 fa4b 	bl	80042c0 <__errno>
 8003e2a:	2309      	movs	r3, #9
 8003e2c:	6003      	str	r3, [r0, #0]
 8003e2e:	2001      	movs	r0, #1
 8003e30:	4240      	negs	r0, r0
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	002a      	movs	r2, r5
 8003e36:	0031      	movs	r1, r6
 8003e38:	6800      	ldr	r0, [r0, #0]
 8003e3a:	f7ff ffdd 	bl	8003df8 <_swiread>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	d0f7      	beq.n	8003e32 <_read+0x1a>
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	1a28      	subs	r0, r5, r0
 8003e46:	181b      	adds	r3, r3, r0
 8003e48:	6063      	str	r3, [r4, #4]
 8003e4a:	e7f2      	b.n	8003e32 <_read+0x1a>

08003e4c <_swilseek>:
 8003e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4e:	000c      	movs	r4, r1
 8003e50:	0016      	movs	r6, r2
 8003e52:	f7ff ff99 	bl	8003d88 <findslot>
 8003e56:	1e05      	subs	r5, r0, #0
 8003e58:	d107      	bne.n	8003e6a <_swilseek+0x1e>
 8003e5a:	f000 fa31 	bl	80042c0 <__errno>
 8003e5e:	2309      	movs	r3, #9
 8003e60:	6003      	str	r3, [r0, #0]
 8003e62:	2401      	movs	r4, #1
 8003e64:	4264      	negs	r4, r4
 8003e66:	0020      	movs	r0, r4
 8003e68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e6a:	2e02      	cmp	r6, #2
 8003e6c:	d903      	bls.n	8003e76 <_swilseek+0x2a>
 8003e6e:	f000 fa27 	bl	80042c0 <__errno>
 8003e72:	2316      	movs	r3, #22
 8003e74:	e7f4      	b.n	8003e60 <_swilseek+0x14>
 8003e76:	2e01      	cmp	r6, #1
 8003e78:	d112      	bne.n	8003ea0 <_swilseek+0x54>
 8003e7a:	6843      	ldr	r3, [r0, #4]
 8003e7c:	18e4      	adds	r4, r4, r3
 8003e7e:	d4f6      	bmi.n	8003e6e <_swilseek+0x22>
 8003e80:	466f      	mov	r7, sp
 8003e82:	682b      	ldr	r3, [r5, #0]
 8003e84:	260a      	movs	r6, #10
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	607c      	str	r4, [r7, #4]
 8003e8a:	1c30      	adds	r0, r6, #0
 8003e8c:	1c39      	adds	r1, r7, #0
 8003e8e:	beab      	bkpt	0x00ab
 8003e90:	1c06      	adds	r6, r0, #0
 8003e92:	0030      	movs	r0, r6
 8003e94:	f7ff ff92 	bl	8003dbc <checkerror>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	dbe2      	blt.n	8003e62 <_swilseek+0x16>
 8003e9c:	606c      	str	r4, [r5, #4]
 8003e9e:	e7e2      	b.n	8003e66 <_swilseek+0x1a>
 8003ea0:	2e02      	cmp	r6, #2
 8003ea2:	d1ed      	bne.n	8003e80 <_swilseek+0x34>
 8003ea4:	6803      	ldr	r3, [r0, #0]
 8003ea6:	466f      	mov	r7, sp
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	360a      	adds	r6, #10
 8003eac:	1c30      	adds	r0, r6, #0
 8003eae:	1c39      	adds	r1, r7, #0
 8003eb0:	beab      	bkpt	0x00ab
 8003eb2:	1c06      	adds	r6, r0, #0
 8003eb4:	0030      	movs	r0, r6
 8003eb6:	f7ff ff81 	bl	8003dbc <checkerror>
 8003eba:	1824      	adds	r4, r4, r0
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d1df      	bne.n	8003e80 <_swilseek+0x34>
 8003ec0:	e7cf      	b.n	8003e62 <_swilseek+0x16>

08003ec2 <_lseek>:
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	f7ff ffc2 	bl	8003e4c <_swilseek>
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <_swiwrite>:
 8003eca:	b530      	push	{r4, r5, lr}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	ad01      	add	r5, sp, #4
 8003ed0:	9001      	str	r0, [sp, #4]
 8003ed2:	9102      	str	r1, [sp, #8]
 8003ed4:	9203      	str	r2, [sp, #12]
 8003ed6:	2405      	movs	r4, #5
 8003ed8:	1c20      	adds	r0, r4, #0
 8003eda:	1c29      	adds	r1, r5, #0
 8003edc:	beab      	bkpt	0x00ab
 8003ede:	1c04      	adds	r4, r0, #0
 8003ee0:	0020      	movs	r0, r4
 8003ee2:	f7ff ff6b 	bl	8003dbc <checkerror>
 8003ee6:	b005      	add	sp, #20
 8003ee8:	bd30      	pop	{r4, r5, pc}

08003eea <_write>:
 8003eea:	b570      	push	{r4, r5, r6, lr}
 8003eec:	000e      	movs	r6, r1
 8003eee:	0015      	movs	r5, r2
 8003ef0:	f7ff ff4a 	bl	8003d88 <findslot>
 8003ef4:	1e04      	subs	r4, r0, #0
 8003ef6:	d106      	bne.n	8003f06 <_write+0x1c>
 8003ef8:	f000 f9e2 	bl	80042c0 <__errno>
 8003efc:	2309      	movs	r3, #9
 8003efe:	6003      	str	r3, [r0, #0]
 8003f00:	2001      	movs	r0, #1
 8003f02:	4240      	negs	r0, r0
 8003f04:	e00f      	b.n	8003f26 <_write+0x3c>
 8003f06:	002a      	movs	r2, r5
 8003f08:	0031      	movs	r1, r6
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	f7ff ffdd 	bl	8003eca <_swiwrite>
 8003f10:	1e03      	subs	r3, r0, #0
 8003f12:	dbf5      	blt.n	8003f00 <_write+0x16>
 8003f14:	6862      	ldr	r2, [r4, #4]
 8003f16:	1a28      	subs	r0, r5, r0
 8003f18:	1812      	adds	r2, r2, r0
 8003f1a:	6062      	str	r2, [r4, #4]
 8003f1c:	42ab      	cmp	r3, r5
 8003f1e:	d102      	bne.n	8003f26 <_write+0x3c>
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7ff ff5b 	bl	8003ddc <error>
 8003f26:	bd70      	pop	{r4, r5, r6, pc}

08003f28 <_swiclose>:
 8003f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f2a:	2402      	movs	r4, #2
 8003f2c:	9001      	str	r0, [sp, #4]
 8003f2e:	ad01      	add	r5, sp, #4
 8003f30:	1c20      	adds	r0, r4, #0
 8003f32:	1c29      	adds	r1, r5, #0
 8003f34:	beab      	bkpt	0x00ab
 8003f36:	1c04      	adds	r4, r0, #0
 8003f38:	0020      	movs	r0, r4
 8003f3a:	f7ff ff3f 	bl	8003dbc <checkerror>
 8003f3e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08003f40 <_close>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	0005      	movs	r5, r0
 8003f44:	f7ff ff20 	bl	8003d88 <findslot>
 8003f48:	1e04      	subs	r4, r0, #0
 8003f4a:	d106      	bne.n	8003f5a <_close+0x1a>
 8003f4c:	f000 f9b8 	bl	80042c0 <__errno>
 8003f50:	2309      	movs	r3, #9
 8003f52:	6003      	str	r3, [r0, #0]
 8003f54:	2001      	movs	r0, #1
 8003f56:	4240      	negs	r0, r0
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
 8003f5a:	3d01      	subs	r5, #1
 8003f5c:	2d01      	cmp	r5, #1
 8003f5e:	d809      	bhi.n	8003f74 <_close+0x34>
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <_close+0x48>)
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d104      	bne.n	8003f74 <_close+0x34>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	425b      	negs	r3, r3
 8003f6e:	6003      	str	r3, [r0, #0]
 8003f70:	2000      	movs	r0, #0
 8003f72:	e7f1      	b.n	8003f58 <_close+0x18>
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	f7ff ffd7 	bl	8003f28 <_swiclose>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d1ec      	bne.n	8003f58 <_close+0x18>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	425b      	negs	r3, r3
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	e7e8      	b.n	8003f58 <_close+0x18>
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	20001b74 	.word	0x20001b74

08003f8c <_sbrk>:
 8003f8c:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <_sbrk+0x3c>)
 8003f8e:	0003      	movs	r3, r0
 8003f90:	6811      	ldr	r1, [r2, #0]
 8003f92:	b510      	push	{r4, lr}
 8003f94:	2900      	cmp	r1, #0
 8003f96:	d101      	bne.n	8003f9c <_sbrk+0x10>
 8003f98:	490c      	ldr	r1, [pc, #48]	; (8003fcc <_sbrk+0x40>)
 8003f9a:	6011      	str	r1, [r2, #0]
 8003f9c:	4669      	mov	r1, sp
 8003f9e:	6810      	ldr	r0, [r2, #0]
 8003fa0:	18c3      	adds	r3, r0, r3
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d806      	bhi.n	8003fb4 <_sbrk+0x28>
 8003fa6:	490a      	ldr	r1, [pc, #40]	; (8003fd0 <_sbrk+0x44>)
 8003fa8:	4c0a      	ldr	r4, [pc, #40]	; (8003fd4 <_sbrk+0x48>)
 8003faa:	6809      	ldr	r1, [r1, #0]
 8003fac:	42a1      	cmp	r1, r4
 8003fae:	d008      	beq.n	8003fc2 <_sbrk+0x36>
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	d906      	bls.n	8003fc2 <_sbrk+0x36>
 8003fb4:	f000 f984 	bl	80042c0 <__errno>
 8003fb8:	230c      	movs	r3, #12
 8003fba:	6003      	str	r3, [r0, #0]
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	4240      	negs	r0, r0
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e7fc      	b.n	8003fc0 <_sbrk+0x34>
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	20001b64 	.word	0x20001b64
 8003fcc:	20001cb0 	.word	0x20001cb0
 8003fd0:	20000078 	.word	0x20000078
 8003fd4:	cafedead 	.word	0xcafedead

08003fd8 <_swistat>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	000c      	movs	r4, r1
 8003fdc:	f7ff fed4 	bl	8003d88 <findslot>
 8003fe0:	1e05      	subs	r5, r0, #0
 8003fe2:	d106      	bne.n	8003ff2 <_swistat+0x1a>
 8003fe4:	f000 f96c 	bl	80042c0 <__errno>
 8003fe8:	2309      	movs	r3, #9
 8003fea:	6003      	str	r3, [r0, #0]
 8003fec:	2001      	movs	r0, #1
 8003fee:	4240      	negs	r0, r0
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	6862      	ldr	r2, [r4, #4]
 8003ff6:	019b      	lsls	r3, r3, #6
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	6063      	str	r3, [r4, #4]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	260c      	movs	r6, #12
 8004002:	64a3      	str	r3, [r4, #72]	; 0x48
 8004004:	1c30      	adds	r0, r6, #0
 8004006:	1c29      	adds	r1, r5, #0
 8004008:	beab      	bkpt	0x00ab
 800400a:	1c05      	adds	r5, r0, #0
 800400c:	0028      	movs	r0, r5
 800400e:	f7ff fed5 	bl	8003dbc <checkerror>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	d0ec      	beq.n	8003ff0 <_swistat+0x18>
 8004016:	6120      	str	r0, [r4, #16]
 8004018:	2000      	movs	r0, #0
 800401a:	e7e9      	b.n	8003ff0 <_swistat+0x18>

0800401c <_stat>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	000d      	movs	r5, r1
 8004020:	0004      	movs	r4, r0
 8004022:	2258      	movs	r2, #88	; 0x58
 8004024:	2100      	movs	r1, #0
 8004026:	0028      	movs	r0, r5
 8004028:	f7ff fea5 	bl	8003d76 <memset>
 800402c:	0020      	movs	r0, r4
 800402e:	2100      	movs	r1, #0
 8004030:	f000 f812 	bl	8004058 <_swiopen>
 8004034:	0004      	movs	r4, r0
 8004036:	1c43      	adds	r3, r0, #1
 8004038:	d00c      	beq.n	8004054 <_stat+0x38>
 800403a:	2381      	movs	r3, #129	; 0x81
 800403c:	686a      	ldr	r2, [r5, #4]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	4313      	orrs	r3, r2
 8004042:	0029      	movs	r1, r5
 8004044:	606b      	str	r3, [r5, #4]
 8004046:	f7ff ffc7 	bl	8003fd8 <_swistat>
 800404a:	0005      	movs	r5, r0
 800404c:	0020      	movs	r0, r4
 800404e:	f7ff ff77 	bl	8003f40 <_close>
 8004052:	002c      	movs	r4, r5
 8004054:	0020      	movs	r0, r4
 8004056:	bd70      	pop	{r4, r5, r6, pc}

08004058 <_swiopen>:
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	000d      	movs	r5, r1
 800405c:	2600      	movs	r6, #0
 800405e:	b099      	sub	sp, #100	; 0x64
 8004060:	9000      	str	r0, [sp, #0]
 8004062:	00f3      	lsls	r3, r6, #3
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	4b29      	ldr	r3, [pc, #164]	; (800410c <_swiopen+0xb4>)
 8004068:	00f2      	lsls	r2, r6, #3
 800406a:	589c      	ldr	r4, [r3, r2]
 800406c:	1c63      	adds	r3, r4, #1
 800406e:	d038      	beq.n	80040e2 <_swiopen+0x8a>
 8004070:	3601      	adds	r6, #1
 8004072:	2e14      	cmp	r6, #20
 8004074:	d1f5      	bne.n	8004062 <_swiopen+0xa>
 8004076:	f000 f923 	bl	80042c0 <__errno>
 800407a:	2401      	movs	r4, #1
 800407c:	2318      	movs	r3, #24
 800407e:	4264      	negs	r4, r4
 8004080:	6003      	str	r3, [r0, #0]
 8004082:	e03f      	b.n	8004104 <_swiopen+0xac>
 8004084:	2302      	movs	r3, #2
 8004086:	03ec      	lsls	r4, r5, #15
 8004088:	0fe4      	lsrs	r4, r4, #31
 800408a:	421d      	tst	r5, r3
 800408c:	d000      	beq.n	8004090 <_swiopen+0x38>
 800408e:	431c      	orrs	r4, r3
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <_swiopen+0xb8>)
 8004092:	421d      	tst	r5, r3
 8004094:	d001      	beq.n	800409a <_swiopen+0x42>
 8004096:	2304      	movs	r3, #4
 8004098:	431c      	orrs	r4, r3
 800409a:	2308      	movs	r3, #8
 800409c:	421d      	tst	r5, r3
 800409e:	d002      	beq.n	80040a6 <_swiopen+0x4e>
 80040a0:	2204      	movs	r2, #4
 80040a2:	4394      	bics	r4, r2
 80040a4:	431c      	orrs	r4, r3
 80040a6:	9b00      	ldr	r3, [sp, #0]
 80040a8:	0018      	movs	r0, r3
 80040aa:	9302      	str	r3, [sp, #8]
 80040ac:	f7fc f82c 	bl	8000108 <strlen>
 80040b0:	607c      	str	r4, [r7, #4]
 80040b2:	60b8      	str	r0, [r7, #8]
 80040b4:	2401      	movs	r4, #1
 80040b6:	1c20      	adds	r0, r4, #0
 80040b8:	1c39      	adds	r1, r7, #0
 80040ba:	beab      	bkpt	0x00ab
 80040bc:	1c07      	adds	r7, r0, #0
 80040be:	2f00      	cmp	r7, #0
 80040c0:	db0a      	blt.n	80040d8 <_swiopen+0x80>
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <_swiopen+0xb4>)
 80040c4:	00f2      	lsls	r2, r6, #3
 80040c6:	509f      	str	r7, [r3, r2]
 80040c8:	0013      	movs	r3, r2
 80040ca:	4a10      	ldr	r2, [pc, #64]	; (800410c <_swiopen+0xb4>)
 80040cc:	0034      	movs	r4, r6
 80040ce:	4694      	mov	ip, r2
 80040d0:	2200      	movs	r2, #0
 80040d2:	4463      	add	r3, ip
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	e015      	b.n	8004104 <_swiopen+0xac>
 80040d8:	0038      	movs	r0, r7
 80040da:	f7ff fe7f 	bl	8003ddc <error>
 80040de:	0004      	movs	r4, r0
 80040e0:	e010      	b.n	8004104 <_swiopen+0xac>
 80040e2:	23a0      	movs	r3, #160	; 0xa0
 80040e4:	002a      	movs	r2, r5
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	401a      	ands	r2, r3
 80040ea:	af02      	add	r7, sp, #8
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1c9      	bne.n	8004084 <_swiopen+0x2c>
 80040f0:	0039      	movs	r1, r7
 80040f2:	9800      	ldr	r0, [sp, #0]
 80040f4:	f7ff ff92 	bl	800401c <_stat>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d0c3      	beq.n	8004084 <_swiopen+0x2c>
 80040fc:	f000 f8e0 	bl	80042c0 <__errno>
 8004100:	2311      	movs	r3, #17
 8004102:	6003      	str	r3, [r0, #0]
 8004104:	0020      	movs	r0, r4
 8004106:	b019      	add	sp, #100	; 0x64
 8004108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	20001b74 	.word	0x20001b74
 8004110:	00000601 	.word	0x00000601

08004114 <_get_semihosting_exts>:
 8004114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004116:	b085      	sub	sp, #20
 8004118:	9000      	str	r0, [sp, #0]
 800411a:	9101      	str	r1, [sp, #4]
 800411c:	4827      	ldr	r0, [pc, #156]	; (80041bc <_get_semihosting_exts+0xa8>)
 800411e:	2100      	movs	r1, #0
 8004120:	0015      	movs	r5, r2
 8004122:	f7ff ff99 	bl	8004058 <_swiopen>
 8004126:	0004      	movs	r4, r0
 8004128:	002a      	movs	r2, r5
 800412a:	2100      	movs	r1, #0
 800412c:	9800      	ldr	r0, [sp, #0]
 800412e:	f7ff fe22 	bl	8003d76 <memset>
 8004132:	1c63      	adds	r3, r4, #1
 8004134:	d015      	beq.n	8004162 <_get_semihosting_exts+0x4e>
 8004136:	0020      	movs	r0, r4
 8004138:	f7ff fe26 	bl	8003d88 <findslot>
 800413c:	260c      	movs	r6, #12
 800413e:	0007      	movs	r7, r0
 8004140:	1c30      	adds	r0, r6, #0
 8004142:	1c39      	adds	r1, r7, #0
 8004144:	beab      	bkpt	0x00ab
 8004146:	1c06      	adds	r6, r0, #0
 8004148:	0030      	movs	r0, r6
 800414a:	f7ff fe37 	bl	8003dbc <checkerror>
 800414e:	2803      	cmp	r0, #3
 8004150:	dd02      	ble.n	8004158 <_get_semihosting_exts+0x44>
 8004152:	3803      	subs	r0, #3
 8004154:	42a8      	cmp	r0, r5
 8004156:	dc07      	bgt.n	8004168 <_get_semihosting_exts+0x54>
 8004158:	0020      	movs	r0, r4
 800415a:	2401      	movs	r4, #1
 800415c:	f7ff fef0 	bl	8003f40 <_close>
 8004160:	4264      	negs	r4, r4
 8004162:	0020      	movs	r0, r4
 8004164:	b005      	add	sp, #20
 8004166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004168:	ae03      	add	r6, sp, #12
 800416a:	2204      	movs	r2, #4
 800416c:	0031      	movs	r1, r6
 800416e:	0020      	movs	r0, r4
 8004170:	f7ff fe52 	bl	8003e18 <_read>
 8004174:	2803      	cmp	r0, #3
 8004176:	ddef      	ble.n	8004158 <_get_semihosting_exts+0x44>
 8004178:	7833      	ldrb	r3, [r6, #0]
 800417a:	2b53      	cmp	r3, #83	; 0x53
 800417c:	d1ec      	bne.n	8004158 <_get_semihosting_exts+0x44>
 800417e:	7873      	ldrb	r3, [r6, #1]
 8004180:	2b48      	cmp	r3, #72	; 0x48
 8004182:	d1e9      	bne.n	8004158 <_get_semihosting_exts+0x44>
 8004184:	78b3      	ldrb	r3, [r6, #2]
 8004186:	2b46      	cmp	r3, #70	; 0x46
 8004188:	d1e6      	bne.n	8004158 <_get_semihosting_exts+0x44>
 800418a:	78f3      	ldrb	r3, [r6, #3]
 800418c:	2b42      	cmp	r3, #66	; 0x42
 800418e:	d1e3      	bne.n	8004158 <_get_semihosting_exts+0x44>
 8004190:	2201      	movs	r2, #1
 8004192:	0020      	movs	r0, r4
 8004194:	9901      	ldr	r1, [sp, #4]
 8004196:	f7ff fe59 	bl	8003e4c <_swilseek>
 800419a:	2800      	cmp	r0, #0
 800419c:	dbdc      	blt.n	8004158 <_get_semihosting_exts+0x44>
 800419e:	002a      	movs	r2, r5
 80041a0:	9900      	ldr	r1, [sp, #0]
 80041a2:	0020      	movs	r0, r4
 80041a4:	f7ff fe38 	bl	8003e18 <_read>
 80041a8:	0005      	movs	r5, r0
 80041aa:	0020      	movs	r0, r4
 80041ac:	f7ff fec8 	bl	8003f40 <_close>
 80041b0:	0028      	movs	r0, r5
 80041b2:	f7ff fe03 	bl	8003dbc <checkerror>
 80041b6:	0004      	movs	r4, r0
 80041b8:	e7d3      	b.n	8004162 <_get_semihosting_exts+0x4e>
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	080049f8 	.word	0x080049f8

080041c0 <initialise_semihosting_exts>:
 80041c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041c2:	2401      	movs	r4, #1
 80041c4:	2100      	movs	r1, #0
 80041c6:	4e09      	ldr	r6, [pc, #36]	; (80041ec <initialise_semihosting_exts+0x2c>)
 80041c8:	4d09      	ldr	r5, [pc, #36]	; (80041f0 <initialise_semihosting_exts+0x30>)
 80041ca:	af01      	add	r7, sp, #4
 80041cc:	0022      	movs	r2, r4
 80041ce:	0038      	movs	r0, r7
 80041d0:	6031      	str	r1, [r6, #0]
 80041d2:	602c      	str	r4, [r5, #0]
 80041d4:	f7ff ff9e 	bl	8004114 <_get_semihosting_exts>
 80041d8:	2800      	cmp	r0, #0
 80041da:	dd05      	ble.n	80041e8 <initialise_semihosting_exts+0x28>
 80041dc:	2202      	movs	r2, #2
 80041de:	783b      	ldrb	r3, [r7, #0]
 80041e0:	401c      	ands	r4, r3
 80041e2:	4013      	ands	r3, r2
 80041e4:	6034      	str	r4, [r6, #0]
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	2000007c 	.word	0x2000007c
 80041f0:	20000080 	.word	0x20000080

080041f4 <_has_ext_stdout_stderr>:
 80041f4:	b510      	push	{r4, lr}
 80041f6:	4c04      	ldr	r4, [pc, #16]	; (8004208 <_has_ext_stdout_stderr+0x14>)
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	da01      	bge.n	8004202 <_has_ext_stdout_stderr+0xe>
 80041fe:	f7ff ffdf 	bl	80041c0 <initialise_semihosting_exts>
 8004202:	6820      	ldr	r0, [r4, #0]
 8004204:	bd10      	pop	{r4, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	20000080 	.word	0x20000080

0800420c <initialise_monitor_handles>:
 800420c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <initialise_monitor_handles+0xa0>)
 8004210:	b085      	sub	sp, #20
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	2500      	movs	r5, #0
 8004216:	2303      	movs	r3, #3
 8004218:	ac01      	add	r4, sp, #4
 800421a:	60a3      	str	r3, [r4, #8]
 800421c:	2701      	movs	r7, #1
 800421e:	6065      	str	r5, [r4, #4]
 8004220:	1c38      	adds	r0, r7, #0
 8004222:	1c21      	adds	r1, r4, #0
 8004224:	beab      	bkpt	0x00ab
 8004226:	1c07      	adds	r7, r0, #0
 8004228:	2101      	movs	r1, #1
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <initialise_monitor_handles+0xa4>)
 800422c:	4249      	negs	r1, r1
 800422e:	601f      	str	r7, [r3, #0]
 8004230:	002b      	movs	r3, r5
 8004232:	4d20      	ldr	r5, [pc, #128]	; (80042b4 <initialise_monitor_handles+0xa8>)
 8004234:	00da      	lsls	r2, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	50a9      	str	r1, [r5, r2]
 800423a:	2b14      	cmp	r3, #20
 800423c:	d1fa      	bne.n	8004234 <initialise_monitor_handles+0x28>
 800423e:	f7ff ffd9 	bl	80041f4 <_has_ext_stdout_stderr>
 8004242:	2800      	cmp	r0, #0
 8004244:	d018      	beq.n	8004278 <initialise_monitor_handles+0x6c>
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <initialise_monitor_handles+0xa0>)
 8004248:	2701      	movs	r7, #1
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	2303      	movs	r3, #3
 800424e:	60a3      	str	r3, [r4, #8]
 8004250:	3301      	adds	r3, #1
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	1c38      	adds	r0, r7, #0
 8004256:	1c21      	adds	r1, r4, #0
 8004258:	beab      	bkpt	0x00ab
 800425a:	1c06      	adds	r6, r0, #0
 800425c:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <initialise_monitor_handles+0xac>)
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <initialise_monitor_handles+0xa0>)
 8004260:	601e      	str	r6, [r3, #0]
 8004262:	2303      	movs	r3, #3
 8004264:	9201      	str	r2, [sp, #4]
 8004266:	60a3      	str	r3, [r4, #8]
 8004268:	3305      	adds	r3, #5
 800426a:	6063      	str	r3, [r4, #4]
 800426c:	1c38      	adds	r0, r7, #0
 800426e:	1c21      	adds	r1, r4, #0
 8004270:	beab      	bkpt	0x00ab
 8004272:	1c04      	adds	r4, r0, #0
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <initialise_monitor_handles+0xb0>)
 8004276:	601c      	str	r4, [r3, #0]
 8004278:	4f10      	ldr	r7, [pc, #64]	; (80042bc <initialise_monitor_handles+0xb0>)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	d102      	bne.n	8004286 <initialise_monitor_handles+0x7a>
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <initialise_monitor_handles+0xac>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	2400      	movs	r4, #0
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <initialise_monitor_handles+0xa4>)
 800428a:	606c      	str	r4, [r5, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	f7ff ffb0 	bl	80041f4 <_has_ext_stdout_stderr>
 8004294:	42a0      	cmp	r0, r4
 8004296:	d006      	beq.n	80042a6 <initialise_monitor_handles+0x9a>
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <initialise_monitor_handles+0xac>)
 800429a:	60ec      	str	r4, [r5, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	616c      	str	r4, [r5, #20]
 80042a0:	60ab      	str	r3, [r5, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	612b      	str	r3, [r5, #16]
 80042a6:	b005      	add	sp, #20
 80042a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	08004a0e 	.word	0x08004a0e
 80042b0:	20001b6c 	.word	0x20001b6c
 80042b4:	20001b74 	.word	0x20001b74
 80042b8:	20001b70 	.word	0x20001b70
 80042bc:	20001b68 	.word	0x20001b68

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	20000014 	.word	0x20000014

080042cc <std>:
 80042cc:	2300      	movs	r3, #0
 80042ce:	b510      	push	{r4, lr}
 80042d0:	0004      	movs	r4, r0
 80042d2:	6003      	str	r3, [r0, #0]
 80042d4:	6043      	str	r3, [r0, #4]
 80042d6:	6083      	str	r3, [r0, #8]
 80042d8:	8181      	strh	r1, [r0, #12]
 80042da:	6643      	str	r3, [r0, #100]	; 0x64
 80042dc:	0019      	movs	r1, r3
 80042de:	81c2      	strh	r2, [r0, #14]
 80042e0:	6103      	str	r3, [r0, #16]
 80042e2:	6143      	str	r3, [r0, #20]
 80042e4:	6183      	str	r3, [r0, #24]
 80042e6:	2208      	movs	r2, #8
 80042e8:	305c      	adds	r0, #92	; 0x5c
 80042ea:	f7ff fd44 	bl	8003d76 <memset>
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <std+0x38>)
 80042f0:	6263      	str	r3, [r4, #36]	; 0x24
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <std+0x3c>)
 80042f4:	6224      	str	r4, [r4, #32]
 80042f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <std+0x40>)
 80042fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <std+0x44>)
 80042fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004300:	bd10      	pop	{r4, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	080045b9 	.word	0x080045b9
 8004308:	080045e1 	.word	0x080045e1
 800430c:	08004619 	.word	0x08004619
 8004310:	08004645 	.word	0x08004645

08004314 <_cleanup_r>:
 8004314:	b510      	push	{r4, lr}
 8004316:	4902      	ldr	r1, [pc, #8]	; (8004320 <_cleanup_r+0xc>)
 8004318:	f000 f8ba 	bl	8004490 <_fwalk_reent>
 800431c:	bd10      	pop	{r4, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	080047b5 	.word	0x080047b5

08004324 <__sfmoreglue>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	2568      	movs	r5, #104	; 0x68
 8004328:	1e4a      	subs	r2, r1, #1
 800432a:	4355      	muls	r5, r2
 800432c:	000e      	movs	r6, r1
 800432e:	0029      	movs	r1, r5
 8004330:	3174      	adds	r1, #116	; 0x74
 8004332:	f000 f8d1 	bl	80044d8 <_malloc_r>
 8004336:	1e04      	subs	r4, r0, #0
 8004338:	d008      	beq.n	800434c <__sfmoreglue+0x28>
 800433a:	2100      	movs	r1, #0
 800433c:	002a      	movs	r2, r5
 800433e:	6001      	str	r1, [r0, #0]
 8004340:	6046      	str	r6, [r0, #4]
 8004342:	300c      	adds	r0, #12
 8004344:	60a0      	str	r0, [r4, #8]
 8004346:	3268      	adds	r2, #104	; 0x68
 8004348:	f7ff fd15 	bl	8003d76 <memset>
 800434c:	0020      	movs	r0, r4
 800434e:	bd70      	pop	{r4, r5, r6, pc}

08004350 <__sfp_lock_acquire>:
 8004350:	b510      	push	{r4, lr}
 8004352:	4802      	ldr	r0, [pc, #8]	; (800435c <__sfp_lock_acquire+0xc>)
 8004354:	f000 f8bd 	bl	80044d2 <__retarget_lock_acquire_recursive>
 8004358:	bd10      	pop	{r4, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	20001ca8 	.word	0x20001ca8

08004360 <__sfp_lock_release>:
 8004360:	b510      	push	{r4, lr}
 8004362:	4802      	ldr	r0, [pc, #8]	; (800436c <__sfp_lock_release+0xc>)
 8004364:	f000 f8b6 	bl	80044d4 <__retarget_lock_release_recursive>
 8004368:	bd10      	pop	{r4, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	20001ca8 	.word	0x20001ca8

08004370 <__sinit_lock_acquire>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4802      	ldr	r0, [pc, #8]	; (800437c <__sinit_lock_acquire+0xc>)
 8004374:	f000 f8ad 	bl	80044d2 <__retarget_lock_acquire_recursive>
 8004378:	bd10      	pop	{r4, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	20001ca3 	.word	0x20001ca3

08004380 <__sinit_lock_release>:
 8004380:	b510      	push	{r4, lr}
 8004382:	4802      	ldr	r0, [pc, #8]	; (800438c <__sinit_lock_release+0xc>)
 8004384:	f000 f8a6 	bl	80044d4 <__retarget_lock_release_recursive>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	20001ca3 	.word	0x20001ca3

08004390 <__sinit>:
 8004390:	b513      	push	{r0, r1, r4, lr}
 8004392:	0004      	movs	r4, r0
 8004394:	f7ff ffec 	bl	8004370 <__sinit_lock_acquire>
 8004398:	69a3      	ldr	r3, [r4, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <__sinit+0x14>
 800439e:	f7ff ffef 	bl	8004380 <__sinit_lock_release>
 80043a2:	bd13      	pop	{r0, r1, r4, pc}
 80043a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80043a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80043a8:	6523      	str	r3, [r4, #80]	; 0x50
 80043aa:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <__sinit+0x68>)
 80043ac:	4a13      	ldr	r2, [pc, #76]	; (80043fc <__sinit+0x6c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	d101      	bne.n	80043bc <__sinit+0x2c>
 80043b8:	2301      	movs	r3, #1
 80043ba:	61a3      	str	r3, [r4, #24]
 80043bc:	0020      	movs	r0, r4
 80043be:	f000 f81f 	bl	8004400 <__sfp>
 80043c2:	6060      	str	r0, [r4, #4]
 80043c4:	0020      	movs	r0, r4
 80043c6:	f000 f81b 	bl	8004400 <__sfp>
 80043ca:	60a0      	str	r0, [r4, #8]
 80043cc:	0020      	movs	r0, r4
 80043ce:	f000 f817 	bl	8004400 <__sfp>
 80043d2:	2200      	movs	r2, #0
 80043d4:	2104      	movs	r1, #4
 80043d6:	60e0      	str	r0, [r4, #12]
 80043d8:	6860      	ldr	r0, [r4, #4]
 80043da:	f7ff ff77 	bl	80042cc <std>
 80043de:	2201      	movs	r2, #1
 80043e0:	2109      	movs	r1, #9
 80043e2:	68a0      	ldr	r0, [r4, #8]
 80043e4:	f7ff ff72 	bl	80042cc <std>
 80043e8:	2202      	movs	r2, #2
 80043ea:	2112      	movs	r1, #18
 80043ec:	68e0      	ldr	r0, [r4, #12]
 80043ee:	f7ff ff6d 	bl	80042cc <std>
 80043f2:	2301      	movs	r3, #1
 80043f4:	61a3      	str	r3, [r4, #24]
 80043f6:	e7d2      	b.n	800439e <__sinit+0xe>
 80043f8:	080049f4 	.word	0x080049f4
 80043fc:	08004315 	.word	0x08004315

08004400 <__sfp>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	0007      	movs	r7, r0
 8004404:	f7ff ffa4 	bl	8004350 <__sfp_lock_acquire>
 8004408:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <__sfp+0x88>)
 800440a:	681e      	ldr	r6, [r3, #0]
 800440c:	69b3      	ldr	r3, [r6, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <__sfp+0x18>
 8004412:	0030      	movs	r0, r6
 8004414:	f7ff ffbc 	bl	8004390 <__sinit>
 8004418:	3648      	adds	r6, #72	; 0x48
 800441a:	68b4      	ldr	r4, [r6, #8]
 800441c:	6873      	ldr	r3, [r6, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	d504      	bpl.n	800442c <__sfp+0x2c>
 8004422:	6833      	ldr	r3, [r6, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d022      	beq.n	800446e <__sfp+0x6e>
 8004428:	6836      	ldr	r6, [r6, #0]
 800442a:	e7f6      	b.n	800441a <__sfp+0x1a>
 800442c:	220c      	movs	r2, #12
 800442e:	5ea5      	ldrsh	r5, [r4, r2]
 8004430:	2d00      	cmp	r5, #0
 8004432:	d11a      	bne.n	800446a <__sfp+0x6a>
 8004434:	0020      	movs	r0, r4
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <__sfp+0x8c>)
 8004438:	3058      	adds	r0, #88	; 0x58
 800443a:	60e3      	str	r3, [r4, #12]
 800443c:	6665      	str	r5, [r4, #100]	; 0x64
 800443e:	f000 f847 	bl	80044d0 <__retarget_lock_init_recursive>
 8004442:	f7ff ff8d 	bl	8004360 <__sfp_lock_release>
 8004446:	0020      	movs	r0, r4
 8004448:	2208      	movs	r2, #8
 800444a:	0029      	movs	r1, r5
 800444c:	6025      	str	r5, [r4, #0]
 800444e:	60a5      	str	r5, [r4, #8]
 8004450:	6065      	str	r5, [r4, #4]
 8004452:	6125      	str	r5, [r4, #16]
 8004454:	6165      	str	r5, [r4, #20]
 8004456:	61a5      	str	r5, [r4, #24]
 8004458:	305c      	adds	r0, #92	; 0x5c
 800445a:	f7ff fc8c 	bl	8003d76 <memset>
 800445e:	6365      	str	r5, [r4, #52]	; 0x34
 8004460:	63a5      	str	r5, [r4, #56]	; 0x38
 8004462:	64a5      	str	r5, [r4, #72]	; 0x48
 8004464:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004466:	0020      	movs	r0, r4
 8004468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800446a:	3468      	adds	r4, #104	; 0x68
 800446c:	e7d7      	b.n	800441e <__sfp+0x1e>
 800446e:	2104      	movs	r1, #4
 8004470:	0038      	movs	r0, r7
 8004472:	f7ff ff57 	bl	8004324 <__sfmoreglue>
 8004476:	1e04      	subs	r4, r0, #0
 8004478:	6030      	str	r0, [r6, #0]
 800447a:	d1d5      	bne.n	8004428 <__sfp+0x28>
 800447c:	f7ff ff70 	bl	8004360 <__sfp_lock_release>
 8004480:	230c      	movs	r3, #12
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	e7ef      	b.n	8004466 <__sfp+0x66>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	080049f4 	.word	0x080049f4
 800448c:	ffff0001 	.word	0xffff0001

08004490 <_fwalk_reent>:
 8004490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004492:	0004      	movs	r4, r0
 8004494:	0006      	movs	r6, r0
 8004496:	2700      	movs	r7, #0
 8004498:	9101      	str	r1, [sp, #4]
 800449a:	3448      	adds	r4, #72	; 0x48
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	68a5      	ldr	r5, [r4, #8]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	9b00      	ldr	r3, [sp, #0]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	d504      	bpl.n	80044b4 <_fwalk_reent+0x24>
 80044aa:	6824      	ldr	r4, [r4, #0]
 80044ac:	2c00      	cmp	r4, #0
 80044ae:	d1f5      	bne.n	800449c <_fwalk_reent+0xc>
 80044b0:	0038      	movs	r0, r7
 80044b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044b4:	89ab      	ldrh	r3, [r5, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d908      	bls.n	80044cc <_fwalk_reent+0x3c>
 80044ba:	220e      	movs	r2, #14
 80044bc:	5eab      	ldrsh	r3, [r5, r2]
 80044be:	3301      	adds	r3, #1
 80044c0:	d004      	beq.n	80044cc <_fwalk_reent+0x3c>
 80044c2:	0029      	movs	r1, r5
 80044c4:	0030      	movs	r0, r6
 80044c6:	9b01      	ldr	r3, [sp, #4]
 80044c8:	4798      	blx	r3
 80044ca:	4307      	orrs	r7, r0
 80044cc:	3568      	adds	r5, #104	; 0x68
 80044ce:	e7e8      	b.n	80044a2 <_fwalk_reent+0x12>

080044d0 <__retarget_lock_init_recursive>:
 80044d0:	4770      	bx	lr

080044d2 <__retarget_lock_acquire_recursive>:
 80044d2:	4770      	bx	lr

080044d4 <__retarget_lock_release_recursive>:
 80044d4:	4770      	bx	lr
	...

080044d8 <_malloc_r>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	2303      	movs	r3, #3
 80044dc:	1ccd      	adds	r5, r1, #3
 80044de:	439d      	bics	r5, r3
 80044e0:	3508      	adds	r5, #8
 80044e2:	0006      	movs	r6, r0
 80044e4:	2d0c      	cmp	r5, #12
 80044e6:	d21f      	bcs.n	8004528 <_malloc_r+0x50>
 80044e8:	250c      	movs	r5, #12
 80044ea:	42a9      	cmp	r1, r5
 80044ec:	d81e      	bhi.n	800452c <_malloc_r+0x54>
 80044ee:	0030      	movs	r0, r6
 80044f0:	f000 f9b4 	bl	800485c <__malloc_lock>
 80044f4:	4925      	ldr	r1, [pc, #148]	; (800458c <_malloc_r+0xb4>)
 80044f6:	680a      	ldr	r2, [r1, #0]
 80044f8:	0014      	movs	r4, r2
 80044fa:	2c00      	cmp	r4, #0
 80044fc:	d11a      	bne.n	8004534 <_malloc_r+0x5c>
 80044fe:	4f24      	ldr	r7, [pc, #144]	; (8004590 <_malloc_r+0xb8>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d104      	bne.n	8004510 <_malloc_r+0x38>
 8004506:	0021      	movs	r1, r4
 8004508:	0030      	movs	r0, r6
 800450a:	f000 f843 	bl	8004594 <_sbrk_r>
 800450e:	6038      	str	r0, [r7, #0]
 8004510:	0029      	movs	r1, r5
 8004512:	0030      	movs	r0, r6
 8004514:	f000 f83e 	bl	8004594 <_sbrk_r>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d12b      	bne.n	8004574 <_malloc_r+0x9c>
 800451c:	230c      	movs	r3, #12
 800451e:	0030      	movs	r0, r6
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	f000 f9a3 	bl	800486c <__malloc_unlock>
 8004526:	e003      	b.n	8004530 <_malloc_r+0x58>
 8004528:	2d00      	cmp	r5, #0
 800452a:	dade      	bge.n	80044ea <_malloc_r+0x12>
 800452c:	230c      	movs	r3, #12
 800452e:	6033      	str	r3, [r6, #0]
 8004530:	2000      	movs	r0, #0
 8004532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	1b5b      	subs	r3, r3, r5
 8004538:	d419      	bmi.n	800456e <_malloc_r+0x96>
 800453a:	2b0b      	cmp	r3, #11
 800453c:	d903      	bls.n	8004546 <_malloc_r+0x6e>
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	18e4      	adds	r4, r4, r3
 8004542:	6025      	str	r5, [r4, #0]
 8004544:	e003      	b.n	800454e <_malloc_r+0x76>
 8004546:	6863      	ldr	r3, [r4, #4]
 8004548:	42a2      	cmp	r2, r4
 800454a:	d10e      	bne.n	800456a <_malloc_r+0x92>
 800454c:	600b      	str	r3, [r1, #0]
 800454e:	0030      	movs	r0, r6
 8004550:	f000 f98c 	bl	800486c <__malloc_unlock>
 8004554:	0020      	movs	r0, r4
 8004556:	2207      	movs	r2, #7
 8004558:	300b      	adds	r0, #11
 800455a:	1d23      	adds	r3, r4, #4
 800455c:	4390      	bics	r0, r2
 800455e:	1ac2      	subs	r2, r0, r3
 8004560:	4298      	cmp	r0, r3
 8004562:	d0e6      	beq.n	8004532 <_malloc_r+0x5a>
 8004564:	1a1b      	subs	r3, r3, r0
 8004566:	50a3      	str	r3, [r4, r2]
 8004568:	e7e3      	b.n	8004532 <_malloc_r+0x5a>
 800456a:	6053      	str	r3, [r2, #4]
 800456c:	e7ef      	b.n	800454e <_malloc_r+0x76>
 800456e:	0022      	movs	r2, r4
 8004570:	6864      	ldr	r4, [r4, #4]
 8004572:	e7c2      	b.n	80044fa <_malloc_r+0x22>
 8004574:	2303      	movs	r3, #3
 8004576:	1cc4      	adds	r4, r0, #3
 8004578:	439c      	bics	r4, r3
 800457a:	42a0      	cmp	r0, r4
 800457c:	d0e1      	beq.n	8004542 <_malloc_r+0x6a>
 800457e:	1a21      	subs	r1, r4, r0
 8004580:	0030      	movs	r0, r6
 8004582:	f000 f807 	bl	8004594 <_sbrk_r>
 8004586:	1c43      	adds	r3, r0, #1
 8004588:	d1db      	bne.n	8004542 <_malloc_r+0x6a>
 800458a:	e7c7      	b.n	800451c <_malloc_r+0x44>
 800458c:	20001c14 	.word	0x20001c14
 8004590:	20001c18 	.word	0x20001c18

08004594 <_sbrk_r>:
 8004594:	2300      	movs	r3, #0
 8004596:	b570      	push	{r4, r5, r6, lr}
 8004598:	4d06      	ldr	r5, [pc, #24]	; (80045b4 <_sbrk_r+0x20>)
 800459a:	0004      	movs	r4, r0
 800459c:	0008      	movs	r0, r1
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	f7ff fcf4 	bl	8003f8c <_sbrk>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d103      	bne.n	80045b0 <_sbrk_r+0x1c>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d000      	beq.n	80045b0 <_sbrk_r+0x1c>
 80045ae:	6023      	str	r3, [r4, #0]
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	20001cac 	.word	0x20001cac

080045b8 <__sread>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	000c      	movs	r4, r1
 80045bc:	250e      	movs	r5, #14
 80045be:	5f49      	ldrsh	r1, [r1, r5]
 80045c0:	f000 f9a6 	bl	8004910 <_read_r>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	db03      	blt.n	80045d0 <__sread+0x18>
 80045c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045ca:	181b      	adds	r3, r3, r0
 80045cc:	6563      	str	r3, [r4, #84]	; 0x54
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	4a02      	ldr	r2, [pc, #8]	; (80045dc <__sread+0x24>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	81a3      	strh	r3, [r4, #12]
 80045d8:	e7f9      	b.n	80045ce <__sread+0x16>
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	ffffefff 	.word	0xffffefff

080045e0 <__swrite>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	001f      	movs	r7, r3
 80045e4:	898b      	ldrh	r3, [r1, #12]
 80045e6:	0005      	movs	r5, r0
 80045e8:	000c      	movs	r4, r1
 80045ea:	0016      	movs	r6, r2
 80045ec:	05db      	lsls	r3, r3, #23
 80045ee:	d505      	bpl.n	80045fc <__swrite+0x1c>
 80045f0:	230e      	movs	r3, #14
 80045f2:	5ec9      	ldrsh	r1, [r1, r3]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2302      	movs	r3, #2
 80045f8:	f000 f91c 	bl	8004834 <_lseek_r>
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	4a05      	ldr	r2, [pc, #20]	; (8004614 <__swrite+0x34>)
 8004600:	0028      	movs	r0, r5
 8004602:	4013      	ands	r3, r2
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	0032      	movs	r2, r6
 8004608:	230e      	movs	r3, #14
 800460a:	5ee1      	ldrsh	r1, [r4, r3]
 800460c:	003b      	movs	r3, r7
 800460e:	f000 f81f 	bl	8004650 <_write_r>
 8004612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004614:	ffffefff 	.word	0xffffefff

08004618 <__sseek>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	000c      	movs	r4, r1
 800461c:	250e      	movs	r5, #14
 800461e:	5f49      	ldrsh	r1, [r1, r5]
 8004620:	f000 f908 	bl	8004834 <_lseek_r>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	1c42      	adds	r2, r0, #1
 8004628:	d103      	bne.n	8004632 <__sseek+0x1a>
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <__sseek+0x28>)
 800462c:	4013      	ands	r3, r2
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	bd70      	pop	{r4, r5, r6, pc}
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	0152      	lsls	r2, r2, #5
 8004636:	4313      	orrs	r3, r2
 8004638:	81a3      	strh	r3, [r4, #12]
 800463a:	6560      	str	r0, [r4, #84]	; 0x54
 800463c:	e7f8      	b.n	8004630 <__sseek+0x18>
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	ffffefff 	.word	0xffffefff

08004644 <__sclose>:
 8004644:	b510      	push	{r4, lr}
 8004646:	230e      	movs	r3, #14
 8004648:	5ec9      	ldrsh	r1, [r1, r3]
 800464a:	f000 f815 	bl	8004678 <_close_r>
 800464e:	bd10      	pop	{r4, pc}

08004650 <_write_r>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	0004      	movs	r4, r0
 8004654:	0008      	movs	r0, r1
 8004656:	0011      	movs	r1, r2
 8004658:	001a      	movs	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	4d05      	ldr	r5, [pc, #20]	; (8004674 <_write_r+0x24>)
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7ff fc43 	bl	8003eea <_write>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d103      	bne.n	8004670 <_write_r+0x20>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d000      	beq.n	8004670 <_write_r+0x20>
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	20001cac 	.word	0x20001cac

08004678 <_close_r>:
 8004678:	2300      	movs	r3, #0
 800467a:	b570      	push	{r4, r5, r6, lr}
 800467c:	4d06      	ldr	r5, [pc, #24]	; (8004698 <_close_r+0x20>)
 800467e:	0004      	movs	r4, r0
 8004680:	0008      	movs	r0, r1
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	f7ff fc5c 	bl	8003f40 <_close>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d103      	bne.n	8004694 <_close_r+0x1c>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d000      	beq.n	8004694 <_close_r+0x1c>
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	20001cac 	.word	0x20001cac

0800469c <__sflush_r>:
 800469c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469e:	898b      	ldrh	r3, [r1, #12]
 80046a0:	0005      	movs	r5, r0
 80046a2:	000c      	movs	r4, r1
 80046a4:	071a      	lsls	r2, r3, #28
 80046a6:	d45f      	bmi.n	8004768 <__sflush_r+0xcc>
 80046a8:	684a      	ldr	r2, [r1, #4]
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	dc04      	bgt.n	80046b8 <__sflush_r+0x1c>
 80046ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80046b0:	2a00      	cmp	r2, #0
 80046b2:	dc01      	bgt.n	80046b8 <__sflush_r+0x1c>
 80046b4:	2000      	movs	r0, #0
 80046b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80046ba:	2f00      	cmp	r7, #0
 80046bc:	d0fa      	beq.n	80046b4 <__sflush_r+0x18>
 80046be:	2200      	movs	r2, #0
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	682e      	ldr	r6, [r5, #0]
 80046c4:	602a      	str	r2, [r5, #0]
 80046c6:	001a      	movs	r2, r3
 80046c8:	0149      	lsls	r1, r1, #5
 80046ca:	400a      	ands	r2, r1
 80046cc:	420b      	tst	r3, r1
 80046ce:	d034      	beq.n	800473a <__sflush_r+0x9e>
 80046d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	075b      	lsls	r3, r3, #29
 80046d6:	d506      	bpl.n	80046e6 <__sflush_r+0x4a>
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	1ac0      	subs	r0, r0, r3
 80046dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <__sflush_r+0x4a>
 80046e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046e4:	1ac0      	subs	r0, r0, r3
 80046e6:	0002      	movs	r2, r0
 80046e8:	6a21      	ldr	r1, [r4, #32]
 80046ea:	2300      	movs	r3, #0
 80046ec:	0028      	movs	r0, r5
 80046ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80046f0:	47b8      	blx	r7
 80046f2:	89a1      	ldrh	r1, [r4, #12]
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d106      	bne.n	8004706 <__sflush_r+0x6a>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	2b1d      	cmp	r3, #29
 80046fc:	d831      	bhi.n	8004762 <__sflush_r+0xc6>
 80046fe:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <__sflush_r+0x114>)
 8004700:	40da      	lsrs	r2, r3
 8004702:	07d3      	lsls	r3, r2, #31
 8004704:	d52d      	bpl.n	8004762 <__sflush_r+0xc6>
 8004706:	2300      	movs	r3, #0
 8004708:	6063      	str	r3, [r4, #4]
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	04cb      	lsls	r3, r1, #19
 8004710:	d505      	bpl.n	800471e <__sflush_r+0x82>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d102      	bne.n	800471c <__sflush_r+0x80>
 8004716:	682b      	ldr	r3, [r5, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d100      	bne.n	800471e <__sflush_r+0x82>
 800471c:	6560      	str	r0, [r4, #84]	; 0x54
 800471e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004720:	602e      	str	r6, [r5, #0]
 8004722:	2900      	cmp	r1, #0
 8004724:	d0c6      	beq.n	80046b4 <__sflush_r+0x18>
 8004726:	0023      	movs	r3, r4
 8004728:	3344      	adds	r3, #68	; 0x44
 800472a:	4299      	cmp	r1, r3
 800472c:	d002      	beq.n	8004734 <__sflush_r+0x98>
 800472e:	0028      	movs	r0, r5
 8004730:	f000 f8a4 	bl	800487c <_free_r>
 8004734:	2000      	movs	r0, #0
 8004736:	6360      	str	r0, [r4, #52]	; 0x34
 8004738:	e7bd      	b.n	80046b6 <__sflush_r+0x1a>
 800473a:	2301      	movs	r3, #1
 800473c:	0028      	movs	r0, r5
 800473e:	6a21      	ldr	r1, [r4, #32]
 8004740:	47b8      	blx	r7
 8004742:	1c43      	adds	r3, r0, #1
 8004744:	d1c5      	bne.n	80046d2 <__sflush_r+0x36>
 8004746:	682b      	ldr	r3, [r5, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0c2      	beq.n	80046d2 <__sflush_r+0x36>
 800474c:	2b1d      	cmp	r3, #29
 800474e:	d001      	beq.n	8004754 <__sflush_r+0xb8>
 8004750:	2b16      	cmp	r3, #22
 8004752:	d101      	bne.n	8004758 <__sflush_r+0xbc>
 8004754:	602e      	str	r6, [r5, #0]
 8004756:	e7ad      	b.n	80046b4 <__sflush_r+0x18>
 8004758:	2340      	movs	r3, #64	; 0x40
 800475a:	89a2      	ldrh	r2, [r4, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	e7a9      	b.n	80046b6 <__sflush_r+0x1a>
 8004762:	2340      	movs	r3, #64	; 0x40
 8004764:	430b      	orrs	r3, r1
 8004766:	e7fa      	b.n	800475e <__sflush_r+0xc2>
 8004768:	690f      	ldr	r7, [r1, #16]
 800476a:	2f00      	cmp	r7, #0
 800476c:	d0a2      	beq.n	80046b4 <__sflush_r+0x18>
 800476e:	680a      	ldr	r2, [r1, #0]
 8004770:	600f      	str	r7, [r1, #0]
 8004772:	1bd2      	subs	r2, r2, r7
 8004774:	9201      	str	r2, [sp, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	079b      	lsls	r3, r3, #30
 800477a:	d100      	bne.n	800477e <__sflush_r+0xe2>
 800477c:	694a      	ldr	r2, [r1, #20]
 800477e:	60a2      	str	r2, [r4, #8]
 8004780:	9b01      	ldr	r3, [sp, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	dc00      	bgt.n	8004788 <__sflush_r+0xec>
 8004786:	e795      	b.n	80046b4 <__sflush_r+0x18>
 8004788:	003a      	movs	r2, r7
 800478a:	0028      	movs	r0, r5
 800478c:	9b01      	ldr	r3, [sp, #4]
 800478e:	6a21      	ldr	r1, [r4, #32]
 8004790:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004792:	47b0      	blx	r6
 8004794:	2800      	cmp	r0, #0
 8004796:	dc06      	bgt.n	80047a6 <__sflush_r+0x10a>
 8004798:	2340      	movs	r3, #64	; 0x40
 800479a:	2001      	movs	r0, #1
 800479c:	89a2      	ldrh	r2, [r4, #12]
 800479e:	4240      	negs	r0, r0
 80047a0:	4313      	orrs	r3, r2
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	e787      	b.n	80046b6 <__sflush_r+0x1a>
 80047a6:	9b01      	ldr	r3, [sp, #4]
 80047a8:	183f      	adds	r7, r7, r0
 80047aa:	1a1b      	subs	r3, r3, r0
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	e7e7      	b.n	8004780 <__sflush_r+0xe4>
 80047b0:	20400001 	.word	0x20400001

080047b4 <_fflush_r>:
 80047b4:	690b      	ldr	r3, [r1, #16]
 80047b6:	b570      	push	{r4, r5, r6, lr}
 80047b8:	0005      	movs	r5, r0
 80047ba:	000c      	movs	r4, r1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <_fflush_r+0x12>
 80047c0:	2500      	movs	r5, #0
 80047c2:	0028      	movs	r0, r5
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d004      	beq.n	80047d4 <_fflush_r+0x20>
 80047ca:	6983      	ldr	r3, [r0, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <_fflush_r+0x20>
 80047d0:	f7ff fdde 	bl	8004390 <__sinit>
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <_fflush_r+0x74>)
 80047d6:	429c      	cmp	r4, r3
 80047d8:	d11b      	bne.n	8004812 <_fflush_r+0x5e>
 80047da:	686c      	ldr	r4, [r5, #4]
 80047dc:	220c      	movs	r2, #12
 80047de:	5ea3      	ldrsh	r3, [r4, r2]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ed      	beq.n	80047c0 <_fflush_r+0xc>
 80047e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047e6:	07d2      	lsls	r2, r2, #31
 80047e8:	d404      	bmi.n	80047f4 <_fflush_r+0x40>
 80047ea:	059b      	lsls	r3, r3, #22
 80047ec:	d402      	bmi.n	80047f4 <_fflush_r+0x40>
 80047ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047f0:	f7ff fe6f 	bl	80044d2 <__retarget_lock_acquire_recursive>
 80047f4:	0028      	movs	r0, r5
 80047f6:	0021      	movs	r1, r4
 80047f8:	f7ff ff50 	bl	800469c <__sflush_r>
 80047fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047fe:	0005      	movs	r5, r0
 8004800:	07db      	lsls	r3, r3, #31
 8004802:	d4de      	bmi.n	80047c2 <_fflush_r+0xe>
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	059b      	lsls	r3, r3, #22
 8004808:	d4db      	bmi.n	80047c2 <_fflush_r+0xe>
 800480a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800480c:	f7ff fe62 	bl	80044d4 <__retarget_lock_release_recursive>
 8004810:	e7d7      	b.n	80047c2 <_fflush_r+0xe>
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <_fflush_r+0x78>)
 8004814:	429c      	cmp	r4, r3
 8004816:	d101      	bne.n	800481c <_fflush_r+0x68>
 8004818:	68ac      	ldr	r4, [r5, #8]
 800481a:	e7df      	b.n	80047dc <_fflush_r+0x28>
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <_fflush_r+0x7c>)
 800481e:	429c      	cmp	r4, r3
 8004820:	d1dc      	bne.n	80047dc <_fflush_r+0x28>
 8004822:	68ec      	ldr	r4, [r5, #12]
 8004824:	e7da      	b.n	80047dc <_fflush_r+0x28>
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	08004a34 	.word	0x08004a34
 800482c:	08004a54 	.word	0x08004a54
 8004830:	08004a14 	.word	0x08004a14

08004834 <_lseek_r>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	0004      	movs	r4, r0
 8004838:	0008      	movs	r0, r1
 800483a:	0011      	movs	r1, r2
 800483c:	001a      	movs	r2, r3
 800483e:	2300      	movs	r3, #0
 8004840:	4d05      	ldr	r5, [pc, #20]	; (8004858 <_lseek_r+0x24>)
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7ff fb3d 	bl	8003ec2 <_lseek>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d103      	bne.n	8004854 <_lseek_r+0x20>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d000      	beq.n	8004854 <_lseek_r+0x20>
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	bd70      	pop	{r4, r5, r6, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	20001cac 	.word	0x20001cac

0800485c <__malloc_lock>:
 800485c:	b510      	push	{r4, lr}
 800485e:	4802      	ldr	r0, [pc, #8]	; (8004868 <__malloc_lock+0xc>)
 8004860:	f7ff fe37 	bl	80044d2 <__retarget_lock_acquire_recursive>
 8004864:	bd10      	pop	{r4, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	20001ca4 	.word	0x20001ca4

0800486c <__malloc_unlock>:
 800486c:	b510      	push	{r4, lr}
 800486e:	4802      	ldr	r0, [pc, #8]	; (8004878 <__malloc_unlock+0xc>)
 8004870:	f7ff fe30 	bl	80044d4 <__retarget_lock_release_recursive>
 8004874:	bd10      	pop	{r4, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	20001ca4 	.word	0x20001ca4

0800487c <_free_r>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	0005      	movs	r5, r0
 8004880:	2900      	cmp	r1, #0
 8004882:	d010      	beq.n	80048a6 <_free_r+0x2a>
 8004884:	1f0c      	subs	r4, r1, #4
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	da00      	bge.n	800488e <_free_r+0x12>
 800488c:	18e4      	adds	r4, r4, r3
 800488e:	0028      	movs	r0, r5
 8004890:	f7ff ffe4 	bl	800485c <__malloc_lock>
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <_free_r+0x90>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <_free_r+0x2c>
 800489c:	6063      	str	r3, [r4, #4]
 800489e:	6014      	str	r4, [r2, #0]
 80048a0:	0028      	movs	r0, r5
 80048a2:	f7ff ffe3 	bl	800486c <__malloc_unlock>
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d908      	bls.n	80048be <_free_r+0x42>
 80048ac:	6821      	ldr	r1, [r4, #0]
 80048ae:	1860      	adds	r0, r4, r1
 80048b0:	4283      	cmp	r3, r0
 80048b2:	d1f3      	bne.n	800489c <_free_r+0x20>
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	1841      	adds	r1, r0, r1
 80048ba:	6021      	str	r1, [r4, #0]
 80048bc:	e7ee      	b.n	800489c <_free_r+0x20>
 80048be:	001a      	movs	r2, r3
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <_free_r+0x4e>
 80048c6:	42a3      	cmp	r3, r4
 80048c8:	d9f9      	bls.n	80048be <_free_r+0x42>
 80048ca:	6811      	ldr	r1, [r2, #0]
 80048cc:	1850      	adds	r0, r2, r1
 80048ce:	42a0      	cmp	r0, r4
 80048d0:	d10b      	bne.n	80048ea <_free_r+0x6e>
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	1809      	adds	r1, r1, r0
 80048d6:	1850      	adds	r0, r2, r1
 80048d8:	6011      	str	r1, [r2, #0]
 80048da:	4283      	cmp	r3, r0
 80048dc:	d1e0      	bne.n	80048a0 <_free_r+0x24>
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	1841      	adds	r1, r0, r1
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	6053      	str	r3, [r2, #4]
 80048e8:	e7da      	b.n	80048a0 <_free_r+0x24>
 80048ea:	42a0      	cmp	r0, r4
 80048ec:	d902      	bls.n	80048f4 <_free_r+0x78>
 80048ee:	230c      	movs	r3, #12
 80048f0:	602b      	str	r3, [r5, #0]
 80048f2:	e7d5      	b.n	80048a0 <_free_r+0x24>
 80048f4:	6821      	ldr	r1, [r4, #0]
 80048f6:	1860      	adds	r0, r4, r1
 80048f8:	4283      	cmp	r3, r0
 80048fa:	d103      	bne.n	8004904 <_free_r+0x88>
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	1841      	adds	r1, r0, r1
 8004902:	6021      	str	r1, [r4, #0]
 8004904:	6063      	str	r3, [r4, #4]
 8004906:	6054      	str	r4, [r2, #4]
 8004908:	e7ca      	b.n	80048a0 <_free_r+0x24>
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	20001c14 	.word	0x20001c14

08004910 <_read_r>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	0004      	movs	r4, r0
 8004914:	0008      	movs	r0, r1
 8004916:	0011      	movs	r1, r2
 8004918:	001a      	movs	r2, r3
 800491a:	2300      	movs	r3, #0
 800491c:	4d05      	ldr	r5, [pc, #20]	; (8004934 <_read_r+0x24>)
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	f7ff fa7a 	bl	8003e18 <_read>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d103      	bne.n	8004930 <_read_r+0x20>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d000      	beq.n	8004930 <_read_r+0x20>
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	bd70      	pop	{r4, r5, r6, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	20001cac 	.word	0x20001cac

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr
