
001_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c5c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001d1c  08001d1c  00011d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d40  08001d40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d48  08001d48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08001d5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08001d5c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092b1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001695  00000000  00000000  000292e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002a980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002b348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144ba  00000000  00000000  0002bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cdd  00000000  00000000  00040112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008562c  00000000  00000000  00049def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf41b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e4  00000000  00000000  000cf470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d04 	.word	0x08001d04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001d04 	.word	0x08001d04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 f93c 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f804 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f85e 	bl	8000568 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <main+0x10>
	...

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b095      	sub	sp, #84	; 0x54
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	2418      	movs	r4, #24
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2338      	movs	r3, #56	; 0x38
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f001 fc17 	bl	8001cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f001 fc10 	bl	8001cf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d4:	4b22      	ldr	r3, [pc, #136]	; (8000560 <SystemClock_Config+0xb0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a22      	ldr	r2, [pc, #136]	; (8000564 <SystemClock_Config+0xb4>)
 80004da:	401a      	ands	r2, r3
 80004dc:	4b20      	ldr	r3, [pc, #128]	; (8000560 <SystemClock_Config+0xb0>)
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0109      	lsls	r1, r1, #4
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e6:	0021      	movs	r1, r4
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2202      	movs	r2, #2
 80004ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2201      	movs	r2, #1
 80004f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2210      	movs	r2, #16
 80004f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2202      	movs	r2, #2
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	02d2      	lsls	r2, r2, #11
 800050c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2280      	movs	r2, #128	; 0x80
 8000512:	03d2      	lsls	r2, r2, #15
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	187b      	adds	r3, r7, r1
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f9e9 	bl	80008f0 <HAL_RCC_OscConfig>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000522:	f000 f849 	bl	80005b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	220f      	movs	r2, #15
 800052a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2203      	movs	r2, #3
 8000530:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2101      	movs	r1, #1
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fda5 	bl	8001098 <HAL_RCC_ClockConfig>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000552:	f000 f831 	bl	80005b8 <Error_Handler>
  }
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b015      	add	sp, #84	; 0x54
 800055c:	bd90      	pop	{r4, r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40007000 	.word	0x40007000
 8000564:	ffffe7ff 	.word	0xffffe7ff

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_GPIO_Init+0x28>)
 8000570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <MX_GPIO_Init+0x28>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	430a      	orrs	r2, r1
 8000578:	62da      	str	r2, [r3, #44]	; 0x2c
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MX_GPIO_Init+0x28>)
 800057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005a6:	f000 f8d9 	bl	800075c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40001000 	.word	0x40001000

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <HAL_MspInit+0x24>)
 80005ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_MspInit+0x24>)
 80005ce:	2101      	movs	r1, #1
 80005d0:	430a      	orrs	r2, r1
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_MspInit+0x24>)
 80005d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_MspInit+0x24>)
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	0549      	lsls	r1, r1, #21
 80005de:	430a      	orrs	r2, r1
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	0019      	movs	r1, r3
 8000602:	2011      	movs	r0, #17
 8000604:	f000 f94e 	bl	80008a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000608:	2011      	movs	r0, #17
 800060a:	f000 f960 	bl	80008ce <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <HAL_InitTick+0x98>)
 8000610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <HAL_InitTick+0x98>)
 8000614:	2110      	movs	r1, #16
 8000616:	430a      	orrs	r2, r1
 8000618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800061a:	2308      	movs	r3, #8
 800061c:	18fa      	adds	r2, r7, r3
 800061e:	230c      	movs	r3, #12
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f000 ff45 	bl	80014b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800062a:	f000 ff2d 	bl	8001488 <HAL_RCC_GetPCLK1Freq>
 800062e:	0003      	movs	r3, r0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	4914      	ldr	r1, [pc, #80]	; (8000688 <HAL_InitTick+0x9c>)
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff fd66 	bl	8000108 <__udivsi3>
 800063c:	0003      	movs	r3, r0
 800063e:	3b01      	subs	r3, #1
 8000640:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0xa0>)
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <HAL_InitTick+0xa4>)
 8000646:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_InitTick+0xa0>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <HAL_InitTick+0xa8>)
 800064c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_InitTick+0xa0>)
 8000650:	6a3a      	ldr	r2, [r7, #32]
 8000652:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <HAL_InitTick+0xa0>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_InitTick+0xa0>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_InitTick+0xa0>)
 8000662:	0018      	movs	r0, r3
 8000664:	f000 ff58 	bl	8001518 <HAL_TIM_Base_Init>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d105      	bne.n	8000678 <HAL_InitTick+0x8c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <HAL_InitTick+0xa0>)
 800066e:	0018      	movs	r0, r3
 8000670:	f000 ff9a 	bl	80015a8 <HAL_TIM_Base_Start_IT>
 8000674:	0003      	movs	r3, r0
 8000676:	e000      	b.n	800067a <HAL_InitTick+0x8e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000678:	2301      	movs	r3, #1
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	b00a      	add	sp, #40	; 0x28
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000
 8000688:	000f4240 	.word	0x000f4240
 800068c:	200000b4 	.word	0x200000b4
 8000690:	40001000 	.word	0x40001000
 8000694:	000003e7 	.word	0x000003e7

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <TIM6_DAC_IRQHandler+0x14>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 ffce 	bl	800164c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200000b4 	.word	0x200000b4

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f2:	f7ff ffe3 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f001 fad9 	bl	8001cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006fa:	f7ff fecf 	bl	800049c <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
   ldr   r0, =_estack
 8000700:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	08001d50 	.word	0x08001d50
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	200000f8 	.word	0x200000f8

08000718 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_COMP_IRQHandler>
	...

0800071c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_Init+0x3c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_Init+0x3c>)
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000734:	2003      	movs	r0, #3
 8000736:	f7ff ff59 	bl	80005ec <HAL_InitTick>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d003      	beq.n	8000746 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e001      	b.n	800074a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000746:	f7ff ff3d 	bl	80005c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	001a      	movs	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	18d2      	adds	r2, r2, r3
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000008 	.word	0x20000008
 800077c:	200000f4 	.word	0x200000f4

08000780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200000f4 	.word	0x200000f4

08000794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b7f      	cmp	r3, #127	; 0x7f
 80007a6:	d809      	bhi.n	80007bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	001a      	movs	r2, r3
 80007ae:	231f      	movs	r3, #31
 80007b0:	401a      	ands	r2, r3
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_EnableIRQ+0x30>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	4091      	lsls	r1, r2
 80007b8:	000a      	movs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
  }
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	0002      	movs	r2, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b7f      	cmp	r3, #127	; 0x7f
 80007dc:	d828      	bhi.n	8000830 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <__NVIC_SetPriority+0xd4>)
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	33c0      	adds	r3, #192	; 0xc0
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	589b      	ldr	r3, [r3, r2]
 80007ee:	1dfa      	adds	r2, r7, #7
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	0011      	movs	r1, r2
 80007f4:	2203      	movs	r2, #3
 80007f6:	400a      	ands	r2, r1
 80007f8:	00d2      	lsls	r2, r2, #3
 80007fa:	21ff      	movs	r1, #255	; 0xff
 80007fc:	4091      	lsls	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	43d2      	mvns	r2, r2
 8000802:	401a      	ands	r2, r3
 8000804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	019b      	lsls	r3, r3, #6
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	401a      	ands	r2, r3
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	0018      	movs	r0, r3
 8000814:	2303      	movs	r3, #3
 8000816:	4003      	ands	r3, r0
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081c:	481f      	ldr	r0, [pc, #124]	; (800089c <__NVIC_SetPriority+0xd4>)
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b25b      	sxtb	r3, r3
 8000824:	089b      	lsrs	r3, r3, #2
 8000826:	430a      	orrs	r2, r1
 8000828:	33c0      	adds	r3, #192	; 0xc0
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800082e:	e031      	b.n	8000894 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <__NVIC_SetPriority+0xd8>)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	0019      	movs	r1, r3
 8000838:	230f      	movs	r3, #15
 800083a:	400b      	ands	r3, r1
 800083c:	3b08      	subs	r3, #8
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	3306      	adds	r3, #6
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	18d3      	adds	r3, r2, r3
 8000846:	3304      	adds	r3, #4
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1dfa      	adds	r2, r7, #7
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	0011      	movs	r1, r2
 8000850:	2203      	movs	r2, #3
 8000852:	400a      	ands	r2, r1
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	21ff      	movs	r1, #255	; 0xff
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	43d2      	mvns	r2, r2
 800085e:	401a      	ands	r2, r3
 8000860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	401a      	ands	r2, r3
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	2303      	movs	r3, #3
 8000872:	4003      	ands	r3, r0
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <__NVIC_SetPriority+0xd8>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	001c      	movs	r4, r3
 8000880:	230f      	movs	r3, #15
 8000882:	4023      	ands	r3, r4
 8000884:	3b08      	subs	r3, #8
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	430a      	orrs	r2, r1
 800088a:	3306      	adds	r3, #6
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	18c3      	adds	r3, r0, r3
 8000890:	3304      	adds	r3, #4
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b003      	add	sp, #12
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	210f      	movs	r1, #15
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	1c02      	adds	r2, r0, #0
 80008b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff81 	bl	80007c8 <__NVIC_SetPriority>
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	0002      	movs	r2, r0
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ff57 	bl	8000794 <__NVIC_EnableIRQ>
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f0:	b5b0      	push	{r4, r5, r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	f000 fbbf 	bl	8001082 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000904:	4bc9      	ldr	r3, [pc, #804]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	220c      	movs	r2, #12
 800090a:	4013      	ands	r3, r2
 800090c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800090e:	4bc7      	ldr	r3, [pc, #796]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	025b      	lsls	r3, r3, #9
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	d100      	bne.n	8000926 <HAL_RCC_OscConfig+0x36>
 8000924:	e07e      	b.n	8000a24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	2b08      	cmp	r3, #8
 800092a:	d007      	beq.n	800093c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	2b0c      	cmp	r3, #12
 8000930:	d112      	bne.n	8000958 <HAL_RCC_OscConfig+0x68>
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	025b      	lsls	r3, r3, #9
 8000938:	429a      	cmp	r2, r3
 800093a:	d10d      	bne.n	8000958 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800093c:	4bbb      	ldr	r3, [pc, #748]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	d100      	bne.n	800094a <HAL_RCC_OscConfig+0x5a>
 8000948:	e06b      	b.n	8000a22 <HAL_RCC_OscConfig+0x132>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d167      	bne.n	8000a22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	f000 fb95 	bl	8001082 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	025b      	lsls	r3, r3, #9
 8000960:	429a      	cmp	r2, r3
 8000962:	d107      	bne.n	8000974 <HAL_RCC_OscConfig+0x84>
 8000964:	4bb1      	ldr	r3, [pc, #708]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4bb0      	ldr	r3, [pc, #704]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	0249      	lsls	r1, r1, #9
 800096e:	430a      	orrs	r2, r1
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	e027      	b.n	80009c4 <HAL_RCC_OscConfig+0xd4>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	02db      	lsls	r3, r3, #11
 800097c:	429a      	cmp	r2, r3
 800097e:	d10e      	bne.n	800099e <HAL_RCC_OscConfig+0xae>
 8000980:	4baa      	ldr	r3, [pc, #680]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4ba9      	ldr	r3, [pc, #676]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	02c9      	lsls	r1, r1, #11
 800098a:	430a      	orrs	r2, r1
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	4ba7      	ldr	r3, [pc, #668]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4ba6      	ldr	r3, [pc, #664]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	0249      	lsls	r1, r1, #9
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e012      	b.n	80009c4 <HAL_RCC_OscConfig+0xd4>
 800099e:	4ba3      	ldr	r3, [pc, #652]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4ba2      	ldr	r3, [pc, #648]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 80009a4:	49a2      	ldr	r1, [pc, #648]	; (8000c30 <HAL_RCC_OscConfig+0x340>)
 80009a6:	400a      	ands	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	4ba0      	ldr	r3, [pc, #640]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	025b      	lsls	r3, r3, #9
 80009b2:	4013      	ands	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4b9c      	ldr	r3, [pc, #624]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b9b      	ldr	r3, [pc, #620]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 80009be:	499d      	ldr	r1, [pc, #628]	; (8000c34 <HAL_RCC_OscConfig+0x344>)
 80009c0:	400a      	ands	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d015      	beq.n	80009f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009cc:	f7ff fed8 	bl	8000780 <HAL_GetTick>
 80009d0:	0003      	movs	r3, r0
 80009d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80009d4:	e009      	b.n	80009ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d6:	f7ff fed3 	bl	8000780 <HAL_GetTick>
 80009da:	0002      	movs	r2, r0
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	2b64      	cmp	r3, #100	; 0x64
 80009e2:	d902      	bls.n	80009ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80009e4:	2303      	movs	r3, #3
 80009e6:	f000 fb4c 	bl	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80009ea:	4b90      	ldr	r3, [pc, #576]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	029b      	lsls	r3, r3, #10
 80009f2:	4013      	ands	r3, r2
 80009f4:	d0ef      	beq.n	80009d6 <HAL_RCC_OscConfig+0xe6>
 80009f6:	e015      	b.n	8000a24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f8:	f7ff fec2 	bl	8000780 <HAL_GetTick>
 80009fc:	0003      	movs	r3, r0
 80009fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a00:	e008      	b.n	8000a14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a02:	f7ff febd 	bl	8000780 <HAL_GetTick>
 8000a06:	0002      	movs	r2, r0
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b64      	cmp	r3, #100	; 0x64
 8000a0e:	d901      	bls.n	8000a14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000a10:	2303      	movs	r3, #3
 8000a12:	e336      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a14:	4b85      	ldr	r3, [pc, #532]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	029b      	lsls	r3, r3, #10
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	d1f0      	bne.n	8000a02 <HAL_RCC_OscConfig+0x112>
 8000a20:	e000      	b.n	8000a24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d100      	bne.n	8000a30 <HAL_RCC_OscConfig+0x140>
 8000a2e:	e099      	b.n	8000b64 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	2220      	movs	r2, #32
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d009      	beq.n	8000a52 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000a3e:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b7a      	ldr	r3, [pc, #488]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a44:	2120      	movs	r1, #32
 8000a46:	430a      	orrs	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	4393      	bics	r3, r2
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d005      	beq.n	8000a64 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	2b0c      	cmp	r3, #12
 8000a5c:	d13e      	bne.n	8000adc <HAL_RCC_OscConfig+0x1ec>
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d13b      	bne.n	8000adc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000a64:	4b71      	ldr	r3, [pc, #452]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d004      	beq.n	8000a78 <HAL_RCC_OscConfig+0x188>
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e304      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a78:	4b6c      	ldr	r3, [pc, #432]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4a6e      	ldr	r2, [pc, #440]	; (8000c38 <HAL_RCC_OscConfig+0x348>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	0019      	movs	r1, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	021a      	lsls	r2, r3, #8
 8000a88:	4b68      	ldr	r3, [pc, #416]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000a8e:	4b67      	ldr	r3, [pc, #412]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2209      	movs	r2, #9
 8000a94:	4393      	bics	r3, r2
 8000a96:	0019      	movs	r1, r3
 8000a98:	4b64      	ldr	r3, [pc, #400]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000aa0:	f000 fc42 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 8000aa4:	0001      	movs	r1, r0
 8000aa6:	4b61      	ldr	r3, [pc, #388]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	220f      	movs	r2, #15
 8000aae:	4013      	ands	r3, r2
 8000ab0:	4a62      	ldr	r2, [pc, #392]	; (8000c3c <HAL_RCC_OscConfig+0x34c>)
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
 8000ab4:	000a      	movs	r2, r1
 8000ab6:	40da      	lsrs	r2, r3
 8000ab8:	4b61      	ldr	r3, [pc, #388]	; (8000c40 <HAL_RCC_OscConfig+0x350>)
 8000aba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000abc:	4b61      	ldr	r3, [pc, #388]	; (8000c44 <HAL_RCC_OscConfig+0x354>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2513      	movs	r5, #19
 8000ac2:	197c      	adds	r4, r7, r5
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fd91 	bl	80005ec <HAL_InitTick>
 8000aca:	0003      	movs	r3, r0
 8000acc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000ace:	197b      	adds	r3, r7, r5
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d046      	beq.n	8000b64 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8000ad6:	197b      	adds	r3, r7, r5
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	e2d2      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d027      	beq.n	8000b32 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ae2:	4b52      	ldr	r3, [pc, #328]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2209      	movs	r2, #9
 8000ae8:	4393      	bics	r3, r2
 8000aea:	0019      	movs	r1, r3
 8000aec:	4b4f      	ldr	r3, [pc, #316]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af0:	430a      	orrs	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af4:	f7ff fe44 	bl	8000780 <HAL_GetTick>
 8000af8:	0003      	movs	r3, r0
 8000afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000afc:	e008      	b.n	8000b10 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000afe:	f7ff fe3f 	bl	8000780 <HAL_GetTick>
 8000b02:	0002      	movs	r2, r0
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d901      	bls.n	8000b10 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	e2b8      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2204      	movs	r2, #4
 8000b16:	4013      	ands	r3, r2
 8000b18:	d0f1      	beq.n	8000afe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b1a:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a46      	ldr	r2, [pc, #280]	; (8000c38 <HAL_RCC_OscConfig+0x348>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	0019      	movs	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	021a      	lsls	r2, r3, #8
 8000b2a:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	e018      	b.n	8000b64 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	438a      	bics	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fe1f 	bl	8000780 <HAL_GetTick>
 8000b42:	0003      	movs	r3, r0
 8000b44:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000b46:	e008      	b.n	8000b5a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b48:	f7ff fe1a 	bl	8000780 <HAL_GetTick>
 8000b4c:	0002      	movs	r2, r0
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d901      	bls.n	8000b5a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e293      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000b5a:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4013      	ands	r3, r2
 8000b62:	d1f1      	bne.n	8000b48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2210      	movs	r2, #16
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d100      	bne.n	8000b70 <HAL_RCC_OscConfig+0x280>
 8000b6e:	e0a2      	b.n	8000cb6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d140      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4013      	ands	r3, r2
 8000b80:	d005      	beq.n	8000b8e <HAL_RCC_OscConfig+0x29e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e279      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <HAL_RCC_OscConfig+0x358>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	0019      	movs	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	0a19      	lsrs	r1, r3, #8
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	061a      	lsls	r2, r3, #24
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	0b5b      	lsrs	r3, r3, #13
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	0212      	lsls	r2, r2, #8
 8000bc2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	210f      	movs	r1, #15
 8000bcc:	400b      	ands	r3, r1
 8000bce:	491b      	ldr	r1, [pc, #108]	; (8000c3c <HAL_RCC_OscConfig+0x34c>)
 8000bd0:	5ccb      	ldrb	r3, [r1, r3]
 8000bd2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_RCC_OscConfig+0x350>)
 8000bd6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_RCC_OscConfig+0x354>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2513      	movs	r5, #19
 8000bde:	197c      	adds	r4, r7, r5
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fd03 	bl	80005ec <HAL_InitTick>
 8000be6:	0003      	movs	r3, r0
 8000be8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000bea:	197b      	adds	r3, r7, r5
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d061      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	e244      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d040      	beq.n	8000c82 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_RCC_OscConfig+0x33c>)
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	0049      	lsls	r1, r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fdb7 	bl	8000780 <HAL_GetTick>
 8000c12:	0003      	movs	r3, r0
 8000c14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c16:	e019      	b.n	8000c4c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c18:	f7ff fdb2 	bl	8000780 <HAL_GetTick>
 8000c1c:	0002      	movs	r2, r0
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d912      	bls.n	8000c4c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e22b      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	fffeffff 	.word	0xfffeffff
 8000c34:	fffbffff 	.word	0xfffbffff
 8000c38:	ffffe0ff 	.word	0xffffe0ff
 8000c3c:	08001d1c 	.word	0x08001d1c
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000004 	.word	0x20000004
 8000c48:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c4c:	4bca      	ldr	r3, [pc, #808]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4013      	ands	r3, r2
 8000c56:	d0df      	beq.n	8000c18 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c58:	4bc7      	ldr	r3, [pc, #796]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4ac7      	ldr	r2, [pc, #796]	; (8000f7c <HAL_RCC_OscConfig+0x68c>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	0019      	movs	r1, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c66:	4bc4      	ldr	r3, [pc, #784]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c6c:	4bc2      	ldr	r3, [pc, #776]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	0a19      	lsrs	r1, r3, #8
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	061a      	lsls	r2, r3, #24
 8000c7a:	4bbf      	ldr	r3, [pc, #764]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	e019      	b.n	8000cb6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c82:	4bbd      	ldr	r3, [pc, #756]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4bbc      	ldr	r3, [pc, #752]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000c88:	49bd      	ldr	r1, [pc, #756]	; (8000f80 <HAL_RCC_OscConfig+0x690>)
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fd77 	bl	8000780 <HAL_GetTick>
 8000c92:	0003      	movs	r3, r0
 8000c94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c98:	f7ff fd72 	bl	8000780 <HAL_GetTick>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e1eb      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000caa:	4bb3      	ldr	r3, [pc, #716]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	d1f0      	bne.n	8000c98 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d036      	beq.n	8000d2e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d019      	beq.n	8000cfc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc8:	4bab      	ldr	r3, [pc, #684]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ccc:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd4:	f7ff fd54 	bl	8000780 <HAL_GetTick>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cde:	f7ff fd4f 	bl	8000780 <HAL_GetTick>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e1c8      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000cf0:	4ba1      	ldr	r3, [pc, #644]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d0f1      	beq.n	8000cde <HAL_RCC_OscConfig+0x3ee>
 8000cfa:	e018      	b.n	8000d2e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cfc:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d00:	4b9d      	ldr	r3, [pc, #628]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	438a      	bics	r2, r1
 8000d06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d08:	f7ff fd3a 	bl	8000780 <HAL_GetTick>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d12:	f7ff fd35 	bl	8000780 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e1ae      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d24:	4b94      	ldr	r3, [pc, #592]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d28:	2202      	movs	r2, #2
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d1f1      	bne.n	8000d12 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2204      	movs	r2, #4
 8000d34:	4013      	ands	r3, r2
 8000d36:	d100      	bne.n	8000d3a <HAL_RCC_OscConfig+0x44a>
 8000d38:	e0ae      	b.n	8000e98 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3a:	2023      	movs	r0, #35	; 0x23
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d42:	4b8d      	ldr	r3, [pc, #564]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	055b      	lsls	r3, r3, #21
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d109      	bne.n	8000d62 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b8a      	ldr	r3, [pc, #552]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d52:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0549      	lsls	r1, r1, #21
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000d5c:	183b      	adds	r3, r7, r0
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d62:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <HAL_RCC_OscConfig+0x694>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d11a      	bne.n	8000da4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d6e:	4b85      	ldr	r3, [pc, #532]	; (8000f84 <HAL_RCC_OscConfig+0x694>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b84      	ldr	r3, [pc, #528]	; (8000f84 <HAL_RCC_OscConfig+0x694>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	0049      	lsls	r1, r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fd00 	bl	8000780 <HAL_GetTick>
 8000d80:	0003      	movs	r3, r0
 8000d82:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d86:	f7ff fcfb 	bl	8000780 <HAL_GetTick>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b64      	cmp	r3, #100	; 0x64
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e174      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d98:	4b7a      	ldr	r3, [pc, #488]	; (8000f84 <HAL_RCC_OscConfig+0x694>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4013      	ands	r3, r2
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d107      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x4d0>
 8000db0:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000db4:	4b70      	ldr	r3, [pc, #448]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	0049      	lsls	r1, r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8000dbe:	e031      	b.n	8000e24 <HAL_RCC_OscConfig+0x534>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x4f2>
 8000dc8:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dcc:	4b6a      	ldr	r3, [pc, #424]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000dce:	496c      	ldr	r1, [pc, #432]	; (8000f80 <HAL_RCC_OscConfig+0x690>)
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8000dd4:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dd8:	4b67      	ldr	r3, [pc, #412]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000dda:	496b      	ldr	r1, [pc, #428]	; (8000f88 <HAL_RCC_OscConfig+0x698>)
 8000ddc:	400a      	ands	r2, r1
 8000dde:	651a      	str	r2, [r3, #80]	; 0x50
 8000de0:	e020      	b.n	8000e24 <HAL_RCC_OscConfig+0x534>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	23a0      	movs	r3, #160	; 0xa0
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d10e      	bne.n	8000e0c <HAL_RCC_OscConfig+0x51c>
 8000dee:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000df2:	4b61      	ldr	r3, [pc, #388]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	00c9      	lsls	r1, r1, #3
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e00:	4b5d      	ldr	r3, [pc, #372]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	0049      	lsls	r1, r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	651a      	str	r2, [r3, #80]	; 0x50
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0x534>
 8000e0c:	4b5a      	ldr	r3, [pc, #360]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e10:	4b59      	ldr	r3, [pc, #356]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e12:	495b      	ldr	r1, [pc, #364]	; (8000f80 <HAL_RCC_OscConfig+0x690>)
 8000e14:	400a      	ands	r2, r1
 8000e16:	651a      	str	r2, [r3, #80]	; 0x50
 8000e18:	4b57      	ldr	r3, [pc, #348]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e1c:	4b56      	ldr	r3, [pc, #344]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e1e:	495a      	ldr	r1, [pc, #360]	; (8000f88 <HAL_RCC_OscConfig+0x698>)
 8000e20:	400a      	ands	r2, r1
 8000e22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d015      	beq.n	8000e58 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fca8 	bl	8000780 <HAL_GetTick>
 8000e30:	0003      	movs	r3, r0
 8000e32:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e34:	e009      	b.n	8000e4a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f7ff fca3 	bl	8000780 <HAL_GetTick>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	4a52      	ldr	r2, [pc, #328]	; (8000f8c <HAL_RCC_OscConfig+0x69c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e11b      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e4a:	4b4b      	ldr	r3, [pc, #300]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4013      	ands	r3, r2
 8000e54:	d0ef      	beq.n	8000e36 <HAL_RCC_OscConfig+0x546>
 8000e56:	e014      	b.n	8000e82 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc92 	bl	8000780 <HAL_GetTick>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e60:	e009      	b.n	8000e76 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fc8d 	bl	8000780 <HAL_GetTick>
 8000e66:	0002      	movs	r2, r0
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	4a47      	ldr	r2, [pc, #284]	; (8000f8c <HAL_RCC_OscConfig+0x69c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e105      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d1ef      	bne.n	8000e62 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e82:	2323      	movs	r3, #35	; 0x23
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d105      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000e92:	493f      	ldr	r1, [pc, #252]	; (8000f90 <HAL_RCC_OscConfig+0x6a0>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d049      	beq.n	8000f36 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d026      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eba:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <HAL_RCC_OscConfig+0x6a4>)
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <HAL_RCC_OscConfig+0x6a4>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0189      	lsls	r1, r1, #6
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fc56 	bl	8000780 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eda:	f7ff fc51 	bl	8000780 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0ca      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d0f1      	beq.n	8000eda <HAL_RCC_OscConfig+0x5ea>
 8000ef6:	e01e      	b.n	8000f36 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	438a      	bics	r2, r1
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_RCC_OscConfig+0x6a4>)
 8000f06:	6a1a      	ldr	r2, [r3, #32]
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_RCC_OscConfig+0x6a4>)
 8000f0a:	4923      	ldr	r1, [pc, #140]	; (8000f98 <HAL_RCC_OscConfig+0x6a8>)
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc36 	bl	8000780 <HAL_GetTick>
 8000f14:	0003      	movs	r3, r0
 8000f16:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f1a:	f7ff fc31 	bl	8000780 <HAL_GetTick>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e0aa      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2202      	movs	r2, #2
 8000f32:	4013      	ands	r3, r2
 8000f34:	d1f1      	bne.n	8000f1a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <HAL_RCC_OscConfig+0x650>
 8000f3e:	e09f      	b.n	8001080 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x658>
 8000f46:	e078      	b.n	800103a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d159      	bne.n	8001004 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_RCC_OscConfig+0x688>)
 8000f56:	4911      	ldr	r1, [pc, #68]	; (8000f9c <HAL_RCC_OscConfig+0x6ac>)
 8000f58:	400a      	ands	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fc10 	bl	8000780 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f64:	e01c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fc0b 	bl	8000780 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d915      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e084      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	ffff1fff 	.word	0xffff1fff
 8000f80:	fffffeff 	.word	0xfffffeff
 8000f84:	40007000 	.word	0x40007000
 8000f88:	fffffbff 	.word	0xfffffbff
 8000f8c:	00001388 	.word	0x00001388
 8000f90:	efffffff 	.word	0xefffffff
 8000f94:	40010000 	.word	0x40010000
 8000f98:	ffffdfff 	.word	0xffffdfff
 8000f9c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	049b      	lsls	r3, r3, #18
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d1dc      	bne.n	8000f66 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a37      	ldr	r2, [pc, #220]	; (8001090 <HAL_RCC_OscConfig+0x7a0>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	0449      	lsls	r1, r1, #17
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fbd1 	bl	8000780 <HAL_GetTick>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fbcc 	bl	8000780 <HAL_GetTick>
 8000fe8:	0002      	movs	r2, r0
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e045      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	049b      	lsls	r3, r3, #18
 8000ffe:	4013      	ands	r3, r2
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x6f4>
 8001002:	e03d      	b.n	8001080 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 800100a:	4922      	ldr	r1, [pc, #136]	; (8001094 <HAL_RCC_OscConfig+0x7a4>)
 800100c:	400a      	ands	r2, r1
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fbb6 	bl	8000780 <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff fbb1 	bl	8000780 <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e02a      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	049b      	lsls	r3, r3, #18
 8001034:	4013      	ands	r3, r2
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x72a>
 8001038:	e022      	b.n	8001080 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e01d      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_RCC_OscConfig+0x79c>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	401a      	ands	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	429a      	cmp	r2, r3
 800105a:	d10f      	bne.n	800107c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	23f0      	movs	r3, #240	; 0xf0
 8001060:	039b      	lsls	r3, r3, #14
 8001062:	401a      	ands	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001068:	429a      	cmp	r2, r3
 800106a:	d107      	bne.n	800107c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	23c0      	movs	r3, #192	; 0xc0
 8001070:	041b      	lsls	r3, r3, #16
 8001072:	401a      	ands	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b00a      	add	sp, #40	; 0x28
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40021000 	.word	0x40021000
 8001090:	ff02ffff 	.word	0xff02ffff
 8001094:	feffffff 	.word	0xfeffffff

08001098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e128      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b96      	ldr	r3, [pc, #600]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4013      	ands	r3, r2
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d91e      	bls.n	80010f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b93      	ldr	r3, [pc, #588]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	4393      	bics	r3, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	4b90      	ldr	r3, [pc, #576]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010cc:	f7ff fb58 	bl	8000780 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d4:	e009      	b.n	80010ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d6:	f7ff fb53 	bl	8000780 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4a8a      	ldr	r2, [pc, #552]	; (800130c <HAL_RCC_ClockConfig+0x274>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e109      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b87      	ldr	r3, [pc, #540]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4013      	ands	r3, r2
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d1ee      	bne.n	80010d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d009      	beq.n	8001116 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001102:	4b83      	ldr	r3, [pc, #524]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	22f0      	movs	r2, #240	; 0xf0
 8001108:	4393      	bics	r3, r2
 800110a:	0019      	movs	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	4b7f      	ldr	r3, [pc, #508]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 8001112:	430a      	orrs	r2, r1
 8001114:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d100      	bne.n	8001122 <HAL_RCC_ClockConfig+0x8a>
 8001120:	e089      	b.n	8001236 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d107      	bne.n	800113a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800112a:	4b79      	ldr	r3, [pc, #484]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	029b      	lsls	r3, r3, #10
 8001132:	4013      	ands	r3, r2
 8001134:	d120      	bne.n	8001178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0e1      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d107      	bne.n	8001152 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001142:	4b73      	ldr	r3, [pc, #460]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	049b      	lsls	r3, r3, #18
 800114a:	4013      	ands	r3, r2
 800114c:	d114      	bne.n	8001178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e0d5      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d106      	bne.n	8001168 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800115a:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2204      	movs	r2, #4
 8001160:	4013      	ands	r3, r2
 8001162:	d109      	bne.n	8001178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0ca      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001168:	4b69      	ldr	r3, [pc, #420]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4013      	ands	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0c2      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001178:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2203      	movs	r2, #3
 800117e:	4393      	bics	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800118c:	f7ff faf8 	bl	8000780 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d111      	bne.n	80011c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800119c:	e009      	b.n	80011b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119e:	f7ff faef 	bl	8000780 <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	4a58      	ldr	r2, [pc, #352]	; (800130c <HAL_RCC_ClockConfig+0x274>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0a5      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b2:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	220c      	movs	r2, #12
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d1ef      	bne.n	800119e <HAL_RCC_ClockConfig+0x106>
 80011be:	e03a      	b.n	8001236 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d111      	bne.n	80011ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c8:	e009      	b.n	80011de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ca:	f7ff fad9 	bl	8000780 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	4a4d      	ldr	r2, [pc, #308]	; (800130c <HAL_RCC_ClockConfig+0x274>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e08f      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011de:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	220c      	movs	r2, #12
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b0c      	cmp	r3, #12
 80011e8:	d1ef      	bne.n	80011ca <HAL_RCC_ClockConfig+0x132>
 80011ea:	e024      	b.n	8001236 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d11b      	bne.n	800122c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f4:	e009      	b.n	800120a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f6:	f7ff fac3 	bl	8000780 <HAL_GetTick>
 80011fa:	0002      	movs	r2, r0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	4a42      	ldr	r2, [pc, #264]	; (800130c <HAL_RCC_ClockConfig+0x274>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e079      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	220c      	movs	r2, #12
 8001210:	4013      	ands	r3, r2
 8001212:	2b04      	cmp	r3, #4
 8001214:	d1ef      	bne.n	80011f6 <HAL_RCC_ClockConfig+0x15e>
 8001216:	e00e      	b.n	8001236 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f7ff fab2 	bl	8000780 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	4a3a      	ldr	r2, [pc, #232]	; (800130c <HAL_RCC_ClockConfig+0x274>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e068      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800122c:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	220c      	movs	r2, #12
 8001232:	4013      	ands	r3, r2
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2201      	movs	r2, #1
 800123c:	4013      	ands	r3, r2
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d21e      	bcs.n	8001282 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	4393      	bics	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001256:	f7ff fa93 	bl	8000780 <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800125e:	e009      	b.n	8001274 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001260:	f7ff fa8e 	bl	8000780 <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	4a28      	ldr	r2, [pc, #160]	; (800130c <HAL_RCC_ClockConfig+0x274>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e044      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_ClockConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	4013      	ands	r3, r2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d1ee      	bne.n	8001260 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2204      	movs	r2, #4
 8001288:	4013      	ands	r3, r2
 800128a:	d009      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a20      	ldr	r2, [pc, #128]	; (8001314 <HAL_RCC_ClockConfig+0x27c>)
 8001292:	4013      	ands	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 800129c:	430a      	orrs	r2, r1
 800129e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2208      	movs	r2, #8
 80012a6:	4013      	ands	r3, r2
 80012a8:	d00a      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_RCC_ClockConfig+0x280>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00da      	lsls	r2, r3, #3
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c0:	f000 f832 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 80012c4:	0001      	movs	r1, r0
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_RCC_ClockConfig+0x278>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	220f      	movs	r2, #15
 80012ce:	4013      	ands	r3, r2
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_RCC_ClockConfig+0x284>)
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	000a      	movs	r2, r1
 80012d6:	40da      	lsrs	r2, r3
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_ClockConfig+0x288>)
 80012da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_RCC_ClockConfig+0x28c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	250b      	movs	r5, #11
 80012e2:	197c      	adds	r4, r7, r5
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff f981 	bl	80005ec <HAL_InitTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80012ee:	197b      	adds	r3, r7, r5
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80012f6:	197b      	adds	r3, r7, r5
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	e000      	b.n	80012fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	40022000 	.word	0x40022000
 800130c:	00001388 	.word	0x00001388
 8001310:	40021000 	.word	0x40021000
 8001314:	fffff8ff 	.word	0xfffff8ff
 8001318:	ffffc7ff 	.word	0xffffc7ff
 800131c:	08001d1c 	.word	0x08001d1c
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800132e:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <HAL_RCC_GetSysClockFreq+0x138>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001336:	230c      	movs	r3, #12
 8001338:	4013      	ands	r3, r2
 800133a:	2b0c      	cmp	r3, #12
 800133c:	d014      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x40>
 800133e:	d900      	bls.n	8001342 <HAL_RCC_GetSysClockFreq+0x1a>
 8001340:	e07b      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x112>
 8001342:	2b04      	cmp	r3, #4
 8001344:	d002      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x24>
 8001346:	2b08      	cmp	r3, #8
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x3a>
 800134a:	e076      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800134c:	4b44      	ldr	r3, [pc, #272]	; (8001460 <HAL_RCC_GetSysClockFreq+0x138>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2210      	movs	r2, #16
 8001352:	4013      	ands	r3, r2
 8001354:	d002      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800135a:	e07c      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <HAL_RCC_GetSysClockFreq+0x140>)
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001360:	e079      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <HAL_RCC_GetSysClockFreq+0x144>)
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001366:	e076      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	0c9a      	lsrs	r2, r3, #18
 800136c:	230f      	movs	r3, #15
 800136e:	401a      	ands	r2, r3
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_RCC_GetSysClockFreq+0x148>)
 8001372:	5c9b      	ldrb	r3, [r3, r2]
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	0d9a      	lsrs	r2, r3, #22
 800137a:	2303      	movs	r3, #3
 800137c:	4013      	ands	r3, r2
 800137e:	3301      	adds	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_RCC_GetSysClockFreq+0x138>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	025b      	lsls	r3, r3, #9
 800138a:	4013      	ands	r3, r2
 800138c:	d01a      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <HAL_RCC_GetSysClockFreq+0x144>)
 8001398:	2300      	movs	r3, #0
 800139a:	69b8      	ldr	r0, [r7, #24]
 800139c:	69f9      	ldr	r1, [r7, #28]
 800139e:	f7fe ff5f 	bl	8000260 <__aeabi_lmul>
 80013a2:	0002      	movs	r2, r0
 80013a4:	000b      	movs	r3, r1
 80013a6:	0010      	movs	r0, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f7fe ff33 	bl	8000220 <__aeabi_uldivmod>
 80013ba:	0002      	movs	r2, r0
 80013bc:	000b      	movs	r3, r1
 80013be:	0013      	movs	r3, r2
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
 80013c2:	e037      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_RCC_GetSysClockFreq+0x138>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2210      	movs	r2, #16
 80013ca:	4013      	ands	r3, r2
 80013cc:	d01a      	beq.n	8001404 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_RCC_GetSysClockFreq+0x13c>)
 80013d8:	2300      	movs	r3, #0
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	68f9      	ldr	r1, [r7, #12]
 80013de:	f7fe ff3f 	bl	8000260 <__aeabi_lmul>
 80013e2:	0002      	movs	r2, r0
 80013e4:	000b      	movs	r3, r1
 80013e6:	0010      	movs	r0, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f7fe ff13 	bl	8000220 <__aeabi_uldivmod>
 80013fa:	0002      	movs	r2, r0
 80013fc:	000b      	movs	r3, r1
 80013fe:	0013      	movs	r3, r2
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
 8001402:	e017      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	0018      	movs	r0, r3
 8001408:	2300      	movs	r3, #0
 800140a:	0019      	movs	r1, r3
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_RCC_GetSysClockFreq+0x140>)
 800140e:	2300      	movs	r3, #0
 8001410:	f7fe ff26 	bl	8000260 <__aeabi_lmul>
 8001414:	0002      	movs	r2, r0
 8001416:	000b      	movs	r3, r1
 8001418:	0010      	movs	r0, r2
 800141a:	0019      	movs	r1, r3
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	001c      	movs	r4, r3
 8001420:	2300      	movs	r3, #0
 8001422:	001d      	movs	r5, r3
 8001424:	0022      	movs	r2, r4
 8001426:	002b      	movs	r3, r5
 8001428:	f7fe fefa 	bl	8000220 <__aeabi_uldivmod>
 800142c:	0002      	movs	r2, r0
 800142e:	000b      	movs	r3, r1
 8001430:	0013      	movs	r3, r2
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001438:	e00d      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_GetSysClockFreq+0x138>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0b5b      	lsrs	r3, r3, #13
 8001440:	2207      	movs	r2, #7
 8001442:	4013      	ands	r3, r2
 8001444:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3301      	adds	r3, #1
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	0212      	lsls	r2, r2, #8
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001454:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b00e      	add	sp, #56	; 0x38
 800145e:	bdb0      	pop	{r4, r5, r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	003d0900 	.word	0x003d0900
 8001468:	00f42400 	.word	0x00f42400
 800146c:	007a1200 	.word	0x007a1200
 8001470:	08001d34 	.word	0x08001d34

08001474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <HAL_RCC_GetHCLKFreq+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	20000000 	.word	0x20000000

08001488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800148c:	f7ff fff2 	bl	8001474 <HAL_RCC_GetHCLKFreq>
 8001490:	0001      	movs	r1, r0
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	2207      	movs	r2, #7
 800149a:	4013      	ands	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	40d9      	lsrs	r1, r3
 80014a2:	000b      	movs	r3, r1
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08001d2c 	.word	0x08001d2c

080014b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	220f      	movs	r2, #15
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2203      	movs	r2, #3
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_RCC_GetClockConfig+0x5c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	22f0      	movs	r2, #240	; 0xf0
 80014d6:	401a      	ands	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_RCC_GetClockConfig+0x5c>)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	23e0      	movs	r3, #224	; 0xe0
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_GetClockConfig+0x5c>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	23e0      	movs	r3, #224	; 0xe0
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_RCC_GetClockConfig+0x60>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	401a      	ands	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	40021000 	.word	0x40021000
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e032      	b.n	8001590 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2239      	movs	r2, #57	; 0x39
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2238      	movs	r2, #56	; 0x38
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f829 	bl	8001598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2239      	movs	r2, #57	; 0x39
 800154a:	2102      	movs	r1, #2
 800154c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	0019      	movs	r1, r3
 8001558:	0010      	movs	r0, r2
 800155a:	f000 f97f 	bl	800185c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	223e      	movs	r2, #62	; 0x3e
 8001562:	2101      	movs	r1, #1
 8001564:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	223a      	movs	r2, #58	; 0x3a
 800156a:	2101      	movs	r1, #1
 800156c:	5499      	strb	r1, [r3, r2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	223b      	movs	r2, #59	; 0x3b
 8001572:	2101      	movs	r1, #1
 8001574:	5499      	strb	r1, [r3, r2]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	223c      	movs	r2, #60	; 0x3c
 800157a:	2101      	movs	r1, #1
 800157c:	5499      	strb	r1, [r3, r2]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	223d      	movs	r2, #61	; 0x3d
 8001582:	2101      	movs	r1, #1
 8001584:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2239      	movs	r2, #57	; 0x39
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b002      	add	sp, #8
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2239      	movs	r2, #57	; 0x39
 80015b4:	5c9b      	ldrb	r3, [r3, r2]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d001      	beq.n	80015c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e03b      	b.n	8001638 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2239      	movs	r2, #57	; 0x39
 80015c4:	2102      	movs	r1, #2
 80015c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	05db      	lsls	r3, r3, #23
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d00e      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x5a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_TIM_Base_Start_IT+0x98>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x5a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_TIM_Base_Start_IT+0x9c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x5a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_TIM_Base_Start_IT+0xa0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d111      	bne.n	8001626 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2207      	movs	r2, #7
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b06      	cmp	r3, #6
 8001612:	d010      	beq.n	8001636 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001624:	e007      	b.n	8001636 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40000400 	.word	0x40000400
 8001644:	40010800 	.word	0x40010800
 8001648:	40011400 	.word	0x40011400

0800164c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	2b02      	cmp	r3, #2
 8001660:	d124      	bne.n	80016ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2202      	movs	r2, #2
 800166a:	4013      	ands	r3, r2
 800166c:	2b02      	cmp	r3, #2
 800166e:	d11d      	bne.n	80016ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2203      	movs	r2, #3
 8001676:	4252      	negs	r2, r2
 8001678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2203      	movs	r2, #3
 8001688:	4013      	ands	r3, r2
 800168a:	d004      	beq.n	8001696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	0018      	movs	r0, r3
 8001690:	f000 f8cc 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 8001694:	e007      	b.n	80016a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f000 f8bf 	bl	800181c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f000 f8cb 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2204      	movs	r2, #4
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d125      	bne.n	8001706 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2204      	movs	r2, #4
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d11e      	bne.n	8001706 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2205      	movs	r2, #5
 80016ce:	4252      	negs	r2, r2
 80016d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	23c0      	movs	r3, #192	; 0xc0
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d004      	beq.n	80016f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 f89f 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 80016ee:	e007      	b.n	8001700 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 f892 	bl	800181c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 f89e 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2208      	movs	r2, #8
 800170e:	4013      	ands	r3, r2
 8001710:	2b08      	cmp	r3, #8
 8001712:	d124      	bne.n	800175e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2208      	movs	r2, #8
 800171c:	4013      	ands	r3, r2
 800171e:	2b08      	cmp	r3, #8
 8001720:	d11d      	bne.n	800175e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2209      	movs	r2, #9
 8001728:	4252      	negs	r2, r2
 800172a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2204      	movs	r2, #4
 8001730:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	2203      	movs	r2, #3
 800173a:	4013      	ands	r3, r2
 800173c:	d004      	beq.n	8001748 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	0018      	movs	r0, r3
 8001742:	f000 f873 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 8001746:	e007      	b.n	8001758 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0018      	movs	r0, r3
 800174c:	f000 f866 	bl	800181c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	0018      	movs	r0, r3
 8001754:	f000 f872 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2210      	movs	r2, #16
 8001766:	4013      	ands	r3, r2
 8001768:	2b10      	cmp	r3, #16
 800176a:	d125      	bne.n	80017b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2210      	movs	r2, #16
 8001774:	4013      	ands	r3, r2
 8001776:	2b10      	cmp	r3, #16
 8001778:	d11e      	bne.n	80017b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2211      	movs	r2, #17
 8001780:	4252      	negs	r2, r2
 8001782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2208      	movs	r2, #8
 8001788:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	23c0      	movs	r3, #192	; 0xc0
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d004      	beq.n	80017a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	0018      	movs	r0, r3
 800179c:	f000 f846 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 80017a0:	e007      	b.n	80017b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 f839 	bl	800181c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 f845 	bl	800183c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10f      	bne.n	80017e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d108      	bne.n	80017e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2202      	movs	r2, #2
 80017da:	4252      	negs	r2, r2
 80017dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7fe fed7 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2240      	movs	r2, #64	; 0x40
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b40      	cmp	r3, #64	; 0x40
 80017f2:	d10f      	bne.n	8001814 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b40      	cmp	r3, #64	; 0x40
 8001800:	d108      	bne.n	8001814 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2241      	movs	r2, #65	; 0x41
 8001808:	4252      	negs	r2, r2
 800180a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f81c 	bl	800184c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}

0800185c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	05db      	lsls	r3, r3, #23
 8001872:	429a      	cmp	r2, r3
 8001874:	d00b      	beq.n	800188e <TIM_Base_SetConfig+0x32>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a23      	ldr	r2, [pc, #140]	; (8001908 <TIM_Base_SetConfig+0xac>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <TIM_Base_SetConfig+0x32>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <TIM_Base_SetConfig+0xb0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d003      	beq.n	800188e <TIM_Base_SetConfig+0x32>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <TIM_Base_SetConfig+0xb4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d108      	bne.n	80018a0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2270      	movs	r2, #112	; 0x70
 8001892:	4393      	bics	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d00b      	beq.n	80018c2 <TIM_Base_SetConfig+0x66>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <TIM_Base_SetConfig+0xac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <TIM_Base_SetConfig+0x66>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a15      	ldr	r2, [pc, #84]	; (800190c <TIM_Base_SetConfig+0xb0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d003      	beq.n	80018c2 <TIM_Base_SetConfig+0x66>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <TIM_Base_SetConfig+0xb4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d108      	bne.n	80018d4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <TIM_Base_SetConfig+0xb8>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	4393      	bics	r3, r2
 80018da:	001a      	movs	r2, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	615a      	str	r2, [r3, #20]
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40000400 	.word	0x40000400
 800190c:	40010800 	.word	0x40010800
 8001910:	40011400 	.word	0x40011400
 8001914:	fffffcff 	.word	0xfffffcff

08001918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001922:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <xTaskIncrementTick+0x1ec>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d000      	beq.n	800192c <xTaskIncrementTick+0x14>
 800192a:	e0e0      	b.n	8001aee <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800192c:	4b76      	ldr	r3, [pc, #472]	; (8001b08 <xTaskIncrementTick+0x1f0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001934:	4b74      	ldr	r3, [pc, #464]	; (8001b08 <xTaskIncrementTick+0x1f0>)
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d117      	bne.n	8001970 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8001940:	4b72      	ldr	r3, [pc, #456]	; (8001b0c <xTaskIncrementTick+0x1f4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <xTaskIncrementTick+0x36>
 800194a:	b672      	cpsid	i
 800194c:	e7fe      	b.n	800194c <xTaskIncrementTick+0x34>
 800194e:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <xTaskIncrementTick+0x1f4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	4b6e      	ldr	r3, [pc, #440]	; (8001b10 <xTaskIncrementTick+0x1f8>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b6c      	ldr	r3, [pc, #432]	; (8001b0c <xTaskIncrementTick+0x1f4>)
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <xTaskIncrementTick+0x1f8>)
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b6c      	ldr	r3, [pc, #432]	; (8001b14 <xTaskIncrementTick+0x1fc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <xTaskIncrementTick+0x1fc>)
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f000 f932 	bl	8001bd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001970:	4b69      	ldr	r3, [pc, #420]	; (8001b18 <xTaskIncrementTick+0x200>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	429a      	cmp	r2, r3
 8001978:	d200      	bcs.n	800197c <xTaskIncrementTick+0x64>
 800197a:	e0a4      	b.n	8001ac6 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800197c:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <xTaskIncrementTick+0x1f4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001986:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <xTaskIncrementTick+0x200>)
 8001988:	2201      	movs	r2, #1
 800198a:	4252      	negs	r2, r2
 800198c:	601a      	str	r2, [r3, #0]
                    break;
 800198e:	e09a      	b.n	8001ac6 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <xTaskIncrementTick+0x1f4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d203      	bcs.n	80019b0 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80019a8:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <xTaskIncrementTick+0x200>)
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80019ae:	e08a      	b.n	8001ac6 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68d2      	ldr	r2, [r2, #12]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	6892      	ldr	r2, [r2, #8]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	3304      	adds	r3, #4
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d103      	bne.n	80019de <xTaskIncrementTick+0xc6>
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d01e      	beq.n	8001a34 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	6a12      	ldr	r2, [r2, #32]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	69d2      	ldr	r2, [r2, #28]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	3318      	adds	r3, #24
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d103      	bne.n	8001a24 <xTaskIncrementTick+0x10c>
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2200      	movs	r2, #0
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1e5a      	subs	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <xTaskIncrementTick+0x204>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d903      	bls.n	8001a48 <xTaskIncrementTick+0x130>
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <xTaskIncrementTick+0x204>)
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	4934      	ldr	r1, [pc, #208]	; (8001b20 <xTaskIncrementTick+0x208>)
 8001a4e:	0013      	movs	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	189b      	adds	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	18cb      	adds	r3, r1, r3
 8001a58:	3304      	adds	r3, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	3204      	adds	r2, #4
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1d1a      	adds	r2, r3, #4
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	0013      	movs	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	189b      	adds	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <xTaskIncrementTick+0x208>)
 8001a8c:	189a      	adds	r2, r3, r2
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a96:	4922      	ldr	r1, [pc, #136]	; (8001b20 <xTaskIncrementTick+0x208>)
 8001a98:	0013      	movs	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	189b      	adds	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	585b      	ldr	r3, [r3, r1]
 8001aa2:	1c58      	adds	r0, r3, #1
 8001aa4:	491e      	ldr	r1, [pc, #120]	; (8001b20 <xTaskIncrementTick+0x208>)
 8001aa6:	0013      	movs	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	189b      	adds	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	5058      	str	r0, [r3, r1]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <xTaskIncrementTick+0x20c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d200      	bcs.n	8001ac0 <xTaskIncrementTick+0x1a8>
 8001abe:	e75d      	b.n	800197c <xTaskIncrementTick+0x64>
                            {
                                xSwitchRequired = pdTRUE;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ac4:	e75a      	b.n	800197c <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <xTaskIncrementTick+0x20c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	4914      	ldr	r1, [pc, #80]	; (8001b20 <xTaskIncrementTick+0x208>)
 8001ace:	0013      	movs	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	585b      	ldr	r3, [r3, r1]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d901      	bls.n	8001ae0 <xTaskIncrementTick+0x1c8>
                {
                    xSwitchRequired = pdTRUE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <xTaskIncrementTick+0x210>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <xTaskIncrementTick+0x1e0>
                {
                    xSwitchRequired = pdTRUE;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	e004      	b.n	8001af8 <xTaskIncrementTick+0x1e0>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <xTaskIncrementTick+0x214>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <xTaskIncrementTick+0x214>)
 8001af6:	601a      	str	r2, [r3, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001af8:	69fb      	ldr	r3, [r7, #28]
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b008      	add	sp, #32
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	200000b0 	.word	0x200000b0
 8001b08:	20000098 	.word	0x20000098
 8001b0c:	20000090 	.word	0x20000090
 8001b10:	20000094 	.word	0x20000094
 8001b14:	200000a8 	.word	0x200000a8
 8001b18:	200000ac 	.word	0x200000ac
 8001b1c:	2000009c 	.word	0x2000009c
 8001b20:	2000002c 	.word	0x2000002c
 8001b24:	20000028 	.word	0x20000028
 8001b28:	200000a4 	.word	0x200000a4
 8001b2c:	200000a0 	.word	0x200000a0

08001b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <vTaskSwitchContext+0x90>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <vTaskSwitchContext+0x94>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001b44:	e037      	b.n	8001bb6 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <vTaskSwitchContext+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <vTaskSwitchContext+0x98>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	e007      	b.n	8001b64 <vTaskSwitchContext+0x34>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <vTaskSwitchContext+0x2e>
 8001b5a:	b672      	cpsid	i
 8001b5c:	e7fe      	b.n	8001b5c <vTaskSwitchContext+0x2c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	4919      	ldr	r1, [pc, #100]	; (8001bcc <vTaskSwitchContext+0x9c>)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	0013      	movs	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	189b      	adds	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	585b      	ldr	r3, [r3, r1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0ee      	beq.n	8001b54 <vTaskSwitchContext+0x24>
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	0013      	movs	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	189b      	adds	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <vTaskSwitchContext+0x9c>)
 8001b82:	189b      	adds	r3, r3, r2
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3308      	adds	r3, #8
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d104      	bne.n	8001ba6 <vTaskSwitchContext+0x76>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <vTaskSwitchContext+0xa0>)
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <vTaskSwitchContext+0x98>)
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	200000b0 	.word	0x200000b0
 8001bc4:	200000a4 	.word	0x200000a4
 8001bc8:	2000009c 	.word	0x2000009c
 8001bcc:	2000002c 	.word	0x2000002c
 8001bd0:	20000028 	.word	0x20000028

08001bd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <prvResetNextTaskUnblockTime+0x2c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <prvResetNextTaskUnblockTime+0x30>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	4252      	negs	r2, r2
 8001be8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001bea:	e005      	b.n	8001bf8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <prvResetNextTaskUnblockTime+0x2c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <prvResetNextTaskUnblockTime+0x30>)
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	20000090 	.word	0x20000090
 8001c04:	200000ac 	.word	0x200000ac

08001c08 <SVC_Handler>:
    }
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8001c12:	f3ef 8010 	mrs	r0, PRIMASK
 8001c16:	b672      	cpsid	i
 8001c18:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	0018      	movs	r0, r3

08001c1e <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8001c1e:	f380 8810 	msr	PRIMASK, r0
 8001c22:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8001c24:	46c0      	nop			; (mov r8, r8)
	...

08001c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001c30:	f3ef 8009 	mrs	r0, PSP
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <pxCurrentTCBConst>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	3820      	subs	r0, #32
 8001c3a:	6010      	str	r0, [r2, #0]
 8001c3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001c3e:	4644      	mov	r4, r8
 8001c40:	464d      	mov	r5, r9
 8001c42:	4656      	mov	r6, sl
 8001c44:	465f      	mov	r7, fp
 8001c46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001c48:	b508      	push	{r3, lr}
 8001c4a:	b672      	cpsid	i
 8001c4c:	f7ff ff70 	bl	8001b30 <vTaskSwitchContext>
 8001c50:	b662      	cpsie	i
 8001c52:	bc0c      	pop	{r2, r3}
 8001c54:	6811      	ldr	r1, [r2, #0]
 8001c56:	6808      	ldr	r0, [r1, #0]
 8001c58:	3010      	adds	r0, #16
 8001c5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001c5c:	46a0      	mov	r8, r4
 8001c5e:	46a9      	mov	r9, r5
 8001c60:	46b2      	mov	sl, r6
 8001c62:	46bb      	mov	fp, r7
 8001c64:	f380 8809 	msr	PSP, r0
 8001c68:	3820      	subs	r0, #32
 8001c6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8001c6c:	4718      	bx	r3
 8001c6e:	46c0      	nop			; (mov r8, r8)

08001c70 <pxCurrentTCBConst>:
 8001c70:	20000028 	.word	0x20000028
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46c0      	nop			; (mov r8, r8)

08001c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8001c7e:	f7ff ffc8 	bl	8001c12 <ulSetInterruptMaskFromISR>
 8001c82:	0003      	movs	r3, r0
 8001c84:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c86:	f7ff fe47 	bl	8001918 <xTaskIncrementTick>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d003      	beq.n	8001c96 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SysTick_Handler+0x30>)
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	0552      	lsls	r2, r2, #21
 8001c94:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7ff ffc0 	bl	8001c1e <vClearInterruptMaskFromISR>
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <__libc_init_array>:
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	2600      	movs	r6, #0
 8001cb0:	4d0c      	ldr	r5, [pc, #48]	; (8001ce4 <__libc_init_array+0x38>)
 8001cb2:	4c0d      	ldr	r4, [pc, #52]	; (8001ce8 <__libc_init_array+0x3c>)
 8001cb4:	1b64      	subs	r4, r4, r5
 8001cb6:	10a4      	asrs	r4, r4, #2
 8001cb8:	42a6      	cmp	r6, r4
 8001cba:	d109      	bne.n	8001cd0 <__libc_init_array+0x24>
 8001cbc:	2600      	movs	r6, #0
 8001cbe:	f000 f821 	bl	8001d04 <_init>
 8001cc2:	4d0a      	ldr	r5, [pc, #40]	; (8001cec <__libc_init_array+0x40>)
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	; (8001cf0 <__libc_init_array+0x44>)
 8001cc6:	1b64      	subs	r4, r4, r5
 8001cc8:	10a4      	asrs	r4, r4, #2
 8001cca:	42a6      	cmp	r6, r4
 8001ccc:	d105      	bne.n	8001cda <__libc_init_array+0x2e>
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
 8001cd0:	00b3      	lsls	r3, r6, #2
 8001cd2:	58eb      	ldr	r3, [r5, r3]
 8001cd4:	4798      	blx	r3
 8001cd6:	3601      	adds	r6, #1
 8001cd8:	e7ee      	b.n	8001cb8 <__libc_init_array+0xc>
 8001cda:	00b3      	lsls	r3, r6, #2
 8001cdc:	58eb      	ldr	r3, [r5, r3]
 8001cde:	4798      	blx	r3
 8001ce0:	3601      	adds	r6, #1
 8001ce2:	e7f2      	b.n	8001cca <__libc_init_array+0x1e>
 8001ce4:	08001d48 	.word	0x08001d48
 8001ce8:	08001d48 	.word	0x08001d48
 8001cec:	08001d48 	.word	0x08001d48
 8001cf0:	08001d4c 	.word	0x08001d4c

08001cf4 <memset>:
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	1882      	adds	r2, r0, r2
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <memset+0xa>
 8001cfc:	4770      	bx	lr
 8001cfe:	7019      	strb	r1, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	e7f9      	b.n	8001cf8 <memset+0x4>

08001d04 <_init>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0a:	bc08      	pop	{r3}
 8001d0c:	469e      	mov	lr, r3
 8001d0e:	4770      	bx	lr

08001d10 <_fini>:
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d16:	bc08      	pop	{r3}
 8001d18:	469e      	mov	lr, r3
 8001d1a:	4770      	bx	lr
